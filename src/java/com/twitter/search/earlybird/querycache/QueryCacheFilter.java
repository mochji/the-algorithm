package com.tw ter.search.earlyb rd.querycac ;

 mport java.ut l.L st;
 mport java.ut l.TreeMap;

 mport com.google.common.base.Precond  ons;

 mport org.apac .lucene.search.Query;

 mport com.tw ter.common.collect ons.Pa r;
 mport com.tw ter.common.quant y.Amount;
 mport com.tw ter.common.quant y.T  ;
 mport com.tw ter.common.ut l.Clock;
 mport com.tw ter.search.common. tr cs.SearchCounter;
 mport com.tw ter.search.common. tr cs.SearchStatsRece ver;
 mport com.tw ter.search.common.query.thr ftjava.CollectorParams;
 mport com.tw ter.search.common.query.thr ftjava.CollectorTerm nat onParams;
 mport com.tw ter.search.common.sc ma.earlyb rd.Earlyb rdCluster;
 mport com.tw ter.search.common.search.Term nat onTracker;
 mport com.tw ter.search.common.ut l.text.regex.Regex;
 mport com.tw ter.search.earlyb rd.common.conf g.Earlyb rdConf g;
 mport com.tw ter.search.earlyb rd.common.userupdates.UserTable;
 mport com.tw ter.search.earlyb rd.queryparser.Earlyb rdLuceneQueryV s or;
 mport com.tw ter.search.earlyb rd.search.SearchRequest nfo;
 mport com.tw ter.search.earlyb rd.thr ft.Thr ftSearchQuery;
 mport com.tw ter.search.queryparser.parser.Ser al zedQueryParser;
 mport com.tw ter.search.queryparser.query.QueryParserExcept on;

/**
 * T  def n  on of a QueryCac  f lter/entry, l ke t  na  of t  f lter, t  query used
 * to populate t  cac , update sc dule, etc..
 *
 *  nstances of t  class are created by t  YAML loader w n load ng t  conf g f le. Most
 *  mbers are populated by YAML us ng setters through reflect on.
 */
publ c class QueryCac F lter {
  // Data structure type supported as cac  result holder
  publ c enum ResultSetType {
    F xedB Set,
    SparseF xedB Set
  }

  // F elds set d rectly from YML conf g f le.
  pr vate Str ng f lterNa ;           // un que na  for cac d f lter
  pr vate Str ng query;                // ser al zed query str ng
  pr vate ResultSetType resultType;
  pr vate boolean cac ModeOnly;
  pr vate L st<Update nterval> sc dule;
  pr vate SearchCounter quer es;

  // F elds generated based on conf g (but not d rectly).
  pr vate volat le Pa r<Thr ftSearchQuery, Query> queryPa r;
  pr vate TreeMap< nteger, Update nterval> sc duleMap;  // tree map from  ndex to  nterval

  publ c class  nval dEntryExcept on extends Except on {
    publ c  nval dEntryExcept on(Str ng  ssage) {
      super("F lter [" + f lterNa  + "]: " +  ssage);
    }
  }

  publ c stat c class Update nterval {
    // Overr des *all* query cac  update frequenc es to be t  value,  n seconds.
    pr vate f nal  nt overr deSecondsForTests = Earlyb rdConf g.get nt(
        "overr de_query_cac _update_frequency", -1);

    // F elds set d rectly from YML conf g f le.
    pr vate  nt seg nt;
    pr vate long seconds;

    publ c vo d setSeg nt( nt seg nt) {
      t .seg nt = seg nt;
    }

    /**
     * Sets t  update per od  n seconds.  f t  overr de_query_cac _update_frequency para ter  s
     * spec f ed  n t  earlyb rd conf gurat on,  s value  s used  nstead (t  value passed to t 
     *  thod  s  gnored).
     */
    publ c vo d setSeconds(long seconds) {
       f (overr deSecondsForTests != -1) {
        t .seconds = overr deSecondsForTests;
      } else {
        t .seconds = seconds;
      }
    }

    publ c  nt getSeg nt() {
      return seg nt;
    }

    publ c long getSeconds() {
      return seconds;
    }
  }

  publ c vo d setF lterNa (Str ng f lterNa ) throws  nval dEntryExcept on {
    san yC ckF lterNa (f lterNa );
    t .f lterNa  = f lterNa ;
  }

  /**
   * Sets t  dr v ng query for t  query cac  f lter.
   */
  publ c vo d setQuery(Str ng query) throws  nval dEntryExcept on {
     f (query == null || query. sEmpty()) {
      throw new  nval dEntryExcept on("Empty query str ng");
    }

    t .query = query;
  }

  /**
   * Sets t  type of t  results that w ll be generated by t  query cac  f lter.
   */
  publ c vo d setResultType(Str ng resultType) throws  nval dEntryExcept on {
     f (ResultSetType.F xedB Set.toStr ng().equals gnoreCase(resultType)) {
      t .resultType = ResultSetType.F xedB Set;
    } else  f (ResultSetType.SparseF xedB Set.toStr ng().equals gnoreCase(resultType)) {
      t .resultType = ResultSetType.SparseF xedB Set;
    } else {
      throw new  nval dEntryExcept on("Unregcon zed result type [" + resultType + "]");
    }
  }

  publ c vo d setCac ModeOnly(boolean cac ModeOnly) {
    t .cac ModeOnly = cac ModeOnly;
  }

  publ c vo d setSc dule(L st<Update nterval> sc dule)
      throws QueryCac F lter. nval dEntryExcept on {
    san yC ckSc dule(sc dule);
    t .sc dule = sc dule;
    t .sc duleMap = createSc duleMap(sc dule);
  }

  publ c vo d createQueryCounter(SearchStatsRece ver statsRece ver) {
    quer es = statsRece ver.getCounter("cac d_f lter_" + f lterNa  + "_quer es");
  }

  publ c vo d  ncre ntUsageStat() {
    quer es. ncre nt();
  }

  publ c Str ng getF lterNa () {
    return f lterNa ;
  }

  publ c Str ng getQueryStr ng() {
    return query;
  }

  // snakeyaml does not l ke a getter na d getResultType() that does not return a str ng
  publ c ResultSetType getResultSetType() {
    return resultType;
  }

  publ c boolean getCac ModeOnly() {
    return cac ModeOnly;
  }

  publ c Query getLuceneQuery() {
    return queryPa r.getSecond();
  }

  publ c Thr ftSearchQuery getSearchQuery() {
    return queryPa r.getF rst();
  }

  /**
   * Create a new {@l nk SearchRequest nfo} us ng {@l nk #queryPa r}.
   *
   * @return a new {@l nk SearchRequest nfo}
   */
  publ c SearchRequest nfo createSearchRequest nfo() {
    Thr ftSearchQuery searchQuery = Precond  ons.c ckNotNull(queryPa r.getF rst());
    Query luceneQuery = Precond  ons.c ckNotNull(queryPa r.getSecond());

    return new SearchRequest nfo(
        searchQuery, luceneQuery, new Term nat onTracker(Clock.SYSTEM_CLOCK));
  }

  publ c vo d setup(
      QueryCac Manager queryCac Manager,
      UserTable userTable,
      Earlyb rdCluster earlyb rdCluster) throws QueryParserExcept on {
    createQuery(queryCac Manager, userTable, earlyb rdCluster);
  }

  //  ndex corresponds to 'seg nt' from t  conf g f le.  t   s t   ndex of t 
  // seg nt, start ng w h t  current seg nt (0) and count ng backwards  n t  .
  publ c Amount<Long, T  > getUpdate nterval( nt  ndex) {
    long seconds = sc duleMap.floorEntry( ndex).getValue().getSeconds();
    return Amount.of(seconds, T  .SECONDS);
  }

  pr vate TreeMap< nteger, Update nterval> createSc duleMap(L st<Update nterval> sc duleToUse) {
    TreeMap< nteger, Update nterval> map = new TreeMap<>();
    for (Update nterval  nterval : sc duleToUse) {
      map.put( nterval.seg nt,  nterval);
    }
    return map;
  }

  pr vate vo d createQuery(
      QueryCac Manager queryCac Manager,
      UserTable userTable,
      Earlyb rdCluster earlyb rdCluster) throws QueryParserExcept on {

     nt maxSeg ntS ze = Earlyb rdConf g.getMaxSeg ntS ze();
    CollectorParams collect onParams = new CollectorParams();
    collect onParams.setNumResultsToReturn(maxSeg ntS ze);
    CollectorTerm nat onParams term nat onParams = new CollectorTerm nat onParams();
    term nat onParams.setMaxH sToProcess(maxSeg ntS ze);
    collect onParams.setTerm nat onParams(term nat onParams);

    Thr ftSearchQuery searchQuery = new Thr ftSearchQuery();
    searchQuery.setMaxH sPerUser(maxSeg ntS ze);
    searchQuery.setCollectorParams(collect onParams);
    searchQuery.setSer al zedQuery(query);

    f nal Ser al zedQueryParser parser = new Ser al zedQueryParser(
        Earlyb rdConf g.getPengu nVers on());

    Query luceneQuery = parser.parse(query).s mpl fy().accept(
        new Earlyb rdLuceneQueryV s or(
            queryCac Manager.get ndexConf g().getSc ma().getSc maSnapshot(),
            queryCac Manager,
            userTable,
            queryCac Manager.getUserScrubGeoMap(),
            earlyb rdCluster,
            queryCac Manager.getDec der()));
     f (luceneQuery == null) {
      throw new QueryParserExcept on("Unable to create lucene query from " + query);
    }

    queryPa r = new Pa r<>(searchQuery, luceneQuery);
  }

  pr vate vo d san yC ckF lterNa (Str ng f lter) throws  nval dEntryExcept on {
     f (f lter == null || f lter. sEmpty()) {
      throw new  nval dEntryExcept on("M ss ng f lter na ");
    }
     f (Regex.F LTER_NAME_CHECK.matc r(f lter).f nd()) {
      throw new  nval dEntryExcept on(
          " nval d character  n f lter na . Chars allo d [a-zA-Z_0-9]");
    }
  }

  pr vate vo d san yC ckSc dule(L st<Update nterval>  ntervals)
      throws  nval dEntryExcept on {
    // Make sure t re's at least 1  nterval def ned
     f ( ntervals == null ||  ntervals. sEmpty()) {
      throw new  nval dEntryExcept on("No sc dule def ned");
    }

    // Make sure t  f rst  nterval starts w h seg nt 0
     f ( ntervals.get(0).getSeg nt() != 0) {
      throw new  nval dEntryExcept on(
          "T  f rst  nterval  n t  sc dule must start from seg nt 0");
    }

    // Make sure seg nts are def ned  n order, and no seg nt  s def ned more than tw ce
     nt prevSeg nt =  ntervals.get(0).getSeg nt();
    for ( nt   = 1;   <  ntervals.s ze(); ++ ) {
       nt currentSeg nt =  ntervals.get( ).getSeg nt();
       f (prevSeg nt > currentSeg nt) {
        throw new  nval dEntryExcept on("Seg nt  ntervals out of order. Seg nt " + prevSeg nt
            + "  s def ned before seg nt " + currentSeg nt);
      }

       f (prevSeg nt ==  ntervals.get( ).getSeg nt()) {
        throw new  nval dEntryExcept on("Seg nt " + prevSeg nt + "  s def ned tw ce");
      }

      prevSeg nt = currentSeg nt;
    }
  }

  protected vo d san yC ck() throws  nval dEntryExcept on {
    san yC ckF lterNa (f lterNa );
     f (query == null || query. sEmpty()) {
      throw new  nval dEntryExcept on("M ss ng query");
    }
     f (resultType == null) {
      throw new  nval dEntryExcept on("M ss ng result type");
    }
     f (sc dule == null || sc dule.s ze() == 0) {
      throw new  nval dEntryExcept on("M ss ng update sc dule");
    }
     f (sc duleMap == null || sc duleMap.s ze() == 0) {
      throw new  nval dEntryExcept on("M ss ng update sc dule map");
    }
  }

  @Overr de
  publ c Str ng toStr ng() {
    return "f lterNa : [" + getF lterNa ()
        + "] query: [" + getQueryStr ng()
        + "] result type [" + getResultSetType()
        + "] sc dule: " + sc dule;
  }
}
