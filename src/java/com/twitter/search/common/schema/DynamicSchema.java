package com.tw ter.search.common.sc ma;

 mport java.ut l.Collect on;
 mport java.ut l.Map;
 mport java.ut l.concurrent.atom c.Atom cReference;

 mport javax.annotat on.Nullable;

 mport com.google.common.base.Precond  ons;
 mport com.google.common.base.Pred cate;
 mport com.google.common.collect. mmutableCollect on;
 mport com.google.common.collect. mmutableMap;

 mport org.apac .lucene.analys s.Analyzer;
 mport org.apac .lucene.facet.FacetsConf g;
 mport org.apac .lucene. ndex.F eld nfos;
 mport org.slf4j.Logger;
 mport org.slf4j.LoggerFactory;

 mport com.tw ter.search.common.features.thr ft.Thr ftSearchFeatureSc ma;
 mport com.tw ter.search.common.sc ma.base.FeatureConf gurat on;
 mport com.tw ter.search.common.sc ma.base.F eld  ghtDefault;
 mport com.tw ter.search.common.sc ma.base. mmutableSc ma nterface;
 mport com.tw ter.search.common.sc ma.base.Sc ma;
 mport com.tw ter.search.common.sc ma.thr ftjava.Thr ftAnalyzer;
 mport com.tw ter.search.common.sc ma.thr ftjava.Thr ftCSFType;
 mport com.tw ter.search.common.sc ma.thr ftjava.Thr ftF eldConf gurat on;

/**
 * A sc ma  mple ntat on that allow m nor vers on  ncre nts at run t  .
 */
publ c class Dynam cSc ma  mple nts Sc ma {
  pr vate stat c f nal Logger LOG = LoggerFactory.getLogger(Dynam cSc ma.class);

  pr vate f nal Atom cReference< mmutableSc ma> sc ma;

  publ c Dynam cSc ma( mmutableSc ma sc ma) {
    t .sc ma = new Atom cReference<>(sc ma);
  }

  publ c  mmutableSc ma nterface getSc maSnapshot() {
    return sc ma.get();
  }

  /**
   * Update t  sc ma reference  ns de t  Dynam cSc ma.
   */
  publ c synchron zed vo d updateSc ma( mmutableSc ma newSc ma) throws Sc maUpdateExcept on {
     mmutableSc ma oldSc ma = sc ma.get();
     f (newSc ma.getMajorVers onNumber() != oldSc ma.getMajorVers onNumber()) {
      throw new Sc maUpdateExcept on("Dynam c major vers on update  s not supported.");
    } else {
       f (newSc ma.getM norVers onNumber() <= oldSc ma.getM norVers onNumber()) {
        throw new Sc maUpdateExcept on("Dynam c backward m nor vers on update  s not supported.");
      } else {
        LOG. nfo("Dynam cSc ma accepted update. Old vers on  s {}.{}; new vers on  s {}.{}",
            oldSc ma.getMajorVers onNumber(),
            oldSc ma.getM norVers onNumber(),
            newSc ma.getMajorVers onNumber(),
            newSc ma.getM norVers onNumber());
        sc ma.set(newSc ma);
      }
    }
  }

  publ c stat c class Sc maUpdateExcept on extends Except on {
    publ c Sc maUpdateExcept on(Str ng  ssage) {
      super( ssage);
    }
  }

  // T  below are all  thods  n t  Sc ma  nterface delegated to t  underly ng  mmutableSc ma.
  // T  below  s generated by  ntell J, and rev e rs can stop rev ew ng t  f le  re.
  //  f   are add ng log c  nto t  class, please do so above t  l ne.
  @Overr de
  publ c F eld nfos getLuceneF eld nfos(
      Pred cate<Str ng> acceptedF elds) {
    return sc ma.get().getLuceneF eld nfos(acceptedF elds);
  }

  @Overr de
  publ c FacetsConf g getFacetsConf g() {
    return sc ma.get().getFacetsConf g();
  }

  @Overr de
  publ c Analyzer getDefaultAnalyzer(
      Thr ftAnalyzer overr de) {
    return sc ma.get().getDefaultAnalyzer(overr de);
  }

  @Overr de
  publ c  mmutableCollect on<F eld nfo> getF eld nfos() {
    return sc ma.get().getF eld nfos();
  }

  @Overr de
  publ c boolean hasF eld( nt f eldConf g d) {
    return sc ma.get().hasF eld(f eldConf g d);
  }

  @Overr de
  publ c boolean hasF eld(Str ng f eldNa ) {
    return sc ma.get().hasF eld(f eldNa );
  }

  @Overr de
  @Nullable
  publ c F eld nfo getF eld nfo( nt f eldConf g d) {
    return sc ma.get().getF eld nfo(f eldConf g d);
  }

  @Overr de
  @Nullable
  publ c F eld nfo getF eld nfo(Str ng f eldNa ) {
    return sc ma.get().getF eld nfo(f eldNa );
  }

  @Overr de
  publ c Str ng getF eldNa ( nt f eldConf g d) {
    return sc ma.get().getF eldNa (f eldConf g d);
  }

  @Overr de
  publ c F eld nfo getF eld nfo( nt f eldConf g d,
                                Thr ftF eldConf gurat on overr de) {
    return sc ma.get().getF eld nfo(f eldConf g d, overr de);
  }

  @Overr de
  publ c  nt getNumFacetF elds() {
    return sc ma.get().getNumFacetF elds();
  }

  @Overr de
  publ c F eld nfo getFacetF eldByFacetNa (
      Str ng facetNa ) {
    return sc ma.get().getFacetF eldByFacetNa (facetNa );
  }

  @Overr de
  publ c F eld nfo getFacetF eldByF eldNa (
      Str ng f eldNa ) {
    return sc ma.get().getFacetF eldByF eldNa (f eldNa );
  }

  @Overr de
  publ c Collect on<F eld nfo> getFacetF elds() {
    return sc ma.get().getFacetF elds();
  }

  @Overr de
  publ c Collect on<F eld nfo> getCsfFacetF elds() {
    return sc ma.get().getCsfFacetF elds();
  }

  @Overr de
  publ c Str ng getVers onDescr pt on() {
    return sc ma.get().getVers onDescr pt on();
  }

  @Overr de
  publ c  nt getMajorVers onNumber() {
    return sc ma.get().getMajorVers onNumber();
  }

  @Overr de
  publ c  nt getM norVers onNumber() {
    return sc ma.get().getM norVers onNumber();
  }

  @Overr de
  publ c boolean  sVers onOff c al() {
    return sc ma.get(). sVers onOff c al();
  }

  @Overr de
  publ c Map<Str ng, F eld  ghtDefault> getF eld  ghtMap() {
    return sc ma.get().getF eld  ghtMap();
  }

  @Overr de
  publ c FeatureConf gurat on getFeatureConf gurat onByNa (
      Str ng featureNa ) {
    return sc ma.get().getFeatureConf gurat onByNa (featureNa );
  }

  @Overr de
  publ c FeatureConf gurat on getFeatureConf gurat onBy d( nt featureF eld d) {
    return Precond  ons.c ckNotNull(sc ma.get().getFeatureConf gurat onBy d(featureF eld d));
  }

  @Overr de
  @Nullable
  publ c Thr ftCSFType getCSFF eldType(
      Str ng f eldNa ) {
    return sc ma.get().getCSFF eldType(f eldNa );
  }

  @Overr de
  publ c Thr ftSearchFeatureSc ma getSearchFeatureSc ma() {
    return sc ma.get().getSearchFeatureSc ma();
  }

  @Overr de
  publ c  mmutableMap< nteger, FeatureConf gurat on> getFeature dToFeatureConf g() {
    return sc ma.get().getFeature dToFeatureConf g();
  }

  @Overr de
  publ c  mmutableMap<Str ng, FeatureConf gurat on> getFeatureNa ToFeatureConf g() {
    return sc ma.get().getFeatureNa ToFeatureConf g();
  }
}
