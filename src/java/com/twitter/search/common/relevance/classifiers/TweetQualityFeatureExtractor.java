package com.tw ter.search.common.relevance.class f ers;

 mport java. o. OExcept on;
 mport java.ut l.Set;

 mport com.google.common.base.Precond  ons;

 mport com.tw ter.common.text.transfor r.RegexTransfor r;
 mport com.tw ter.common.text.transfor r.RtRemovalTransfor r;
 mport com.tw ter.common.text.transfor r.Transfor r;
 mport com.tw ter.common.text.transfor r.Transfor rCha n;
 mport com.tw ter.common_ nternal.text.dupl cate.RandomSubstr ngExtractor;
 mport com.tw ter.common_ nternal.text.dupl cate.S gnatureGenerator;
 mport com.tw ter.common_ nternal.text.vers on.Pengu nVers on;
 mport com.tw ter.search.common.relevance.ent  es.Tw ter ssage;
 mport com.tw ter.search.common.relevance.features.T et ntegerSh ngleS gnature;
 mport com.tw ter.search.common.relevance.features.T etTextFeatures;
 mport com.tw ter.search.common.ut l.text.Normal zer lper;
 mport com.tw ter.tw tertext.Regex;

/**
 * G ven a t et text, extract useful text features.
 */
publ c class T etQual yFeatureExtractor {
  pr vate stat c f nal Transfor r STATUS_TEXT_CLEANER =
      Transfor rCha n.of(
          // remove @reply as def ned  n tw ter-text
          new RegexTransfor r.Bu lder()
              .setRegexPattern(Regex.VAL D_REPLY)
              .setReplaceStr ng("")
              .setTr gger ngChar('@')
              .bu ld(),
          // remove t  old style ret et, eg RT: @ nt on or v a @ nt on
          new RtRemovalTransfor r()
      );

  // for s gnature generat on
  pr vate stat c f nal  nt M N_NUM_FEATURES = 2;
  pr vate f nal S gnatureGenerator s gnatureGenerator = new S gnatureGenerator(
      new RandomSubstr ngExtractor(
          T et ntegerSh ngleS gnature.NUM_SH NGLES, // number of s gnatures
          M N_NUM_FEATURES, // each s gnature  s generated by tak ng t  number of features/tokens
                            // from text
          false, // do not cons der full t et text as a feature
          false)); // do not do early term nat on

  /**
   * G ven Tw ter ssage, extract all  nterest ng t et text features and store  n
   * t  returned T etTextFeatures object.
   *
   * @param t et Tw ter ssage to extract features from
   * @throws  OExcept on
   */
  publ c vo d extractT etTextFeatures(f nal Tw ter ssage t et) {
    Precond  ons.c ckNotNull(t et);

    for (Pengu nVers on pengu nVers on : t et.getSupportedPengu nVers ons()) {
      // Get bas c features.
      T etTextFeatures textFeatures = t et.getT etTextFeatures(pengu nVers on);

      extractCharLength(textFeatures);

      // S gnature that has s on text w h resolved urls, aggress vely remove RT tags, wh ch
      // accounts for more than 50% of neardups, also remove @ nt ons.
      //   use resolved urls for s gnature s nce t y are what matters.
      CharSequence str ppedText = t et.getTextReplacedW hResolvedURLs();
      str ppedText = str ppedText == null ? "" : str ppedText;
      str ppedText = STATUS_TEXT_CLEANER.transform(str ppedText);

      // Generate t  s gnature.
      // w ll lo r case, use pengu n
      Str ng normal zedS gnatureText =
        Normal zer lper.normal ze(str ppedText, t et.getLocale(), pengu nVers on);
       f (normal zedS gnatureText != null && !normal zedS gnatureText. sEmpty()) {
        Set<byte[]> rawS gnature =
          s gnatureGenerator.generateS gnatureByteArray(normal zedS gnatureText);
        textFeatures.setS gnature((new T et ntegerSh ngleS gnature(rawS gnature)).ser al ze());
      }
    }
  }

  /**
   * Compute number of letters  n str pped t et text, also records unsupported char counts.
   *
   * @param textFeatures T etTextFeatures object to store letter length, unsupported chars, etc.
   */
  pr vate stat c vo d extractCharLength(f nal T etTextFeatures textFeatures) {
    Precond  ons.c ckNotNull(textFeatures);
     nt length = 0;
     nt caps = 0;
    Str ng str ppedText = textFeatures.getNormal zedStr ppedText();
     f (str ppedText != null && !str ppedText. sEmpty()) {
      for (char c : str ppedText.toCharArray()) {
         f (Character. sLetter(c)) {
          length++;
           f (Character. sUpperCase(c)) {
            caps++;
          }
        }
      }
    }
    textFeatures.setLength(length);
    textFeatures.setCaps(caps);
  }
}
