package com.tw ter.graph.batch.job.t epcred

 mport com.tw ter.pluck.s ce.comb ned_user_s ce.MostRecentComb nedUserSnapshotS ce
 mport com.tw ter.scald ng._

/**
 * Calculate t epcred from t  g ven pagerank f le.  f post_adjust  s true,
 * reduce pagerank for users w h low follo rs compared to number of
 * follow ngs based on ex st ng reputat on code.
 * Opt ons:
 * -- nput_pagerank: g ven pagerank
 * --user_mass: user mass tsv f le, generated by twadoop user_mass job
 * --output_pagerank: w re to put pagerank f le
 * --output_t epcred: w re to put t epcred f le
 * opt onal argu nts:
 * --post_adjust: w t r to do post adjust, default true
 *
 */
class ExtractT epcred(args: Args) extends Job(args) {
  val POST_ADJUST = args.getOrElse("post_adjust", "true").toBoolean

  val  nputPagerank = get nputPagerank(args(" nput_pagerank"))
    .map(() -> ('num_follo rs, 'num_follow ngs)) { (u: Un ) =>
      (0, 0)
    }

  val user nfo = TypedP pe
    .from(MostRecentComb nedUserSnapshotS ce)
    .flatMap { comb nedUser =>
      val user = Opt on(comb nedUser.user)
      val user d = user.map(_. d).getOrElse(0L)
      val userExtended = Opt on(comb nedUser.user_extended)
      val numFollo rs = userExtended.flatMap(u => Opt on(u.follo rs)).map(_.to nt).getOrElse(0)
      val numFollow ngs = userExtended.flatMap(u => Opt on(u.follow ngs)).map(_.to nt).getOrElse(0)

       f (user d == 0L || user.map(_.safety).ex sts(_.deact vated)) {
        None
      } else {
        So ((user d, 0.0, numFollo rs, numFollow ngs))
      }
    }
    .toP pe[(Long, Double,  nt,  nt)]('src_ d, 'mass_ nput, 'num_follo rs, 'num_follow ngs)

  val pagerankW hSuspended = ( nputPagerank ++ user nfo)
    .groupBy('src_ d) {
      _.max('mass_ nput)
        .max('num_follo rs)
        .max('num_follow ngs)
    }

  pagerankW hSuspended
    .d scard('num_follo rs, 'num_follow ngs)
    .wr e(Tsv(args("output_pagerank")))

  val adjustedPagerank =
     f (POST_ADJUST) {
      pagerankW hSuspended
        .map(('mass_ nput, 'num_follo rs, 'num_follow ngs) -> 'mass_ nput) {
           nput: (Double,  nt,  nt) =>
            Reputat on.adjustReputat onsPostCalculat on( nput._1,  nput._2,  nput._3)
        }
        .normal ze('mass_ nput)
    } else {
      pagerankW hSuspended
        .d scard('num_follo rs, 'num_follow ngs)
    }

  val t epcred = adjustedPagerank
    .map('mass_ nput -> 'mass_ nput) {  nput: Double =>
      Reputat on.scaledReputat on( nput)
    }

  t epcred.wr e(Tsv(args("output_t epcred")))
  t epcred.wr e(Tsv(args("current_t epcred")))
  t epcred.wr e(Tsv(args("today_t epcred")))

  def get nputPagerank(f leNa : Str ng) = {
    Tsv(f leNa ).read
      .mapTo((0, 1) -> ('src_ d, 'mass_ nput)) {  nput: (Long, Double) =>
         nput
      }
  }
}
