<conf gurat on>
  <shutdownHook class="ch.qos.logback.core.hook.Delay ngShutdownHook"/>
  <property na ="async_queue_s ze" value="${queue.s ze:-50000}"/>
  <property na ="async_max_flush_t  " value="${max.flush.t  :-0}"/>
  <!-- ===================================================== -->
  <!-- Structured Logg ng -->
  <!-- ===================================================== -->
  <!-- Only sample 0.1% of t  requests -->
  <property na ="splunk_sampl ng_rate" value="${splunk_sampl ng_rate:-0.001}"/>
  < nclude res ce="structured-logger-logback.xml"/>
  <!-- ===================================================== -->
  <!-- Serv ce Conf g -->
  <!-- ===================================================== -->
  <property na ="DEFAULT_SERV CE_PATTERN"
            value="%-16X{transact on d} %logger %msg"/>

  <!-- ===================================================== -->
  <!-- Common Conf g -->
  <!-- ===================================================== -->

  <!-- JUL/JDK14 to Logback br dge -->
  <contextL stener class="ch.qos.logback.class c.jul.LevelChangePropagator">
    <resetJUL>true</resetJUL>
  </contextL stener>

  <!-- Serv ce Log (Rollover every 50MB, max 11 logs) -->
  <appender na ="SERV CE" class="ch.qos.logback.core.roll ng.Roll ngF leAppender">
    <f le>${log.serv ce.output}</f le>
    <roll ngPol cy class="ch.qos.logback.core.roll ng.F xedW ndowRoll ngPol cy">
      <f leNa Pattern>${log.serv ce.output}.% </f leNa Pattern>
      <m n ndex>1</m n ndex>
      <max ndex>10</max ndex>
    </roll ngPol cy>
    <tr gger ngPol cy class="ch.qos.logback.core.roll ng.S zeBasedTr gger ngPol cy">
      <maxF leS ze>50MB</maxF leS ze>
    </tr gger ngPol cy>
    <encoder>
      <pattern>%date %.-3level ${DEFAULT_SERV CE_PATTERN}%n</pattern>
    </encoder>
  </appender>

  <!-- Strato package only log (Rollover every 50MB, max 11 logs) -->
  <appender na ="STRATO-ONLY" class="ch.qos.logback.core.roll ng.Roll ngF leAppender">
    <f le>${log.strato_only.output}</f le>
    <roll ngPol cy class="ch.qos.logback.core.roll ng.F xedW ndowRoll ngPol cy">
      <f leNa Pattern>${log.strato_only.output}.% </f leNa Pattern>
      <m n ndex>1</m n ndex>
      <max ndex>10</max ndex>
    </roll ngPol cy>
    <tr gger ngPol cy class="ch.qos.logback.core.roll ng.S zeBasedTr gger ngPol cy">
      <maxF leS ze>50MB</maxF leS ze>
    </tr gger ngPol cy>
    <encoder>
      <pattern>%date %.-3level ${DEFAULT_SERV CE_PATTERN}%n</pattern>
    </encoder>
  </appender>

  <!-- LogLens -->
  <appender na ="LOGLENS" class="com.tw ter.loglens.logback.LoglensAppender">
    <mdcAdd  onalContext>true</mdcAdd  onalContext>
    <category>loglens</category>
    < ndex>${log.lens. ndex}</ ndex>
    <tag>${log.lens.tag}/serv ce</tag>
    <encoder>
      <pattern>%msg%n</pattern>
    </encoder>
    <turboF lter class="ch.qos.logback.class c.turbo.Dupl cate ssageF lter">
      <cac S ze>500</cac S ze>
      <allo dRepet  ons>50</allo dRepet  ons>
    </turboF lter>
    <f lter class="com.tw ter.strato.logg ng.logback.RegexF lter">
      <forLogger>manhattan-cl ent</forLogger>
      <excludeRegex>.* nval dRequest.*</excludeRegex>
    </f lter>
  </appender>

  <!-- ===================================================== -->
  <!-- Pr mary Async Appenders -->
  <!-- ===================================================== -->

  <appender na ="ASYNC-SERV CE" class="ch.qos.logback.class c.AsyncAppender">
    <queueS ze>${async_queue_s ze}</queueS ze>
    <maxFlushT  >${async_max_flush_t  }</maxFlushT  >
    <appender-ref ref="SERV CE"/>
  </appender>

  <appender na ="ASYNC-STRATO-ONLY" class="ch.qos.logback.class c.AsyncAppender">
    <queueS ze>${async_queue_s ze}</queueS ze>
    <maxFlushT  >${async_max_flush_t  }</maxFlushT  >
    <appender-ref ref="STRATO-ONLY"/>
  </appender>

  <appender na ="ASYNC-LOGLENS" class="ch.qos.logback.class c.AsyncAppender">
    <queueS ze>${async_queue_s ze}</queueS ze>
    <maxFlushT  >${async_max_flush_t  }</maxFlushT  >
    <appender-ref ref="LOGLENS"/>
  </appender>

  <!-- ===================================================== -->
  <!-- Package Conf g -->
  <!-- ===================================================== -->

  <!-- Per-Package Conf g (shared) -->
  <logger na ="com.tw ter" level=" nfo"/>

  <!--
    By default,   leave t  strato package at  NFO level.
    Ho ver, t  l ne allows us to set t  ent re strato package, or a subset of  , to
    a spec f c level. For example,  f   pass -Dstrato_log_package=stream ng -Dstrato_log_level=DEBUG
    only loggers under com.tw ter.strato.stream ng.* w ll be set to DEBUG level. Pass ng only
    -Dstrato_log_level w ll set all of strato.* to t  spec f ed level.
  -->
  <logger na ="com.tw ter.strato${strato_log_package:-}" level="${strato_log_level:- NFO}"/>

  <logger na ="com.tw ter.w lyns" level="warn"/>
  <logger na ="com.tw ter.f nagle.mux" level="warn"/>
  <logger na ="com.tw ter.f nagle.serverset2" level="warn"/>
  <logger na ="com.tw ter.logg ng.Scr beHandler" level="warn"/>
  <logger na ="com.tw ter.zookeeper.cl ent. nternal" level="warn"/>
  <logger na ="com.tw ter.dec der.StoreDec der" level="warn"/>

  <!-- Per-Package Conf g (Strato) -->
  <logger na ="com.tw ter.d str butedlog.cl ent" level="warn"/>
  <logger na ="com.tw ter.f nagle.mtls.author zat on.conf g.AccessControlL stConf gurat on" level="warn"/>
  <logger na ="com.tw ter.f natra.kafka.common.kerberos lpers" level="warn"/>
  <logger na ="com.tw ter.f natra.kafka.ut ls.BootstrapServerUt ls" level="warn"/>
  <logger na ="com.tw ter.server.coord nate" level="error"/>
  <logger na ="com.tw ter.zookeeper.cl ent" level=" nfo"/>
  <logger na ="org.apac .zookeeper" level="error"/>
  <logger na ="org.apac .zookeeper.Cl entCnxn" level="warn"/>
  <logger na ="ZkSess on" level=" nfo"/>
  <logger na ="Opt m st cLock ngCac " level="off"/>
  <logger na ="manhattan-cl ent" level="warn"/>
  <logger na ="strato.op" level="warn"/>
  <logger na ="org.apac .kafka.cl ents.NetworkCl ent" level="error"/>
  <logger na ="org.apac .kafka.cl ents.consu r. nternals" level="error"/>
  <logger na ="org.apac .kafka.cl ents.producer. nternals" level="error"/>
  <!-- produce a lot of  ssages l ke: Bu ld ng cl ent aut nt cator w h server na  kafka -->
  <logger na ="org.apac .kafka.common.network" level="warn"/>

  <!-- Root Conf g -->
  <root level="${log_level:- NFO}">
    <appender-ref ref="ASYNC-SERV CE"/>
    <appender-ref ref="ASYNC-LOGLENS"/>
  </root>

  <!-- Strato package only logg ng-->
  <logger na ="com.tw ter.strato"
          level=" nfo"
          add  v y="true">
    <appender-ref ref="ASYNC-STRATO-ONLY" />
  </logger>


</conf gurat on>
