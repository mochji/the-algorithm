package com.tw ter.ho _m xer.model

 mport com.tw ter.esc rb rd.{thr ftscala => esb}
 mport com.tw ter.search.common.features.{thr ftscala => sc}
 mport com.tw ter.t etyp e.{thr ftscala => tp}

object ContentFeatures {
  val Empty: ContentFeatures = ContentFeatures(
    0.toShort,
    false,
    0.toShort,
    0.toShort,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None
  )

  def fromThr ft(ebFeatures: sc.Thr ftT etFeatures): ContentFeatures =
    ContentFeatures(
      length = ebFeatures.t etLength.getOrElse(0).toShort,
      hasQuest on = ebFeatures.hasQuest on.getOrElse(false),
      numCaps = ebFeatures.numCaps.getOrElse(0).toShort,
      numWh eSpaces = ebFeatures.numWh espaces.getOrElse(0).toShort,
      numNewl nes = ebFeatures.numNewl nes,
      v deoDurat onMs = ebFeatures.v deoDurat onMs,
      b Rate = ebFeatures.b Rate,
      aspectRat oNum = ebFeatures.aspectRat oNum,
      aspectRat oDen = ebFeatures.aspectRat oDen,
      w dths = ebFeatures.w dths.map(_.map(_.toShort)),
        ghts = ebFeatures.  ghts.map(_.map(_.toShort)),
      res ze thods = ebFeatures.res ze thods.map(_.map(_.toShort)),
      num d aTags = ebFeatures.num d aTags.map(_.toShort),
       d aTagScreenNa s = ebFeatures. d aTagScreenNa s,
      emoj Tokens = ebFeatures.emoj Tokens.map(_.toSet),
      emot conTokens = ebFeatures.emot conTokens.map(_.toSet),
      faceAreas = ebFeatures.faceAreas,
      dom nantColorRed = ebFeatures.dom nantColorRed,
      dom nantColorBlue = ebFeatures.dom nantColorBlue,
      dom nantColorGreen = ebFeatures.dom nantColorGreen,
      numColors = ebFeatures.numColors.map(_.toShort),
      st cker ds = ebFeatures.st cker ds,
       d aOr g nProv ders = ebFeatures. d aOr g nProv ders,
       sManaged = ebFeatures. sManaged,
       s360 = ebFeatures. s360,
      v ewCount = ebFeatures.v ewCount,
       sMonet zable = ebFeatures. sMonet zable,
       sEmbeddable = ebFeatures. sEmbeddable,
      hasSelectedPrev ew mage = ebFeatures.hasSelectedPrev ew mage,
      hasT le = ebFeatures.hasT le,
      hasDescr pt on = ebFeatures.hasDescr pt on,
      hasV s S eCallToAct on = ebFeatures.hasV s S eCallToAct on,
      hasApp nstallCallToAct on = ebFeatures.hasApp nstallCallToAct on,
      hasWatchNowCallToAct on = ebFeatures.hasWatchNowCallToAct on,
      dom nantColorPercentage = ebFeatures.dom nantColorPercentage,
      posUn grams = ebFeatures.posUn grams.map(_.toSet),
      posB grams = ebFeatures.posB grams.map(_.toSet),
      semant cCoreAnnotat ons = ebFeatures.semant cCoreAnnotat ons,
      tokens = ebFeatures.textTokens.map(_.toSeq),
      conversat onControl = ebFeatures.conversat onControl,
      //  d a and selfThread tadata not carr ed by Thr ftT etFeatures
       d a = None,
      selfThread tadata = None
    )
}

case class ContentFeatures(
  length: Short,
  hasQuest on: Boolean,
  numCaps: Short,
  numWh eSpaces: Short,
  numNewl nes: Opt on[Short],
  v deoDurat onMs: Opt on[ nt],
  b Rate: Opt on[ nt],
  aspectRat oNum: Opt on[Short],
  aspectRat oDen: Opt on[Short],
  w dths: Opt on[Seq[Short]],
    ghts: Opt on[Seq[Short]],
  res ze thods: Opt on[Seq[Short]],
  num d aTags: Opt on[Short],
   d aTagScreenNa s: Opt on[Seq[Str ng]],
  emoj Tokens: Opt on[Set[Str ng]],
  emot conTokens: Opt on[Set[Str ng]],
  faceAreas: Opt on[Seq[ nt]],
  dom nantColorRed: Opt on[Short],
  dom nantColorBlue: Opt on[Short],
  dom nantColorGreen: Opt on[Short],
  numColors: Opt on[Short],
  st cker ds: Opt on[Seq[Long]],
   d aOr g nProv ders: Opt on[Seq[Str ng]],
   sManaged: Opt on[Boolean],
   s360: Opt on[Boolean],
  v ewCount: Opt on[Long],
   sMonet zable: Opt on[Boolean],
   sEmbeddable: Opt on[Boolean],
  hasSelectedPrev ew mage: Opt on[Boolean],
  hasT le: Opt on[Boolean],
  hasDescr pt on: Opt on[Boolean],
  hasV s S eCallToAct on: Opt on[Boolean],
  hasApp nstallCallToAct on: Opt on[Boolean],
  hasWatchNowCallToAct on: Opt on[Boolean],
   d a: Opt on[Seq[tp. d aEnt y]],
  dom nantColorPercentage: Opt on[Double],
  posUn grams: Opt on[Set[Str ng]],
  posB grams: Opt on[Set[Str ng]],
  semant cCoreAnnotat ons: Opt on[Seq[esb.T etEnt yAnnotat on]],
  selfThread tadata: Opt on[tp.SelfThread tadata],
  tokens: Opt on[Seq[Str ng]],
  conversat onControl: Opt on[tp.Conversat onControl],
)
