// Copyr ght 2020 kubeflow.org.
//
// L censed under t  Apac  L cense, Vers on 2.0 (t  "L cense");
//   may not use t  f le except  n compl ance w h t  L cense.
//   may obta n a copy of t  L cense at
//
//    http://www.apac .org/l censes/L CENSE-2.0
//
// Unless requ red by appl cable law or agreed to  n wr  ng, software
// d str buted under t  L cense  s d str buted on an "AS  S" BAS S,
// W THOUT WARRANT ES OR COND T ONS OF ANY K ND, e  r express or  mpl ed.
// See t  L cense for t  spec f c language govern ng perm ss ons and
// l m at ons under t  L cense.

syntax = "proto3";
package  nference;

//  nference Server GRPC endpo nts.
serv ce GRPC nferenceServ ce
{
  // T  ServerL ve AP   nd cates  f t   nference server  s able to rece ve 
  // and respond to  tadata and  nference requests.
  rpc ServerL ve(ServerL veRequest) returns (ServerL veResponse) {}

  // T  ServerReady AP   nd cates  f t  server  s ready for  nferenc ng.
  rpc ServerReady(ServerReadyRequest) returns (ServerReadyResponse) {}

  // T  ModelReady AP   nd cates  f a spec f c model  s ready for  nferenc ng.
  rpc ModelReady(ModelReadyRequest) returns (ModelReadyResponse) {}

  // T  Server tadata AP  prov des  nformat on about t  server. Errors are 
  //  nd cated by t  google.rpc.Status returned for t  request. T  OK code 
  //  nd cates success and ot r codes  nd cate fa lure.
  rpc Server tadata(Server tadataRequest) returns (Server tadataResponse) {}

  // T  per-model  tadata AP  prov des  nformat on about a model. Errors are 
  //  nd cated by t  google.rpc.Status returned for t  request. T  OK code 
  //  nd cates success and ot r codes  nd cate fa lure.
  rpc Model tadata(Model tadataRequest) returns (Model tadataResponse) {}

  // T  Model nfer AP  performs  nference us ng t  spec f ed model. Errors are
  //  nd cated by t  google.rpc.Status returned for t  request. T  OK code 
  //  nd cates success and ot r codes  nd cate fa lure.
  rpc Model nfer(Model nferRequest) returns (Model nferResponse) {}
}

 ssage ServerL veRequest {}

 ssage ServerL veResponse
{
  // True  f t   nference server  s l ve, false  f not l ve.
  bool l ve = 1;
}

 ssage ServerReadyRequest {}

 ssage ServerReadyResponse
{
  // True  f t   nference server  s ready, false  f not ready.
  bool ready = 1;
}

 ssage ModelReadyRequest
{
  // T  na  of t  model to c ck for read ness.
  str ng na  = 1;

  // T  vers on of t  model to c ck for read ness.  f not g ven t 
  // server w ll choose a vers on based on t  model and  nternal pol cy.
  str ng vers on = 2;
}

 ssage ModelReadyResponse
{
  // True  f t  model  s ready, false  f not ready.
  bool ready = 1;
}

 ssage Server tadataRequest {}

 ssage Server tadataResponse
{
  // T  server na .
  str ng na  = 1;

  // T  server vers on.
  str ng vers on = 2;

  // T  extens ons supported by t  server.
  repeated str ng extens ons = 3;
}

 ssage Model tadataRequest
{
  // T  na  of t  model.
  str ng na  = 1;

  // T  vers on of t  model to c ck for read ness.  f not g ven t 
  // server w ll choose a vers on based on t  model and  nternal pol cy.
  str ng vers on = 2;
}

 ssage Model tadataResponse
{
  //  tadata for a tensor.
   ssage Tensor tadata
  {
    // T  tensor na .
    str ng na  = 1;

    // T  tensor data type.
    str ng datatype = 2;

    // T  tensor shape. A var able-s ze d  ns on  s represented
    // by a -1 value.
    repeated  nt64 shape = 3;
  }

  // T  model na .
  str ng na  = 1;

  // T  vers ons of t  model ava lable on t  server.
  repeated str ng vers ons = 2;

  // T  model's platform. See Platforms.
  str ng platform = 3;

  // T  model's  nputs.
  repeated Tensor tadata  nputs = 4;

  // T  model's outputs.
  repeated Tensor tadata outputs = 5;
}

 ssage Model nferRequest
{
  // An  nput tensor for an  nference request.
   ssage  nfer nputTensor
  {
    // T  tensor na .
    str ng na  = 1;

    // T  tensor data type.
    str ng datatype = 2;

    // T  tensor shape.
    repeated  nt64 shape = 3;

    // Opt onal  nference  nput tensor para ters.
    map<str ng,  nferPara ter> para ters = 4;

    // T  tensor contents us ng a data-type format. T  f eld must
    // not be spec f ed  f "raw" tensor contents are be ng used for
    // t   nference request.
     nferTensorContents contents = 5;
  }

  // An output tensor requested for an  nference request.
   ssage  nferRequestedOutputTensor
  {
    // T  tensor na .
    str ng na  = 1;

    // Opt onal requested output tensor para ters.
    map<str ng,  nferPara ter> para ters = 2;
  }

  // T  na  of t  model to use for  nferenc ng.
  str ng model_na  = 1;

  // T  vers on of t  model to use for  nference.  f not g ven t 
  // server w ll choose a vers on based on t  model and  nternal pol cy.
  str ng model_vers on = 2;

  // Opt onal  dent f er for t  request.  f spec f ed w ll be
  // returned  n t  response.
  str ng  d = 3;

  // Opt onal  nference para ters.
  map<str ng,  nferPara ter> para ters = 4;

  // T   nput tensors for t   nference.
  repeated  nfer nputTensor  nputs = 5;

  // T  requested output tensors for t   nference. Opt onal,  f not
  // spec f ed all outputs produced by t  model w ll be returned.
  repeated  nferRequestedOutputTensor outputs = 6;

  // T  data conta ned  n an  nput tensor can be represented  n "raw"
  // bytes form or  n t  repeated type that matc s t  tensor's data
  // type. To use t  raw representat on 'raw_ nput_contents' must be
  //  n  al zed w h data for each tensor  n t  sa  order as
  // ' nputs'. For each tensor, t  s ze of t  content must match
  // what  s expected by t  tensor's shape and data type. T  raw
  // data must be t  flattened, one-d  ns onal, row-major order of
  // t  tensor ele nts w hout any str de or padd ng bet en t 
  // ele nts. Note that t  FP16 and BF16 data types must be represented as
  // raw content as t re  s no spec f c data type for a 16-b  float type.
  //
  //  f t  f eld  s spec f ed t n  nfer nputTensor::contents must
  // not be spec f ed for any  nput tensor.
  repeated bytes raw_ nput_contents = 7;
}

 ssage Model nferResponse
{
  // An output tensor returned for an  nference request.
   ssage  nferOutputTensor
  {
    // T  tensor na .
    str ng na  = 1;

    // T  tensor data type.
    str ng datatype = 2;

    // T  tensor shape.
    repeated  nt64 shape = 3;

    // Opt onal output tensor para ters.
    map<str ng,  nferPara ter> para ters = 4;

    // T  tensor contents us ng a data-type format. T  f eld must
    // not be spec f ed  f "raw" tensor contents are be ng used for
    // t   nference response.
     nferTensorContents contents = 5;
  }

  // T  na  of t  model used for  nference.
  str ng model_na  = 1;

  // T  vers on of t  model used for  nference.
  str ng model_vers on = 2;

  // T   d of t   nference request  f one was spec f ed.
  str ng  d = 3;

  // Opt onal  nference response para ters.
  map<str ng,  nferPara ter> para ters = 4;

  // T  output tensors hold ng  nference results.
  repeated  nferOutputTensor outputs = 5;

  // T  data conta ned  n an output tensor can be represented  n
  // "raw" bytes form or  n t  repeated type that matc s t 
  // tensor's data type. To use t  raw representat on 'raw_output_contents'
  // must be  n  al zed w h data for each tensor  n t  sa  order as
  // 'outputs'. For each tensor, t  s ze of t  content must match
  // what  s expected by t  tensor's shape and data type. T  raw
  // data must be t  flattened, one-d  ns onal, row-major order of
  // t  tensor ele nts w hout any str de or padd ng bet en t 
  // ele nts. Note that t  FP16 and BF16 data types must be represented as
  // raw content as t re  s no spec f c data type for a 16-b  float type.
  //
  //  f t  f eld  s spec f ed t n  nferOutputTensor::contents must
  // not be spec f ed for any output tensor.
  repeated bytes raw_output_contents = 6;
}

// An  nference para ter value. T  Para ters  ssage descr bes a 
// “na ”/”value” pa r, w re t  “na ”  s t  na  of t  para ter
// and t  “value”  s a boolean,  nteger, or str ng correspond ng to 
// t  para ter.
 ssage  nferPara ter
{
  // T  para ter value can be a str ng, an  nt64, a boolean
  // or a  ssage spec f c to a predef ned para ter.
  oneof para ter_cho ce
  {
    // A boolean para ter value.
    bool bool_param = 1;

    // An  nt64 para ter value.
     nt64  nt64_param = 2;

    // A str ng para ter value.
    str ng str ng_param = 3;
  }
}

// T  data conta ned  n a tensor represented by t  repeated type
// that matc s t  tensor's data type. Protobuf oneof  s not used
// because oneofs cannot conta n repeated f elds.
 ssage  nferTensorContents
{
  // Representat on for BOOL data type. T  s ze must match what  s
  // expected by t  tensor's shape. T  contents must be t  flattened,
  // one-d  ns onal, row-major order of t  tensor ele nts.
  repeated bool bool_contents = 1;

  // Representat on for  NT8,  NT16, and  NT32 data types. T  s ze
  // must match what  s expected by t  tensor's shape. T  contents
  // must be t  flattened, one-d  ns onal, row-major order of t 
  // tensor ele nts.
  repeated  nt32  nt_contents = 2;

  // Representat on for  NT64 data types. T  s ze must match what
  //  s expected by t  tensor's shape. T  contents must be t 
  // flattened, one-d  ns onal, row-major order of t  tensor ele nts.
  repeated  nt64  nt64_contents = 3;

  // Representat on for U NT8, U NT16, and U NT32 data types. T  s ze
  // must match what  s expected by t  tensor's shape. T  contents
  // must be t  flattened, one-d  ns onal, row-major order of t 
  // tensor ele nts.
  repeated u nt32 u nt_contents = 4;

  // Representat on for U NT64 data types. T  s ze must match what
  //  s expected by t  tensor's shape. T  contents must be t 
  // flattened, one-d  ns onal, row-major order of t  tensor ele nts.
  repeated u nt64 u nt64_contents = 5;

  // Representat on for FP32 data type. T  s ze must match what  s
  // expected by t  tensor's shape. T  contents must be t  flattened,
  // one-d  ns onal, row-major order of t  tensor ele nts.
  repeated float fp32_contents = 6;

  // Representat on for FP64 data type. T  s ze must match what  s
  // expected by t  tensor's shape. T  contents must be t  flattened,
  // one-d  ns onal, row-major order of t  tensor ele nts.
  repeated double fp64_contents = 7;

  // Representat on for BYTES data type. T  s ze must match what  s
  // expected by t  tensor's shape. T  contents must be t  flattened,
  // one-d  ns onal, row-major order of t  tensor ele nts.
  repeated bytes bytes_contents = 8;
}
