syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/tensor.proto";
 mport "tensorflow/core/fra work/tensor_shape.proto";
 mport "tensorflow/core/fra work/types.proto";

opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// `StructuredValue` represents a dynam cally typed value represent ng var ous
// data structures that are  nsp red by Python data structures typ cally used  n
// TensorFlow funct ons as  nputs and outputs.
//
// For example w n sav ng a Layer t re may be a `tra n ng` argu nt.  f t 
// user passes a boolean True/False, that sw c s bet en two concrete
// TensorFlow funct ons.  n order to sw ch bet en t m  n t  sa  way after
// load ng t  SavedModel,   need to represent "True" and "False".
//
// A more advanced example m ght be a funct on wh ch takes a l st of
// d ct onar es mapp ng from str ngs to Tensors.  n order to map from
// user-spec f ed argu nts `[{"a": tf.constant(1.)}, {"q": tf.constant(3.)}]`
// after load to t  r ght saved TensorFlow funct on,   need to represent t 
// nested structure and t  str ngs, record ng that   have a trace for anyth ng
// match ng `[{"a": tf.TensorSpec(None, tf.float32)}, {"q": tf.TensorSpec([],
// tf.float64)}]` as an example.
//
// L kew se funct ons may return nested structures of Tensors, for example
// return ng a d ct onary mapp ng from str ngs to Tensors.  n order for t 
// loaded funct on to return t  sa  structure   need to ser al ze  .
//
// T   s an ergonom c a d for work ng w h loaded SavedModels, not a prom se
// to ser al ze all poss ble funct on s gnatures. For example   do not expect
// to p ckle gener c Python objects, and  deally  'd stay language-agnost c.
 ssage StructuredValue {
  // T  k nd of value.
  oneof k nd {
    // Represents None.
    NoneValue none_value = 1;

    // Represents a double-prec s on float ng-po nt value (a Python `float`).
    double float64_value = 11;
    // Represents a s gned  nteger value, l m ed to 64 b s.
    // Larger values from Python's arb rary-prec s on  ntegers are unsupported.
    s nt64  nt64_value = 12;
    // Represents a str ng of Un code characters stored  n a Python `str`.
    //  n Python 3, t   s exactly what type `str`  s.
    //  n Python 2, t   s t  UTF-8 encod ng of t  characters.
    // For str ngs w h ASC   characters only (as often used  n TensorFlow code)
    // t re  s effect vely no d fference bet en t  language vers ons.
    // T  obsolescent `un code` type of Python 2  s not supported  re.
    str ng str ng_value = 13;
    // Represents a boolean value.
    bool bool_value = 14;

    // Represents a TensorShape.
    tensorflow.TensorShapeProto tensor_shape_value = 31;
    // Represents an enum value for dtype.
    tensorflow.DataType tensor_dtype_value = 32;
    // Represents a value for tf.TensorSpec.
    TensorSpecProto tensor_spec_value = 33;
    // Represents a value for tf.TypeSpec.
    TypeSpecProto type_spec_value = 34;
    // Represents a value for tf.BoundedTensorSpec.
    BoundedTensorSpecProto bounded_tensor_spec_value = 35;

    // Represents a l st of `Value`.
    L stValue l st_value = 51;
    // Represents a tuple of `Value`.
    TupleValue tuple_value = 52;
    // Represents a d ct `Value`.
    D ctValue d ct_value = 53;
    // Represents Python's na dtuple.
    Na dTupleValue na d_tuple_value = 54;
  }
}

// Represents None.
 ssage NoneValue {}

// Represents a Python l st.
 ssage L stValue {
  repeated StructuredValue values = 1;
}

// Represents a Python tuple.
 ssage TupleValue {
  repeated StructuredValue values = 1;
}

// Represents a Python d ct keyed by `str`.
// T  com nt on Un code from Value.str ng_value appl es analogously.
 ssage D ctValue {
  map<str ng, StructuredValue> f elds = 1;
}

// Represents a (key, value) pa r.
 ssage Pa rValue {
  str ng key = 1;
  StructuredValue value = 2;
}

// Represents Python's na dtuple.
 ssage Na dTupleValue {
  str ng na  = 1;
  repeated Pa rValue values = 2;
}

// A protobuf to represent tf.TensorSpec.
 ssage TensorSpecProto {
  str ng na  = 1;
  tensorflow.TensorShapeProto shape = 2;
  tensorflow.DataType dtype = 3;
}

// A protobuf to represent tf.BoundedTensorSpec.
 ssage BoundedTensorSpecProto {
  str ng na  = 1;
  tensorflow.TensorShapeProto shape = 2;
  tensorflow.DataType dtype = 3;
  tensorflow.TensorProto m n mum = 4;
  tensorflow.TensorProto max mum = 5;
}

// Represents a tf.TypeSpec
 ssage TypeSpecProto {
  enum TypeSpecClass {
    UNKNOWN = 0;
    SPARSE_TENSOR_SPEC = 1;   // tf.SparseTensorSpec
     NDEXED_SL CES_SPEC = 2;  // tf. ndexedSl cesSpec
    RAGGED_TENSOR_SPEC = 3;   // tf.RaggedTensorSpec
    TENSOR_ARRAY_SPEC = 4;    // tf.TensorArraySpec
    DATA_DATASET_SPEC = 5;    // tf.data.DatasetSpec
    DATA_ TERATOR_SPEC = 6;   //  eratorSpec from data/ops/ erator_ops.py
    OPT ONAL_SPEC = 7;        // tf.Opt onalSpec
    PER_REPL CA_SPEC = 8;     // PerRepl caSpec from d str bute/values.py
    VAR ABLE_SPEC = 9;        // tf.Var ableSpec
    ROW_PART T ON_SPEC = 10;  // RowPart  onSpec from ragged/row_part  on.py
    reserved 11;
    REG STERED_TYPE_SPEC = 12;  // T  type reg stered as type_spec_class_na .
    EXTENS ON_TYPE_SPEC = 13;   // Subclasses of tf.Extens onType
  }
  TypeSpecClass type_spec_class = 1;

  // T  value returned by TypeSpec._ser al ze().
  StructuredValue type_state = 2;

  // T  na  of t  TypeSpec class.
  //  *  f type_spec_class == REG STERED_TYPE_SPEC, t  TypeSpec class  s
  //    t  one reg stered under t  na . For types reg stered outs de
  //    core TensorFlow by an add-on l brary, that l brary must be loaded
  //    before t  value can be deser al zed by nested_structure_coder.
  //  *  f type_spec_class spec f es a part cular TypeSpec class, t  f eld  s
  //    redundant w h t  type_spec_class enum, and  s only used for error
  //    report ng  n older b nar es that do not know t  tupe_spec_class enum.
  str ng type_spec_class_na  = 3;

  // T  number of flat tensor components requ red by t  TypeSpec.
   nt32 num_flat_components = 4;
}
