syntax = "proto3";

package tensorflow;

 mport "google/protobuf/any.proto";
 mport "tensorflow/core/fra work/tensor_shape.proto";
 mport "tensorflow/core/fra work/types.proto";
 mport "tensorflow/core/fra work/var able.proto";
 mport "tensorflow/core/fra work/vers ons.proto";
 mport "tensorflow/core/protobuf/struct.proto";
 mport "tensorflow/core/protobuf/trackable_object_graph.proto";

opt on cc_enable_arenas = true;
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// A SavedObjectGraph  s part of object-based SavedModels  n TF 2.0.  
// descr bes t  d rected graph of Python objects (or equ valent  n ot r
// languages) that make up a model, w h nodes[0] at t  root.

// SavedObjectGraph shares so  structure w h TrackableObjectGraph, but
// SavedObjectGraph belongs to t   taGraph and conta ns po nters to funct ons
// and type  nformat on, wh le TrackableObjectGraph l ves  n t  c ckpo nt
// and conta ns po nters only to var able values.

 ssage SavedObjectGraph {
  // Flattened l st of objects  n t  object graph.
  //
  // T  pos  on of t  object  n t  l st  nd cates  s  d.
  // Nodes[0]  s cons dered t  root node.
  repeated SavedObject nodes = 1;

  //  nformat on about captures and output structures  n concrete funct ons.
  // Referenced from SavedBareConcreteFunct on and SavedFunct on.
  map<str ng, SavedConcreteFunct on> concrete_funct ons = 2;
}

 ssage SavedObject {
  // Objects wh ch t  object depends on: na d edges  n t  dependency
  // graph.
  //
  // Note: All k nds of SavedObject may have ch ldren, except
  // "constant" and "captured_tensor".
  repeated TrackableObjectGraph.TrackableObject.ObjectReference ch ldren = 1;

  // Ordered l st of dependenc es that must be loaded before t  object.
  // SavedModel loads w h t  bottom-up approach, by f rst creat ng all objects
  // ( n t  order def ned by t  dependenc es), t n connect ng t  edges.
  repeated TrackableObjectGraph.TrackableObject.ObjectReference dependenc es =
      15;

  // Removed w n fork ng SavedObject from TrackableObjectGraph.
  reserved "attr butes";
  reserved 2;

  // Slot var ables owned by t  object. T  descr bes t  three-way
  // (opt m zer, var able, slot var able) relat onsh p; none of t  three
  // depend on t  ot rs d rectly.
  //
  // Note: currently only val d  f k nd == "user_object".
  repeated TrackableObjectGraph.TrackableObject.SlotVar ableReference
      slot_var ables = 3;

  oneof k nd {
    SavedUserObject user_object = 4;
    SavedAsset asset = 5;
    SavedFunct on funct on = 6;
    SavedVar able var able = 7;
    SavedBareConcreteFunct on bare_concrete_funct on = 8;
    SavedConstant constant = 9;
    SavedRes ce res ce = 10;
    CapturedTensor captured_tensor = 12;
  }

  // Stores t  funct ons used to save and restore t  object. At most one of
  // `saveable_objects` or `reg stered_saver`  s def ned for each SavedObject.
  // See t  com nt below for t  d fference bet en SaveableObject and
  // reg stered savers.
  map<str ng, SaveableObject> saveable_objects = 11;

  // T  f elds below are f lled w n t  user ser al zes a reg stered Trackable
  // class or an object w h a reg stered saver funct on.
  //
  // Reg stered classes may save add  onal  tadata and supersede t 
  // default load ng process w re nodes are recreated from t  proto.
  //  f t  reg stered class cannot be found, t n t  object w ll load as one
  // one of t  default trackable objects: Autotrackable (a class s m lar to
  // tf.Module), tf.funct on, or tf.Var able.
  //
  // Unl ke SaveableObjects, wh ch store t  funct ons for sav ng and restor ng
  // from tensors, reg stered savers allow Trackables to wr e c ckpo nt shards
  // d rectly (e.g. for performance or coord nat on reasons).
  // *All reg stered savers must be ava lable w n load ng t  SavedModel.*

  // T  na  of t  reg stered class of t  form "{package}.{class_na }".
  // T  f eld  s used to search for t  reg stered class at load ng t  .
  str ng reg stered_na  = 13;
  // T  user-generated proto stor ng  tadata for t  object, to be passed to
  // t  reg stered classes's _deser al ze_from_proto  thod w n t  object  s
  // loaded from t  SavedModel.
  google.protobuf.Any ser al zed_user_proto = 14;

  // Str ng na  of t  reg stered saver. At most one of `saveable_objects` or
  // `reg stered_saver`  s def ned for each SavedObject.
  str ng reg stered_saver = 16;
}

// A SavedUserObject  s an object ( n t  object-or ented language of t 
// TensorFlow program) of so  user- or fra work-def ned class ot r than
// those handled spec f cally by t  ot r k nds of SavedObjects.
//
// T  object cannot be evaluated as a tensor, and t refore cannot be bound
// to an  nput of a funct on.
 ssage SavedUserObject {
  // Corresponds to a reg strat on of t  type to use  n t  load ng program.
  str ng  dent f er = 1;
  // Vers on  nformat on from t  producer of t  SavedUserObject.
  Vers onDef vers on = 2;
  //  tadata for deser al z ng t  object.
  //
  // Deprecated! At t  t   of deprecat on, Keras was t  only user of t 
  // f eld, and  s sav ng and load ng code w ll be updated shortly.
  // Please save y  appl cat on-spec f c  tadata to a separate f le.
  str ng  tadata = 3 [deprecated = true];
}

// A SavedAsset po nts to an asset  n t   taGraph.
//
// W n bound to a funct on t  object evaluates to a tensor w h t  absolute
// f lena . Users should not depend on a part cular part of t  f lena  to
// rema n stable (e.g. basena  could be changed).
 ssage SavedAsset {
  //  ndex  nto ` taGraphDef.asset_f le_def[]` that descr bes t  Asset.
  //
  // Only t  f eld `AssetF leDef.f lena `  s used. Ot r f elds, such as
  // `AssetF leDef.tensor_ nfo`, MUST be  gnored.
   nt32 asset_f le_def_ ndex = 1;
}

// A funct on w h mult ple s gnatures, poss bly w h non-Tensor argu nts.
 ssage SavedFunct on {
  repeated str ng concrete_funct ons = 1;
  Funct onSpec funct on_spec = 2;
}

 ssage CapturedTensor {
  // Na  of captured tensor
  str ng na  = 1;

  // Na  of concrete funct on wh ch conta ns t  computed graph tensor.
  str ng concrete_funct on = 2;
}

// Stores low-level  nformat on about a concrete funct on. Referenced  n e  r
// a SavedFunct on or a SavedBareConcreteFunct on.
 ssage SavedConcreteFunct on {
  repeated  nt32 bound_ nputs = 2;

  //  nput  n canon cal zed form that was rece ved to create t  concrete
  // funct on.
  StructuredValue canon cal zed_ nput_s gnature = 3;
  // Output that was t  return value of t  funct on after replac ng all
  // Tensors w h TensorSpecs. T  can be an arb rary nested funct on and w ll
  // be used to reconstruct t  full structure from pure tensors.
  StructuredValue output_s gnature = 4;
}

 ssage SavedBareConcreteFunct on {
  //  dent f es a SavedConcreteFunct on.
  str ng concrete_funct on_na  = 1;

  // A sequence of un que str ngs, one per Tensor argu nt.
  repeated str ng argu nt_keywords = 2;
  // T  pref x of `argu nt_keywords` wh ch may be  dent f ed by pos  on.
   nt64 allo d_pos  onal_argu nts = 3;
  // T  spec of t  funct on that t  ConcreteFunct on  s traced from. T 
  // allows t  ConcreteFunct on to be called w h nest structure  nputs. T 
  // f eld may not be populated.  f t  f eld  s absent, t  concrete funct on
  // can only be called w h flat  nputs.
  // TODO(b/169361281): support call ng saved ConcreteFunct on w h structured
  //  nputs  n C++ SavedModel AP .
  Funct onSpec funct on_spec = 4;
}

 ssage SavedConstant {
  // An Operat on na  for a ConstantOp  n t  SavedObjectGraph's  taGraph.
  str ng operat on = 1;
}

// Represents a Var able that  s  n  al zed by load ng t  contents from t 
// c ckpo nt.
 ssage SavedVar able {
  DataType dtype = 1;
  TensorShapeProto shape = 2;
  bool tra nable = 3;
  Var ableSynchron zat on synchron zat on = 4;
  Var ableAggregat on aggregat on = 5;
  str ng na  = 6;
  str ng dev ce = 7;
  // L st of component var ables for a d str buted var able.
  //
  // W n t  f eld  s non-empty, t  SavedVar able w ll be assu d
  // to be a d str buted var able def ned by t  components l sted  re.
  //
  // T   s only supported by exper  ntal loaders at t  mo nt.
  repeated SavedVar able exper  ntal_d str buted_var able_components = 8;
}

// Represents `Funct onSpec` used  n `Funct on`. T  represents a
// funct on that has been wrapped as a TensorFlow `Funct on`.
 ssage Funct onSpec {
  // Full arg spec from  nspect.getfullargspec().
  StructuredValue fullargspec = 1;
  // W t r t  represents a class  thod.
  bool  s_ thod = 2;
  // T   nput s gnature,  f spec f ed.
  StructuredValue  nput_s gnature = 5;

  // W t r t  funct on should be comp led by XLA.
  //
  // T  publ c  nterface to `tf.funct on` uses an opt onal boolean to
  // represent three d st nct states for t  f eld.  Unfortunately, proto3
  // removes t  ab l y to expl c ly c ck for t  presence or absence of a
  // f eld, so    nstead map to an enum.
  //
  // See `tf.funct on` for deta ls.
  enum J Comp le {
    DEFAULT = 0;
    ON = 1;
    OFF = 2;
  }
  J Comp le j _comp le = 6;

  reserved 3, 4;
}

// A SavedRes ce represents a TF object that holds state dur ng  s l fet  .
// An object of t  type can have a reference to a:
// create_res ce() and an  n  al ze() funct on.
 ssage SavedRes ce {
  // A dev ce spec f cat on  nd cat ng a requ red place nt for t  res ce
  // creat on funct on, e.g. "CPU". An empty str ng allows t  user to select a
  // dev ce.
  str ng dev ce = 1;
}

 ssage SaveableObject {
  // Node  ds of concrete funct ons for sav ng and load ng from a c ckpo nt.
  // T se funct ons save and restore d rectly from tensors.
   nt32 save_funct on = 2;
   nt32 restore_funct on = 3;
}
