syntax = "proto3";

package tensorflow.eager;

 mport "tensorflow/core/fra work/attr_value.proto";
 mport "tensorflow/core/fra work/dev ce_attr butes.proto";
 mport "tensorflow/core/fra work/funct on.proto";
 mport "tensorflow/core/fra work/tensor.proto";
 mport "tensorflow/core/fra work/tensor_shape.proto";
 mport "tensorflow/core/fra work/vers ons.proto";
 mport "tensorflow/core/protobuf/remote_tensor_handle.proto";
 mport "tensorflow/core/protobuf/tensorflow_server.proto";

opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// A proto representat on of an eager operat on.
 ssage Operat on {
  // A un que  dent f er for t  operat on. Set by t  cl ent so that t  cl ent
  // can un quely  dent fy t  outputs of t  sc duled operat on.
  //
  //  n t   n  al  mple ntat on, send ng dupl cate  Ds has undef ned
  // behav  , but add  onal constra nts may be placed upon t   n t 
  // future.
   nt64  d = 1;
  str ng na  = 2;

   ssage  nput {
    oneof  em {
      RemoteTensorHandle remote_handle = 1;
      TensorProto tensor = 2;
    }
  }

  repeated  nput op_ nputs = 10;

  // Control Operat on  Ds that w ll be respected w n ops are re-ordered by
  // async execut on.  f async execut on (+ op re-order ng)  s not enabled, t 
  // should have no effect.
  repeated  nt64 control_op_ ds = 4;
  map<str ng, AttrValue> attrs = 5;
  str ng dev ce = 6;

  //  nd cates w t r t  op  s a component of a mult -dev ce funct on.
  bool  s_component_funct on = 7;
  // Set w n  s_component_funct on  s true.  's  n  ally generated
  // w n   create an Funct onL braryRunt  ::Opt ons (negat ve value) and used
  // to create Rendezvous for funct on execut on. All components of a
  // mult -dev ce funct on should use t  sa  step  d to make sure that t y
  // can commun cate through Send/Recv ops.
   nt64 func_step_ d = 8;
  //  nd cates w t r t  op  s a funct on.
  bool  s_funct on = 9;

  reserved 3;
}

 ssage Queue em {
  // T  remote executor should be able to handle e  r execut ng ops d rectly,
  // or releas ng any unused tensor handles, s nce t  tensor l fet    s
  // ma nta ned by t  cl ent.
  oneof  em {
    RemoteTensorHandle handle_to_decref = 1;
    Operat on operat on = 2;
    SendTensorOp send_tensor = 3;
    // Takes a Funct onDef and makes   enqueable on t  remote worker.
    Reg sterFunct onOp reg ster_funct on = 4;
    CleanupFunct onOp cleanup_funct on = 5;
    // A remote executor  s created to execute ops/funct ons asynchronously
    // enqueued  n stream ng call. Request w h t   em type wa s for pend ng
    // nodes to f n sh on t  remote executor and report status.
    SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
    SendPackedHandleOp send_packed_handle = 7;
  }
}

 ssage QueueResponse {
  // `shape` and `tensor` cannot be set  n t  sa  response.
  // Shapes of output tensors for creat ng remote TensorHandles.
  repeated TensorShapeProto shape = 1;
  // Opt onal.  f set, represents t  output dev ces of a funct on.
  repeated str ng dev ce = 3;

  // Output tensors of a remote funct on. Set w n Operat on. d  s  nval d.
  repeated TensorProto tensor = 2;
}

 ssage CreateContextRequest {
  //  dent f es t  full cluster, and t  part cular worker's pos  on w h n.
  ServerDef server_def = 1;

  // W t r t  ops on t  worker should be executed synchronously or
  // asynchronously. By default, ops are executed synchronously.
  bool async = 2;

  // Number of seconds to keep t  context al ve.  f more than keep_al ve_secs
  // has passed s nce a part cular context has been commun cated w h,   w ll
  // be garbage collected.
   nt64 keep_al ve_secs = 3;

  // T   s t  vers on for all t  ops that w ll be enqueued by t  cl ent.
  Vers onDef vers on_def = 4;

  // Dev ce attr butes  n t  cluster
  repeated Dev ceAttr butes cluster_dev ce_attr butes = 6;

  // T   D of t  created context. T   s usually a randomly generated number,
  // that w ll be used to  dent fy t  context  n future requests to t 
  // serv ce. Contexts are not pers sted through server restarts.
  // T   D w ll be used for all future commun cat ons as  ll.    s essent al
  // that both ends use t   D for select ng a rendezvous to get everyth ng to
  // match.
  f xed64 context_ d = 7;

  // T  v ew  D of t  context.
  f xed64 context_v ew_ d = 8;

  // For a mult  dev ce funct on,  f false, eagerly copy all remote  nputs to
  // t  default funct on dev ce;  f true, laz ly copy remote  nputs to t  r
  // target dev ces after funct on  nstant at on to avo d redundant cop es.
  bool lazy_copy_remote_funct on_ nputs = 9;

  reserved 5;
}

 ssage CreateContextResponse {
  // L st of dev ces that are locally access ble to t  worker.
  repeated Dev ceAttr butes dev ce_attr butes = 2;

  reserved 1;
}

 ssage UpdateContextRequest {
  //  dent f es t  full cluster, and t  part cular worker's pos  on w h n.
  ServerDef server_def = 1;

  // Dev ce attr butes  n t  cluster.
  //  f t  f eld  s empty,    nd cates that t   s a s mple update request
  // that only  ncre nts t  cluster v ew  D and does not requ re changes to
  // t  workers   connects to.
  repeated Dev ceAttr butes cluster_dev ce_attr butes = 2;

  // T   D of t  context to be updated. A context w h t  spec f ed  D must
  // already ex st on t  recep ent server of t  request.
  f xed64 context_ d = 3;

  // T  v ew  D of t  context, wh ch should be cont guously  ncre nted w n
  // updat ng t  sa  context.
  f xed64 context_v ew_ d = 4;
}

 ssage UpdateContextResponse {
  // L st of dev ces that are locally access ble to t  worker.
  repeated Dev ceAttr butes dev ce_attr butes = 1;
}

 ssage EnqueueRequest {
  f xed64 context_ d = 1;

  repeated Queue em queue = 3;
}

 ssage EnqueueResponse {
  // A s ngle operat on response for every  em  n t  request.
  repeated QueueResponse queue_response = 1;
}

 ssage Wa QueueDoneRequest {
  f xed64 context_ d = 1;

  //  ds to wa  on.  f empty, wa  on everyth ng currently pend ng.
  repeated  nt64 op_ d = 2;
}

 ssage Wa QueueDoneResponse {
  // TODO(nareshmod ): Cons der add ng NodeExecStats  re to be able to
  // propagate so  stats.
}

 ssage RunComponentFunct onRequest {
  f xed64 context_ d = 1;

  Operat on operat on = 2;

  // T  output  nd ces of  s parent funct on.
  repeated  nt32 output_num = 3;
}

 ssage RunComponentFunct onResponse {
  repeated TensorShapeProto shape = 1;

  repeated TensorProto tensor = 2;
}

 ssage KeepAl veRequest {
  f xed64 context_ d = 1;
}

 ssage KeepAl veResponse {
  //  f t  requested context_ d  s on t  remote host, set t  context v ew  D.
  f xed64 context_v ew_ d = 1;
}

 ssage CloseContextRequest {
  f xed64 context_ d = 1;
  f xed64 context_v ew_ d = 2;
}

 ssage CloseContextResponse {}

 ssage Reg sterFunct onOp {
  Funct onDef funct on_def = 1;

  //  f true,    ans that funct on_def  s produced by graph part  on dur ng
  // mult -dev ce funct on  nstant at on.
  bool  s_component_funct on = 2;

  // All necessary Funct onDefs and Grad entDefs to expand `funct on_def`.
  // W n  s_component_funct on  s true, `funct on_def` could be a nested
  // funct on, s nce so  nodes  n  s parent's funct on body could be
  // replaced w h a new funct on by t  graph opt m zat on passes. No need to
  // add Funct onDefs  re to t  funct on cac   n EagerContext s nce t y
  // won't be executed as KernelAndDev ces.
  Funct onDefL brary l brary = 3;
}

// Cleanup t  step state of a mult -dev ce funct on (e.g. tensors buffered by
// a `Send` op but not p cked up by  s correspond ng `Recv` op).
 ssage CleanupFunct onOp {
   nt64 step_ d = 1;
}

 ssage SyncRemoteExecutorForStream {}

 ssage SendTensorOp {
  // All remote tensors are  dent f ed by <Op  D, Output num>. To m m c t 
  // s uat on w n d rectly send ng tensors,    nclude an "art f c al" op  D
  // (wh ch would have corresponded to t  _Recv op w n not us ng SendTensor).
   nt64 op_ d = 1;
  // T   ndex w h n t  repeated f eld  s t  output number that w ll  lp
  // un quely  dent fy (along w h t  above op_ d) t  part cular tensor.
  repeated TensorProto tensors = 2;

  // T  dev ce on wh ch t  tensors should be res dent.
  str ng dev ce_na  = 3;
}

// Send a packed TensorHandle to a remote worker.
 ssage SendPackedHandleOp {
  // Op  d of t  remote packed TensorHandle.
   nt64 op_ d = 1;

   ssage LocalTensorHandle {
    TensorProto tensor = 1;
    // Dev ce w re t  tensor  s produced.
    str ng dev ce = 2;
  }

   ssage Handle {
    oneof  em {
      LocalTensorHandle local_handle = 1;
      RemoteTensorHandle remote_handle = 2;
    }
  }

  repeated Handle handles = 2;

  str ng dev ce_na  = 3;
}

////////////////////////////////////////////////////////////////////////////////
//
// Eager Serv ce def nes a TensorFlow serv ce that executes operat ons eagerly
// on a set of local dev ces, on behalf of a remote Eager executor.
//
// T  serv ce  mpl w ll keep track of t  var ous cl ents and dev ces   has
// access to and allows t  cl ent to enqueue ops on any dev ces that    s able
// to access and sc dule data transfers from/to any of t  peers.
//
// A cl ent can generate mult ple contexts to be able to  ndependently execute
// operat ons, but cannot share data bet en t  two contexts.
//
// NOTE: Even though contexts generated by cl ents should be  ndependent, t 
// lo r level tensorflow execut on eng ne  s not, so t y m ght share so  data
// (e.g. a Dev ce's Res ceMgr).
//
////////////////////////////////////////////////////////////////////////////////
serv ce EagerServ ce {
  // T   n  al zes t  worker,  nform ng   about t  ot r workers  n t 
  // cluster and exchang ng aut nt cat on tokens wh ch w ll be used  n all
  // ot r RPCs to detect w t r t  worker has restarted.
  rpc CreateContext(CreateContextRequest) returns (CreateContextResponse);

  // T  updates t  eager context on an ex st ng worker w n updat ng t  set
  // of servers  n a d str buted eager cluster.
  rpc UpdateContext(UpdateContextRequest) returns (UpdateContextResponse);

  // T  takes a l st of Execute and DeleteTensorHandle operat ons and enqueues
  // ( n async mode) or executes ( n sync mode) t m on t  remote server.
  // All outputs of ops wh ch  re not expl c ly deleted w h
  // DeleteTensorHandle entr es w ll be assu d to be al ve and are usable by
  // future calls to Enqueue.
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);

  // A stream ng vers on of Enqueue.
  // Current server  mple ntat on sends one response per rece ved request.
  // T  benef  for us ng a stream ng vers on  s that subsequent requests
  // can be sent w hout wa  ng for a response to t  prev ous request. T 
  // synchron zat on  s requ red  n t  regular Enqueue call because gRPC does
  // not guarantee to preserve request order.
  rpc Stream ngEnqueue(stream EnqueueRequest) returns (stream EnqueueResponse);

  // Takes a set of op  Ds and wa s unt l those ops are done. Returns any error
  //  n t  stream so far.
  rpc Wa QueueDone(Wa QueueDoneRequest) returns (Wa QueueDoneResponse);

  // T  takes an Eager operat on and executes    n async mode on t  remote
  // server. D fferent from EnqueueRequest, ops/funct ons sent through t 
  // type of requests are allo d to execute  n parallel and no order ng  s
  // preserved by RPC stream or executor.
  // T  request type should only be used for execut ng component funct ons.
  // Order ng of component funct ons should be enforced by t  r correspond ng
  // ma n funct ons. T  runt   ensures t  follow ng  nvar ents for component
  // funct ons (CFs) and t  r ma n funct ons (MFs):
  // (1) MF1 -> MF2 ==> CF1 -> CF2 ("->"  nd cates order of execut on);
  // (2) MF1 || MF2 ==> CF1 || CF2 ("||"  nd cates poss ble parallel execut on);
  // (3) For CF1 and CF2 that co  from t  sa  MF, CF1 || CF2
  // For execut ng ops/ma n funct ons, use Enqueue or Stream ngEnqueue  nstead
  // for correct order ng.
  rpc RunComponentFunct on(RunComponentFunct onRequest)
      returns (RunComponentFunct onResponse);

  // Contexts are always created w h a deadl ne and no RPCs w h n a deadl ne
  // w ll tr gger a context garbage collect on. KeepAl ve calls can be used to
  // delay t .   can also be used to val date t  ex stence of a context  D
  // on remote eager worker.  f t  context  s on remote worker, return t  sa 
  //  D and t  current context v ew  D. T   s useful for c ck ng  f t 
  // remote worker (potent ally w h t  sa  task na  and hostna  / port)  s
  // replaced w h a new process.
  rpc KeepAl ve(KeepAl veRequest) returns (KeepAl veResponse);

  // Closes t  context. No calls to ot r  thods us ng t  ex st ng context  D
  // are val d after t .
  rpc CloseContext(CloseContextRequest) returns (CloseContextResponse);
}
