syntax = "proto3";

package tensorflow.data.exper  ntal;

 mport "tensorflow/core/protobuf/data_serv ce.proto";

opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// Conf gurat on for a tf.data serv ce D spatchServer.
// Next  d: 10
 ssage D spatc rConf g {
  // T  port for t  d spatc r to b nd to. A value of 0  nd cates that t 
  // d spatc r may b nd to any ava lable port.
   nt64 port = 1;
  // T  protocol for t  d spatc r to use w n connect ng to workers.
  str ng protocol = 2;
  // A work d rectory to use for stor ng d spatc r state, and for recover ng
  // dur ng restarts. T  empty str ng  nd cates not to use any work d rectory.
  str ng work_d r = 3;
  // W t r to run  n fault tolerant mode, w re d spatc r state  s saved
  // across restarts. Requ res that `work_d r`  s nonempty.
  bool fault_tolerant_mode = 4;
  // (Opt onal.)  f t  job uses auto-shard ng,   needs to spec fy a f xed l st
  // of worker addresses that w ll reg ster w h t  d spatc r. T  worker
  // addresses should be  n t  format "host" or "host:port", w re "port"  s an
  //  nteger, na d port, or %port% to match any port.
  repeated str ng worker_addresses = 7;
  // (Opt onal.) tf.data serv ce deploy nt mode. Supported values are "REMOTE",
  // "COLOCATED", and "HYBR D".  f unspec f ed,    s assu d to be "REMOTE".
  Deploy ntMode deploy nt_mode = 9;
  // How often t  d spatc r should scan through to delete old and unused
  // jobs. A value of 0  nd cates that t  dec s on should be left up to t 
  // runt  .
   nt64 job_gc_c ck_ nterval_ms = 5;
  // How long a job needs to be unused before   beco s a cand date for garbage
  // collect on. A value of -1  nd cates that jobs should never be garbage
  // collected. A value of 0  nd cates that t  dec s on should be left up to
  // t  runt  .
   nt64 job_gc_t  out_ms = 6;
  // How long to wa  before garbage-collect ng a cl ent that hasn't
  //  artbeated to t  d spatc r. A value of 0  nd cates that t  t  out
  // should be left to t  runt  .
   nt64 cl ent_t  out_ms = 8;
}

// Conf gurat on for a tf.data serv ce WorkerServer.
// Next  d: 11
 ssage WorkerConf g {
  // T  port for t  worker to b nd to. A value of 0  nd cates that t 
  // worker may b nd to any ava lable port.
   nt64 port = 1;
  // T  protocol for t  worker to use w n connect ng to t  d spatc r.
  str ng protocol = 2;
  // T  address of t  d spatc r to reg ster w h.
  str ng d spatc r_address = 3;
  // T  address of t  worker server. T  substr ng "%port%",  f spec f ed,
  // w ll be replaced w h t  worker's bound port. T   s useful w n t  port
  //  s set to `0`.
  str ng worker_address = 4;
  // Tags attac d to t  worker. T  allows read ng from selected workers.
  // For example, by apply ng a "COLOCATED" tag, tf.data serv ce  s able to read
  // from t  local tf.data worker  f one ex sts, t n from off-TF-host workers,
  // to avo d cross-TF-host reads.
  repeated str ng worker_tags = 10;
  // How often t  worker should  artbeat to t  master. A value of 0  nd cates
  // that t  dec s on should be left up to t  runt  .
   nt64  artbeat_ nterval_ms = 5;
  // How long to retry requests to t  d spatc r before g v ng up and report ng
  // an error. A value of 0  nd cates that t  dec s on should be left up to t 
  // runt  .
   nt64 d spatc r_t  out_ms = 6;
  // T  protocol for t  worker to use w n transferr ng data to cl ents.
  str ng data_transfer_protocol = 7;
  // T  data transfer address of t  worker server. T  substr ng "%port%",  f
  // spec f ed, w ll be replaced w h t  worker's bound port. T   s useful
  // w n t  port  s set to `0`.
  str ng data_transfer_address = 8;
  // W n shutt ng down a worker, how long to wa  for t  gRPC server to
  // process t  f nal requests. T   s used to ach eve clean shutdown  n un 
  // tests.
   nt64 shutdown_qu et_per od_ms = 9;
}
