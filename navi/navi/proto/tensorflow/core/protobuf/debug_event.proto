syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/tensor.proto";
 mport "tensorflow/core/protobuf/graph_debug_ nfo.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "DebugEventProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.ut l";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// Ava lable modes for extract ng debugg ng  nformat on from a Tensor.
// TODO(ca s): Docu nt t  deta led column na s and semant cs  n a separate
// markdown f le once t   mple ntat on settles.
enum TensorDebugMode {
  UNSPEC F ED = 0;

  // Only records what tensors are computed, eagerly or  n graphs.
  // No  nformat on regard ng t  value of t  tensor  s ava lable.
  NO_TENSOR = 1;

  // A m n mal st  alth summary for float-type tensors.
  // Conta ns  nformat on only about t  presence/absence of patholog cal
  // values  nclud ng  nf n y and NaN.
  // Appl cable only to float dtypes.
  CURT_HEALTH = 2;

  // A conc se  alth summary for float-type tensors.
  // Conta ns more  nformat on that CURT_HEALTH.
  //  nf n y and NaN are treated d fferently.
  // Appl cable only to float and  nteger dtypes.
  CONC SE_HEALTH = 3;

  // A deta led  alth summary.
  // Conta ns furt r deta led  nformat on than `CONC SE_HEALTH`.
  //  nformat on about dev ce, dtype and shape are  ncluded.
  // Counts for var ous types of values ( nf n y, NaN, negat ve, zero,
  // pos  ve) are  ncluded.
  // Appl cable to float,  nteger and boolean dtypes.
  FULL_HEALTH = 4;

  // Prov des full runt   shape  nformat on, up to a max mum rank, beyond
  // wh ch t  d  ns on s zes are truncated.
  SHAPE = 5;

  // Full nu r c summary.
  //  nclud ng dev ce, dtype, shape, counts of var ous types of values
  // ( nf n y, NaN, negat ve, zero, pos  ve), and summary stat st cs
  // (m n mum, max mum,  an and var ance).
  // Appl cable to float,  nteger and boolean dtypes.
  FULL_NUMER CS = 6;

  // Full tensor value.
  FULL_TENSOR = 7;

  // Reduce t  ele nts of a tensor to a rank-1 tensor of shape [3],  n wh ch
  // - t  1st ele nt  s - nf  f any ele nt of t  tensor  s - nf,
  //   or zero ot rw se.
  // - t  2nd ele nt  s + nf  f any ele nt of t  tensor  s + nf,
  //   or zero ot rw se.
  // - t  3rd ele nt  s nan  f any ele nt of t  tensor  s nan, or zero
  //   ot rw se.
  REDUCE_ NF_NAN_THREE_SLOTS = 8;
}

// An Event related to t  debugg ng of a TensorFlow program.
 ssage DebugEvent {
  // T  stamp  n seconds (w h m crosecond prec s on).
  double wall_t   = 1;

  // Step of tra n ng ( f ava lable).
   nt64 step = 2;

  oneof what {
    //  tadata related to t  debugg ng data.
    Debug tadata debug_ tadata = 3;

    // T  content of a s ce f le.
    S ceF le s ce_f le = 4;

    // A stack fra  (f lena , l ne number and column number, funct on na  and
    // code str ng) w h  D.
    StackFra W h d stack_fra _w h_ d = 6;

    // T  creat on of an op w h n a graph (e.g., a FuncGraph comp led from
    // a Python funct on).
    GraphOpCreat on graph_op_creat on = 7;

    //  nformat on about a debugged graph.
    DebuggedGraph debugged_graph = 8;

    // Execut on of an op or a Graph (e.g., a tf.funct on).
    Execut on execut on = 9;

    // A graph execut on trace: Conta ns  nformat on about t   nter d ate
    // tensors computed dur ng t  graph execut on.
    GraphExecut onTrace graph_execut on_trace = 10;

    // T   D of t  graph ( .e., FuncGraph) executed  re: appl cable only
    // to t  execut on of a FuncGraph.
    str ng graph_ d = 11;

    // A dev ce on wh ch debugger- nstru nted ops and/or tensors res de.
    DebuggedDev ce debugged_dev ce = 12;
  }
}

//  tadata about t  debugger and t  debugged TensorFlow program.
 ssage Debug tadata {
  // Vers on of TensorFlow.
  str ng tensorflow_vers on = 1;

  // Vers on of t  DebugEvent f le format.
  // Has a format of "debug.Event:<number>", e.g., "debug.Event:1".
  str ng f le_vers on = 2;

  // A un que  D for t  current run of tfdbg.
  // A run of tfdbg  s def ned as a TensorFlow job  nstru nted by tfdbg.
  // Mult ple hosts  n a d str buted TensorFlow job  nstru nted by tfdbg
  // have t  sa   D.
  str ng tfdbg_run_ d = 3;
}

// Content of a s ce f le  nvolved  n t  execut on of t  debugged TensorFlow
// program.
 ssage S ceF le {
  // Path to t  f le.
  str ng f le_path = 1;

  // Na  of t  host on wh ch t  f le  s located.
  str ng host_na  = 2;

  // L ne-by-l ne content of t  f le.
  repeated str ng l nes = 3;
}

// A stack fra  w h  D.
 ssage StackFra W h d {
  // A un que  D for t  stack fra : A UU D-l ke str ng.
  str ng  d = 1;

  // Stack fra ,  .e., a fra  of a stack trace, conta n ng  nformat on
  // regard ng t  f le na , l ne number, funct on na , code content
  // of t  l ne, and column number ( f ava lable).
  GraphDebug nfo.F leL neCol f le_l ne_col = 2;
}

// Code locat on  nformat on: A stack trace w h host-na   nformat on.
//  nstead of encod ng t  deta led stack trace, t  proto refers to  Ds of
// stack fra s stored as `StackFra W h d` protos.
 ssage CodeLocat on {
  // Host na  on wh ch t  s ce f les are located.
  str ng host_na  = 1;

  //  D to a stack fra , each of wh ch  s po nted to
  // by a un que  D. T  order ng of t  fra s  s cons stent w h Python's
  // `traceback.extract_tb()`.
  repeated str ng stack_fra _ ds = 2;
}

// T  creat on of an op  n a TensorFlow Graph (e.g., FuncGraph  n TF2).
 ssage GraphOpCreat on {
  // Type of t  op (e.g., "MatMul").
  str ng op_type = 1;

  // Na  of t  op (e.g., "Dense/MatMul_1").
  str ng op_na  = 2;

  // Na  of t  graph that t  op  s a part of ( f ava lable).
  str ng graph_na  = 3;

  // Un que  D of t  graph (generated by debugger).
  // T   s t   D of t   m d ately-enclos ng graph.
  str ng graph_ d = 4;

  // Na  of t  dev ce that t  op  s ass gned to ( f ava lable).
  str ng dev ce_na  = 5;

  // Na s of t   nput tensors to t  op.
  repeated str ng  nput_na s = 6;

  // Number of output tensors em ted by t  op.
   nt32 num_outputs = 7;

  // T  un que  D for code locat on (stack trace) of t  op's creat on.
  CodeLocat on code_locat on = 8;

  // Un que  Ds for t  output tensors of t  op.
  repeated  nt32 output_tensor_ ds = 9;
}

// A debugger- nstru nted graph.
 ssage DebuggedGraph {
  // An  D for t  graph.
  // T  can be used up to look up graph na s. Generated by t  debugger.
  str ng graph_ d = 1;

  // Na  of t  graph ( f ava lable).
  str ng graph_na  = 2;

  // Na s of t   nstru nted ops. T  can be used to look up op na 
  // based on t  nu r c-summary tensors (2nd column).
  repeated str ng  nstru nted_ops = 3;

  // Or g nal (un nstru nted) GraphDef ( f ava lable).
  bytes or g nal_graph_def = 4;

  // An encoded vers on of a GraphDef.
  // T  graph may  nclude t  debugger- nserted ops.
  bytes  nstru nted_graph_def = 5;

  //  Ds of t   m d ate enclos ng context (graph),  f any.
  str ng outer_context_ d = 6;
}

// A dev ce on wh ch ops and/or tensors are  nstru nted by t  debugger.
 ssage DebuggedDev ce {
  // Na  of t  dev ce.
  str ng dev ce_na  = 1;

  // A debugger-generated  D for t  dev ce. Guaranteed to be un que w h n
  // t  scope of t  debugged TensorFlow program,  nclud ng s ngle-host and
  // mult -host sett ngs.
  // TODO(ca s): Test t  un queness guarantee  n mult -host sett ngs.
   nt32 dev ce_ d = 2;
}

// Data relat ng to t  eager execut on of an op or a Graph.
// For a op that generates N output tensors (N >= 0), only one
// Execut on proto w ll be used to descr be t  execut on event.
 ssage Execut on {
  // Op type (e.g., "MatMul").
  //  n t  case of a Graph, t   s t  na  of t  Graph.
  str ng op_type = 1;

  // Number of output tensors.
   nt32 num_outputs = 2;

  // T  graph that's executed: appl cable only to t  eager
  // execut on of a FuncGraph.
  str ng graph_ d = 3;

  //  Ds of t   nput tensors ( f ava lable).
  repeated  nt64  nput_tensor_ ds = 4;

  //  Ds of t  output tensors ( f ava lbable).
  //  f spec f ed, must have t  sa  length as tensor_protos.
  repeated  nt64 output_tensor_ ds = 5;

  // Type of t  tensor value encapsulated  n t  proto.
  TensorDebugMode tensor_debug_mode = 6;

  // Output Tensor values  n t  type descr bed by `tensor_value_type`.
  // T  length of t  should match `num_outputs`.
  repeated TensorProto tensor_protos = 7;

  // Stack trace of t  eager execut on.
  CodeLocat on code_locat on = 8;

  // Debugged-generated  Ds of t  dev ces on wh ch t  output tensors res de.
  // To look up deta ls about t  dev ce (e.g., na ), cross-reference t 
  // f eld w h t  DebuggedDev ce  ssages.
  repeated  nt32 output_tensor_dev ce_ ds = 9;

  // TODO(ca s): W n backport ng to V1 Sess on.run() support, add more f elds
  // such as fetc s and feeds.
}

// Data relat ng to an execut on of a Graph (e.g., an eager execut on of a
// FuncGraph).
// T  values of t   nter d ate tensors computed  n t  graph are recorded
//  n t  proto. A graph execut on may correspond to one or more p eces of
// `GraphExecut onTrace`, depend ng on w t r t   nstru nted tensor values
// are summar zed  n an aggregated or separate fash on.
 ssage GraphExecut onTrace {
  // Un que  D of t  context that t  executed op(s) belong to (e.g., a
  // comp led concrete tf.funct on).
  str ng tfdbg_context_ d = 1;

  // Na  of t  op (appl cable only  n t  case of t  `FULL_TENSOR` trace
  // level).
  str ng op_na  = 2;

  // Output slot of t  tensor (appl cable only  n t  case of t  `FULL_TENSOR`
  // trace level).
   nt32 output_slot = 3;

  // Type of t  tensor value encapsulated  n t  proto.
  TensorDebugMode tensor_debug_mode = 4;

  // Tensor value  n t  type descr bed by `tensor_value_type`.
  // T  tensor may summar ze t  value of a s ngle  nter d ate op of t 
  // graph, or those of mult ple  nter d ate tensors.
  TensorProto tensor_proto = 5;

  // Na  of t  dev ce that t  op belongs to.
  str ng dev ce_na  = 6;
}
