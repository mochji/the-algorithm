/* Copyr ght 2016 T  TensorFlow Authors. All R ghts Reserved.

L censed under t  Apac  L cense, Vers on 2.0 (t  "L cense");
  may not use t  f le except  n compl ance w h t  L cense.
  may obta n a copy of t  L cense at

    http://www.apac .org/l censes/L CENSE-2.0

Unless requ red by appl cable law or agreed to  n wr  ng, software
d str buted under t  L cense  s d str buted on an "AS  S" BAS S,
W THOUT WARRANT ES OR COND T ONS OF ANY K ND, e  r express or  mpl ed.
See t  L cense for t  spec f c language govern ng perm ss ons and
l m at ons under t  L cense.
==============================================================================*/

syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/dev ce_attr butes.proto";
 mport "tensorflow/core/fra work/graph.proto";
 mport "tensorflow/core/fra work/tensor.proto";
 mport "tensorflow/core/protobuf/conf g.proto";
 mport "tensorflow/core/protobuf/error_codes.proto";
 mport "tensorflow/core/protobuf/na d_tensor.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "D str butedRunt  Protos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.d strunt  ";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

////////////////////////////////////////////////////////////////////////////////
//
// CreateSess on  thod request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

 ssage CreateSess onRequest {
  // T   n  al graph def n  on.
  GraphDef graph_def = 1;

  // Conf gurat on opt ons.
  Conf gProto conf g = 2;

  // T  target str ng used from t  cl ent's perspect ve.
  str ng target = 3;
}

 ssage CreateSess onResponse {
  // T  sess on handle to be used  n subsequent calls for t  created sess on.
  //
  // T  cl ent must arrange to call CloseSess on w h t  returned
  // sess on handle to close t  sess on.
  str ng sess on_handle = 1;

  // T   n  al vers on number for t  graph, to be used  n t  next call
  // to ExtendSess on.
   nt64 graph_vers on = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// ExtendSess on  thod request/response protos.
//
// T  "graph_def" spec f es a set of nodes to be added to t  sess on's graph.
//
// A typ cal "graph_def" w ll conta n:
//
// * Zero or more new nodes w h na s that do not ex st  n t  server-s de
//   graph. T se w ll be added to t  graph.
//
// PRECOND T ON: T  server-s de current vers on  s req.current_vers on.
//   None of t  na s  n req.graph_def appeared  n prev ous successful calls to
//   CreateSess on or ExtendSess on w h t  sa  sess on_handle.
// POSTCOND T ON: T  server-s de current vers on  s resp.new_vers on.
//
////////////////////////////////////////////////////////////////////////////////

 ssage ExtendSess onRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;

  // REQU RED: T  nodes to be added to t  sess on's graph.  f any node has
  // t  sa  na  as an ex st ng node, t  operat on w ll fa l w h
  //  LLEGAL_ARGUMENT.
  GraphDef graph_def = 2;

  // REQU RED: T  vers on number of t  graph to be extended. T  w ll be
  // tested aga nst t  current server-s de vers on number, and t  operat on
  // w ll fa l w h FA LED_PRECOND T ON  f t y do not match.
   nt64 current_graph_vers on = 3;
}

 ssage ExtendSess onResponse {
  // TODO(mrry): Return so th ng about t  operat on?

  // T  new vers on number for t  extended graph, to be used  n t  next call
  // to ExtendSess on.
   nt64 new_graph_vers on = 4;
}

////////////////////////////////////////////////////////////////////////////////
//
// RunStep  thod request/response protos.
//
// T  caller should prov de t  feeds needed by t  graph and spec fy
// what nodes should be fetc d.
//
////////////////////////////////////////////////////////////////////////////////

 ssage RunStepRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;

  // Tensors to be fed  n t  step. Each feed  s a na d tensor.
  repeated Na dTensorProto feed = 2;

  // Fetc s. A l st of tensor na s. T  caller expects a tensor to
  // be returned for each fetch[ ] (see RunStepResponse.tensor). T 
  // order of spec f ed fetc s does not change t  execut on order.
  repeated str ng fetch = 3;

  // Target Nodes. A l st of node na s. T  na d nodes w ll be run
  // to but t  r outputs w ll not be fetc d.
  repeated str ng target = 4;

  // Opt ons for t  run call.
  RunOpt ons opt ons = 5;

  // Part al run handle (opt onal).  f spec f ed, t  w ll be a part al run
  // execut on, run up to t  spec f ed fetc s.
  str ng part al_run_handle = 6;

  //  f true t n so  errors, e.g., execut on errors that have long
  // error  ssages, may return an OK RunStepResponse w h t  actual
  // error saved  n t  status_code/status_error_ ssage f elds of t 
  // response body. T   s a workaround s nce t  RPC subsystem may
  // truncate long  tadata  ssages.
  bool store_errors_ n_response_body = 7;

  // Un que  dent f er for t  request. Every RunStepRequest must
  // have a un que request_ d, and retr ed RunStepRequest must have
  // t  sa  request_ d.  f request_ d  s zero, retry detect on  s d sabled.
   nt64 request_ d = 8;
}

 ssage RunStepResponse {
  // NOTE: T  order of t  returned tensors may or may not match
  // t  fetch order spec f ed  n RunStepRequest.
  repeated Na dTensorProto tensor = 1;

  // Returned  tadata  f requested  n t  opt ons.
  Run tadata  tadata = 2;

  //  f store_errors_ n_response_body  s true  n t  request, t n
  // opt onally t  server may return an OK status for t  RPC and
  // f ll t  true status  nto t  f elds below, to allow for  ssages
  // that are too long to f   n  tadata.
  error.Code status_code = 3;
  str ng status_error_ ssage = 4;
}

////////////////////////////////////////////////////////////////////////////////
//
// Part alRunSetup  thod request/response protos.
//
// T  caller should prov de t  future part al run feeds, fetc s, and targets.
// T n t  caller can use RunStepRequest w h  s_part al set to make part al
// run calls.
//
////////////////////////////////////////////////////////////////////////////////

 ssage Part alRunSetupRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;

  // Tensors to be fed  n future steps.
  repeated str ng feed = 2;

  // Fetc s. A l st of tensor na s. T  caller expects a tensor to be returned
  // for each fetch[ ] (see RunStepResponse.tensor), for correspond ng part al
  // RunStepRequests. T  order of spec f ed fetc s does not change t 
  // execut on order.
  repeated str ng fetch = 3;

  // Target Nodes. A l st of node na s. T  na d nodes w ll be run  n future
  // steps, but t  r outputs w ll not be fetc d.
  repeated str ng target = 4;

  // Un que  dent f er for t  request. Every Part alRunSetupRequest must
  // have a un que request_ d, and retr ed Part alRunSetupRequest must have
  // t  sa  request_ d.  f request_ d  s zero, retry detect on  s d sabled.
   nt64 request_ d = 5;
}

 ssage Part alRunSetupResponse {
  // T  un que handle correspond ng to t  ongo ng part al run call setup by
  // t   nvocat on to Part alRunSetup. T  handle may be passed to
  // RunStepRequest to send and rece ve tensors for t  part al run.
  str ng part al_run_handle = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// CloseSess on  thod request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

 ssage CloseSess onRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;
}

 ssage CloseSess onResponse {}

// Reset() allows m sbehav ng or slow sess ons to be aborted and closed, and
// causes t  r res ces eventually to be released.  Reset() does not wa 
// for t  computat ons  n old sess ons to cease;    rely starts t 
// process of tear ng t m down.  Ho ver,  f a new sess on  s started after
// a Reset(), t  new sess on  s  solated from changes that old sess ons
// (started pr or to t  Reset()) may cont nue to make to res ces, prov ded
// all those res ces are  n conta ners l sted  n "conta ners".
//
// Old sess ons may cont nue to have s de-effects on res ces not  n
// conta ners l sted  n "conta ners", and thus may affect future
// sess ons' results  n ways that are hard to pred ct.  Thus,  f  ll-def ned
// behav or  s des red,  s   recom nded that all conta ners be l sted  n
// "conta ners".  S m larly,  f a dev ce_f lter  s spec f ed, results may be
// hard to pred ct.
 ssage ResetRequest {
  // A l st of conta ner na s, wh ch may be empty.
  //
  //  f 'conta ner'  s not empty, releases res ces  n t  g ven
  // conta ners  n all dev ces.
  //
  //  f 'conta ner'  s empty, releases res ces  n t  default
  // conta ner  n all dev ces.
  repeated str ng conta ner = 1;

  // W n any f lters are present, only dev ces that match t  f lters
  // w ll be reset. Each f lter can be part ally spec f ed,
  // e.g. "/job:ps" "/job:worker/repl ca:3", etc.
  repeated str ng dev ce_f lters = 2;
}

 ssage ResetResponse {}

////////////////////////////////////////////////////////////////////////////////
//
// L stDev ces  thod request/response protos.
//
// Returns  nformat on about t  TensorFlow dev ces that are ava lable
// to t  master.
//
////////////////////////////////////////////////////////////////////////////////

 ssage L stDev cesRequest {
  // Opt onal: sess on_handle must be returned by a CreateSess on call to t 
  // sa  master serv ce.
  //
  // W n sess on_handle  s empty, t  ClusterSpec prov ded w n t  master was
  // started  s used to compute t  ava lable dev ces.  f t  sess on_handle  s
  // prov ded but not recogn zed, an error  s returned. F nally,  f a val d
  // sess on_handle  s prov ded, t  cluster conf gurat on for that sess on  s
  // used w n comput ng t  response.
  str ng sess on_handle = 1;
}

 ssage L stDev cesResponse {
  repeated Dev ceAttr butes local_dev ce = 1;
  repeated Dev ceAttr butes remote_dev ce = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// MakeCallable  thod request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

 ssage MakeCallableRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;

  // Opt ons that def ne t  behav or of t  created callable.
  CallableOpt ons opt ons = 2;

  // Un que  dent f er for t  request. Every MakeCallableRequest must
  // have a un que request_ d, and retr ed MakeCallableRequest must have
  // t  sa  request_ d.  f request_ d  s zero, retry detect on  s d sabled.
   nt64 request_ d = 3;
}

 ssage MakeCallableResponse {
  // A handle to t  created callable.
   nt64 handle = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// RunCallable  thod request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

 ssage RunCallableRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;
  // REQU RED: handle must be returned by a MakeCallable call to t  sa 
  // master serv ce.
   nt64 handle = 2;

  // Values of t  tensors passed as argu nts to t  callable,  n t  order
  // def ned  n t  CallableOpt ons.feed f eld passed to MakeCallable.
  repeated TensorProto feed = 3;

  // Un que  dent f er for t  request. Every RunCallableRequest must
  // have a un que request_ d, and retr ed RunCallableRequest must have
  // t  sa  request_ d.  f request_ d  s zero, retry detect on  s d sabled.
   nt64 request_ d = 4;
}

 ssage RunCallableResponse {
  // Values of t  tensors returned by t  callable,  n t  order def ned  n t 
  // CallableOpt ons.fetch f eld passed to MakeCallable.
  repeated TensorProto fetch = 1;

  // Returned  tadata  f requested  n t  opt ons.
  Run tadata  tadata = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// ReleaseCallable  thod request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

 ssage ReleaseCallableRequest {
  // REQU RED: sess on_handle must be returned by a CreateSess on call
  // to t  sa  master serv ce.
  str ng sess on_handle = 1;

  // REQU RED: handle must be returned by a MakeCallable call to t  sa 
  // master serv ce.
   nt64 handle = 2;
}

 ssage ReleaseCallableResponse {}
