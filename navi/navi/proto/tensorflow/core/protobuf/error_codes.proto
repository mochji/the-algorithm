syntax = "proto3";

package tensorflow.error;

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "ErrorCodesProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// T  canon cal error codes for TensorFlow AP s.
//
// Warn ngs:
//
// -   Do not change any nu r c ass gn nts.
// -   Changes to t  l st should only be made  f t re  s a compell ng
//     need that can't be sat sf ed  n anot r way.  Such changes
//     must be approved by at least two OWNERS.
// -   T se error codes must match gRPC and protobuf error codes (except for
//     DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANS ON_USE_DEFAULT_ N_SW TCH_ NSTEAD_).
//
// So t  s mult ple error codes may apply.  Serv ces should return
// t  most spec f c error code that appl es.  For example, prefer
// OUT_OF_RANGE over FA LED_PRECOND T ON  f both codes apply.
// S m larly prefer NOT_FOUND or ALREADY_EX STS over FA LED_PRECOND T ON.
enum Code {
  // Not an error; returned on success
  OK = 0;

  // T  operat on was cancelled (typ cally by t  caller).
  CANCELLED = 1;

  // Unknown error.  An example of w re t  error may be returned  s
  //  f a Status value rece ved from anot r address space belongs to
  // an error-space that  s not known  n t  address space.  Also
  // errors ra sed by AP s that do not return enough error  nformat on
  // may be converted to t  error.
  UNKNOWN = 2;

  // Cl ent spec f ed an  nval d argu nt.  Note that t  d ffers
  // from FA LED_PRECOND T ON.   NVAL D_ARGUMENT  nd cates argu nts
  // that are problemat c regardless of t  state of t  system
  // (e.g., a malfor d f le na ).
   NVAL D_ARGUMENT = 3;

  // Deadl ne exp red before operat on could complete.  For operat ons
  // that change t  state of t  system, t  error may be returned
  // even  f t  operat on has completed successfully.  For example, a
  // successful response from a server could have been delayed long
  // enough for t  deadl ne to exp re.
  DEADL NE_EXCEEDED = 4;

  // So  requested ent y (e.g., f le or d rectory) was not found.
  // For pr vacy reasons, t  code *may* be returned w n t  cl ent
  // does not have t  access r ght to t  ent y.
  NOT_FOUND = 5;

  // So  ent y that   attempted to create (e.g., f le or d rectory)
  // already ex sts.
  ALREADY_EX STS = 6;

  // T  caller does not have perm ss on to execute t  spec f ed
  // operat on.  PERM SS ON_DEN ED must not be used for reject ons
  // caused by exhaust ng so  res ce (use RESOURCE_EXHAUSTED
  //  nstead for those errors).  PERM SS ON_DEN ED must not be
  // used  f t  caller can not be  dent f ed (use UNAUTHENT CATED
  //  nstead for those errors).
  PERM SS ON_DEN ED = 7;

  // T  request does not have val d aut nt cat on credent als for t 
  // operat on.
  UNAUTHENT CATED = 16;

  // So  res ce has been exhausted, perhaps a per-user quota, or
  // perhaps t  ent re f le system  s out of space.
  RESOURCE_EXHAUSTED = 8;

  // Operat on was rejected because t  system  s not  n a state
  // requ red for t  operat on's execut on.  For example, d rectory
  // to be deleted may be non-empty, an rmd r operat on  s appl ed to
  // a non-d rectory, etc.
  //
  // A l mus test that may  lp a serv ce  mple ntor  n dec d ng
  // bet en FA LED_PRECOND T ON, ABORTED, and UNAVA LABLE:
  //  (a) Use UNAVA LABLE  f t  cl ent can retry just t  fa l ng call.
  //  (b) Use ABORTED  f t  cl ent should retry at a h g r-level
  //      (e.g., restart ng a read-mod fy-wr e sequence).
  //  (c) Use FA LED_PRECOND T ON  f t  cl ent should not retry unt l
  //      t  system state has been expl c ly f xed.  E.g.,  f an "rmd r"
  //      fa ls because t  d rectory  s non-empty, FA LED_PRECOND T ON
  //      should be returned s nce t  cl ent should not retry unless
  //      t y have f rst f xed up t  d rectory by delet ng f les from  .
  //  (d) Use FA LED_PRECOND T ON  f t  cl ent performs cond  onal
  //      REST Get/Update/Delete on a res ce and t  res ce on t 
  //      server does not match t  cond  on. E.g., confl ct ng
  //      read-mod fy-wr e on t  sa  res ce.
  FA LED_PRECOND T ON = 9;

  // T  operat on was aborted, typ cally due to a concurrency  ssue
  // l ke sequencer c ck fa lures, transact on aborts, etc.
  //
  // See l mus test above for dec d ng bet en FA LED_PRECOND T ON,
  // ABORTED, and UNAVA LABLE.
  ABORTED = 10;

  // Operat on tr ed to  erate past t  val d  nput range.  E.g., seek ng or
  // read ng past end of f le.
  //
  // Unl ke  NVAL D_ARGUMENT, t  error  nd cates a problem that may
  // be f xed  f t  system state changes. For example, a 32-b  f le
  // system w ll generate  NVAL D_ARGUMENT  f asked to read at an
  // offset that  s not  n t  range [0,2^32-1], but   w ll generate
  // OUT_OF_RANGE  f asked to read from an offset past t  current
  // f le s ze.
  //
  // T re  s a fa r b  of overlap bet en FA LED_PRECOND T ON and
  // OUT_OF_RANGE.    recom nd us ng OUT_OF_RANGE (t  more spec f c
  // error) w n   appl es so that callers who are  erat ng through
  // a space can eas ly look for an OUT_OF_RANGE error to detect w n
  // t y are done.
  OUT_OF_RANGE = 11;

  // Operat on  s not  mple nted or not supported/enabled  n t  serv ce.
  UN MPLEMENTED = 12;

  //  nternal errors.   ans so   nvar ant expected by t  underly ng
  // system has been broken.   f   see one of t se errors,
  // so th ng  s very broken.
   NTERNAL = 13;

  // T  serv ce  s currently unava lable.  T   s a most l kely a
  // trans ent cond  on and may be corrected by retry ng w h
  // a backoff.
  //
  // See l mus test above for dec d ng bet en FA LED_PRECOND T ON,
  // ABORTED, and UNAVA LABLE.
  UNAVA LABLE = 14;

  // Unrecoverable data loss or corrupt on.
  DATA_LOSS = 15;

  // An extra enum entry to prevent people from wr  ng code that
  // fa ls to comp le w n a new code  s added.
  //
  // Nobody should ever reference t  enu rat on entry.  n part cular,
  //  f   wr e C++ code that sw c s on t  enu rat on, add a default:
  // case  nstead of a case that  nt ons t  enu rat on entry.
  //
  // Nobody should rely on t  value (currently 20) l sted  re.   
  // may change  n t  future.
  DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANS ON_USE_DEFAULT_ N_SW TCH_ NSTEAD_ = 20;
}
