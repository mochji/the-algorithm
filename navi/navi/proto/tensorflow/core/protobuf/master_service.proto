/* Copyr ght 2016 T  TensorFlow Authors. All R ghts Reserved.

L censed under t  Apac  L cense, Vers on 2.0 (t  "L cense");
  may not use t  f le except  n compl ance w h t  L cense.
  may obta n a copy of t  L cense at

    http://www.apac .org/l censes/L CENSE-2.0

Unless requ red by appl cable law or agreed to  n wr  ng, software
d str buted under t  L cense  s d str buted on an "AS  S" BAS S,
W THOUT WARRANT ES OR COND T ONS OF ANY K ND, e  r express or  mpl ed.
See t  L cense for t  spec f c language govern ng perm ss ons and
l m at ons under t  L cense.
==============================================================================*/

syntax = "proto3";

package tensorflow.grpc;

 mport "tensorflow/core/protobuf/master.proto";

opt on java_outer_classna  = "MasterServ ceProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.d strunt  ";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

////////////////////////////////////////////////////////////////////////////////
//
// MasterServ ce def nes a TensorFlow serv ce w h wh ch a cl ent can
//  nteract to execute a d str buted TensorFlow computat on.
//
// A master serv ce keeps track of mult ple "master sess ons". Each
// sess on encapsulates a computat on graph and  s assoc ated state,
// and typ cally corresponds to a s ngle "cl ent sess on" (e.g. a
// `tensorflow::Sess on`  nstance).
//
// A sess on  s respons ble for t  follow ng:
// * ass gn ng each node to a dev ce (locally or remotely) us ng a
//   place nt algor hm. T  may make dec s ons based on collected
//   stat st cs from t  workers  n t  system (e.g.,  mory usage,
//   bandw dth consumpt on, etc.)
//
// *  nsert ng  nter d ate nodes and edges to support cross-dev ce
//   and cross-process data flows and res ce manage nt.
//
// *  ssu ng commands to workers to execute t  subgraphs assoc ated
//   w h those workers.
//
// Typ cally, a cl ent carr es out an  erat ve computat on
// (e.g. tra n ng) by  nvok ng RPCs aga nst t  master  n a
// cl ent-s de loop. T  cl ent f rst creates a cl ent sess on that
// connects to a part cular master (us ng gRPC for example). T 
// master creates a correspond ng master sess on that  s hosted on
// t  master and cac s state bet en t  cl ent's  nvocat ons.
//
// After t  sess on  s establ s d, t  master returns an opaque
// handle to t  cl ent that can be used to assoc ate t  cl ent and
// master sess ons.
//
// T  cl ent may send an  n  al graph to t  master  n t 
// CreateSess on call, and add nodes to t  graph us ng ExtendSess on.
//
// T  most frequent operat on a master  s "RunStep", wh ch  mple nts
// t  `Sess on::Run()` AP .   supports feed ng  n argu nts,
// execut ng a dataflow computat on, and fetch ng argu nts.
//
// F nally, w n t  cl ent no longer needs t  sess on,   should
// close t  sess on by  nvok ng CloseSess on, wh ch allows t  master
// to recla m res ces assoc ated w h t  sess on. T  master may
//  mple nt a garbage collect on sc   that closes sess ons that
// have been  nact ve for so  t  .
//
// For example, t  follow ng pseudo-code  llustrates how a cl ent
//  nteracts w h a master:
//
// stub = NewStub("/job:mn st/repl ca:0/task:0")
// {handle} = stub->CreateSess on({graph_def})
// do {
//   stub->RunStep({handle, {feeds}, {fetc s}})
//   // T  cl ent can evaluate a pred cate locally, based on t 
//   // result of `fetc s`, to determ ne w t r to term nate. For
//   // example,   m ght fetch t  loss and evaluate w t r    s less
//   // than so  threshold.
// } wh le (!should_stop({fetc s}));
// stub->CloseSess on({handle})
//
////////////////////////////////////////////////////////////////////////////////

serv ce MasterServ ce {
  // Creates a sess on.
  rpc CreateSess on(CreateSess onRequest) returns (CreateSess onResponse);

  // Extends a sess on.
  rpc ExtendSess on(ExtendSess onRequest) returns (ExtendSess onResponse);

  // Prepares future part al run calls.
  rpc Part alRunSetup(Part alRunSetupRequest) returns (Part alRunSetupResponse);

  // Dr ves t  graph computat on.
  rpc RunStep(RunStepRequest) returns (RunStepResponse);

  // Closes a sess on.
  rpc CloseSess on(CloseSess onRequest) returns (CloseSess onResponse);

  // L st t  dev ces usable by t  master.
  rpc L stDev ces(L stDev cesRequest) returns (L stDev cesResponse);

  // Close and abandon all ex st ng sess ons.  Ongo ng computat ons
  // w ll no longer affect fresh ones v a t  res ces  n conta ners l sted  n
  // t  ResetRequest.  See ResetRequest for more deta ls.
  rpc Reset(ResetRequest) returns (ResetResponse);

  // Reg sters a callable for execut on w h RunCallable.
  rpc MakeCallable(MakeCallableRequest) returns (MakeCallableResponse);

  // Executes a callable reg stered w h MakeCallable.
  rpc RunCallable(RunCallableRequest) returns (RunCallableResponse);

  // Frees res ces assoc ated w h a callable reg stered w h MakeCallable.
  rpc ReleaseCallable(ReleaseCallableRequest) returns (ReleaseCallableResponse);
}
