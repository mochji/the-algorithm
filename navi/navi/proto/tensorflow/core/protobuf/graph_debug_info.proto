syntax = "proto3";

package tensorflow;

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "GraphDebug nfoProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

 ssage GraphDebug nfo {
  // T  represents a f le/l ne locat on  n t  s ce code.
   ssage F leL neCol {
    // F le na   ndex, wh ch can be used to retr eve t  f le na  str ng from
    // `f les`. T  value should be bet en 0 and (len(f les)-1)
     nt32 f le_ ndex = 1;

    // L ne number  n t  f le.
     nt32 l ne = 2;

    // Col number  n t  f le l ne.
     nt32 col = 3;

    // Na  of funct on conta ns t  f le l ne.
    str ng func = 4;

    // S ce code conta ned  n t  f le l ne.
    str ng code = 5;
  }

  // T  represents a stack trace wh ch  s a ordered l st of `F leL neCol`.
   ssage StackTrace {
    // Each l ne  n t  stack trace.
    repeated F leL neCol f le_l ne_cols = 1;
  }

  // T  stores all t  s ce code f le na s and can be  ndexed by t 
  // `f le_ ndex`.
  repeated str ng f les = 1;

  // T  maps a node na  to a stack trace  n t  s ce code.
  // T  map key  s a mangl ng of t  conta n ng funct on and op na  w h
  // syntax:
  //   op.na  '@' func_na 
  // For ops  n t  top-level graph, t  func_na   s t  empty str ng.
  // Note that op na s are restr cted to a small number of characters wh ch
  // exclude '@', mak ng    mposs ble to coll de keys of t  form. Funct on
  // na s accept a much w der set of characters.
  //   would be preferable to avo d mangl ng and use a tuple key of (op.na ,
  // func_na ), but t   s not supported w h protocol buffers.
  map<str ng, StackTrace> traces = 2;
}
