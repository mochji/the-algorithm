syntax = "proto3";

package tensorflow;

 mport "tensorflow/comp ler/xla/pjrt/d str buted/protocol.proto";
 mport "tensorflow/core/fra work/dev ce_attr butes.proto";

opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";

// Represents a remote worker task, spec f ed by job na  and task  d.
 ssage Coord natedTask {
  str ng job_na  = 1;
   nt32 task_ d = 2;
}

// Status payload for all coord nat on serv ce errors.
// Note: an empty proto may be set  f t  error  s tr ggered by t  task's own
// agent calls ( .e. not propagated by t  serv ce from anot r remote task).
 ssage Coord nat onServ ceError {
  // Removed f elds wh ch used to spec fy t  error or g n.
  reserved 1, 2;
  //  f true, error  s reported v a t  agent AP  by t  user (and not an
  //  nternal serv ce error).
  bool  s_reported_error = 3;
  // Denotes wh ch task h  t  error.  f unset, t  error or g nated from t 
  // sa  task that  s process ng t  error.
  Coord natedTask s ce_task = 4;
}

// Represent dev ce  nformat on from d fferent runt  s.
 ssage TfDev ceL st {
  repeated Dev ceAttr butes dev ces = 1;
}
 ssage XlaDev ceL st {
  xla.GlobalTopologyProto dev ces = 1;
}
 ssage Coord nat onServ ceDev ce nfo {
  oneof type {
    TfDev ceL st tf = 1;
    XlaDev ceL st xla = 2;
  }
}

// Request and response  ssages for reg ster ng a worker to t  cluster leader.
// Use `job` and `task` to represent t  role of t  worker, and use
// ` ncarnat on` to un quely  dent fy a worker process. Leader responds w h  s
// ` ncarnat on` to  dent fy a leader process.
 ssage Reg sterWorkerRequest {
  // Removed f elds wh ch used to spec fy t  task.
  reserved 1, 2;
  f xed64  ncarnat on = 3;
  // Moved t  f eld `local_dev ce_attr butes` from t  request  ssage to
  // Wa ForAllTasksRequest def ned below.
  reserved 4;
  Coord natedTask s ce_task = 5;
}

 ssage Reg sterWorkerResponse {
  f xed64 leader_ ncarnat on = 1;
}

// Request and response  ssages for send ng  artbeats.
 ssage  artbeatRequest {
  // Removed f elds wh ch used to spec fy t  remote task.
  reserved 1, 2;
  f xed64  ncarnat on = 3;
  Coord natedTask s ce_task = 4;
}

 ssage  artbeatResponse {
  f xed64 leader_ ncarnat on = 1;
  //  f t re are fa lures  n cluster, use add  onal  tadata  n response to
  // broadcast error code and  ssage to ot r workers.
}

// Request and response  ssages for wa  ng for all tasks.
 ssage Wa ForAllTasksRequest {
  // Removed f elds wh ch used to spec fy t  remote task.
  reserved 1, 2;
  // Removed f eld that spec f cally used TF dev ce  nfo.
  reserved 3;
  // All local dev ce attr butes on t  request sender.
  Coord nat onServ ceDev ce nfo local_dev ce_ nfo = 4;
  Coord natedTask s ce_task = 5;
}

 ssage Wa ForAllTasksResponse {
  f xed64 leader_ ncarnat on = 1;
  // Removed f eld that spec f cally used TF dev ce  nfo.
  reserved 2;
  // All dev ces  n t  cluster.
  Coord nat onServ ceDev ce nfo cluster_dev ce_ nfo = 3;
}

// Request and response  ssages for report ng errors to task.
 ssage ReportErrorToAgentRequest {
   nt32 error_code = 1;
  str ng error_ ssage = 2;
  // Removed f elds that are embedded  n payload.
  reserved 3, 4;
  Coord nat onServ ceError error_payload = 5;
}

 ssage ReportErrorToAgentResponse {}

// Request and response  ssages for report ng errors to serv ce  nstance.
 ssage ReportErrorToServ ceRequest {
   nt32 error_code = 1;
  str ng error_ ssage = 2;
  // Removed f elds wh ch used to spec fy t  error or g n.
  reserved 3, 4;
  Coord natedTask error_or g n = 5;
}

 ssage ReportErrorToServ ceResponse {}

//  ssage for conf gurat on key value.
// Key  s structured l ke Un x f le system, w h mult ple levels of d rectory
// na s separated by t  slash ('/') characters.
 ssage KeyValueEntry {
  str ng key = 1;
  bytes value = 2;
}

// Request and response  ssages for  nsert ng conf gurat on key-value data.
 ssage  nsertKeyValueRequest {
  KeyValueEntry kv = 1;
}

 ssage  nsertKeyValueResponse {}

// Request and response  ssages for gett ng conf gurat on key-value data.
 ssage GetKeyValueRequest {
  str ng key = 1;
}

 ssage GetKeyValueResponse {
  KeyValueEntry kv = 1;
}

// Request and response  ssages for delet ng conf gurat on key-value data.
// W n  s_d rectory  s true, delete key-values recurs vely under `key`.
 ssage DeleteKeyValueRequest {
  str ng key = 1;
  bool  s_d rectory = 2;
}

 ssage DeleteKeyValueResponse {}

// Request and response  ssages for gener c sync barr ers.
 ssage Barr erRequest {
  str ng barr er_ d = 1;
   nt64 barr er_t  out_ n_ms = 2;
  // Denotes l st of tasks that w ll wa  for t  barr er.  f unspec f ed,  
  //  mpl es that t  ent re cluster  s part c pat ng  n t  barr er.
  repeated Coord natedTask tasks = 3;
  // Task that  s mak ng t  request.
  Coord natedTask s ce_task = 4;
}

 ssage Barr erResponse {}

// Request and response  ssages for  cancell ng gener c sync barr ers.
 ssage CancelBarr erRequest {
  str ng barr er_ d = 1;
  // Task that  s mak ng t  request.
  Coord natedTask s ce_task = 2;
}

 ssage CancelBarr erResponse {}

// Coord nat on Serv ce def nes a TensorFlow serv ce that controls and
// coord nates d str buted execut on  n a cluster of mult ple workers.
//
// T  serv ce keeps track of t  cluster conf gurat on and t  state of cluster
//  mbers or t  leader depend ng on t  role of t  current worker. T 
// d str buted runt   leverages t  serv ce to coord nate and perform cluster
//  n  al zat on, c ck t   alth ness of workers, and propagate error
//  ssages to t  cluster.
serv ce Coord nat onServ ce {
  // Reg ster task to coord nat on serv ce so that t  serv ce starts to track
  // l veness of t  task. RPC blocks and returns only w n   reg sters to
  // t  serv ce successfully, or error happens  n t  reg ster ng process.
  rpc Reg sterWorker(Reg sterWorkerRequest) returns (Reg sterWorkerResponse);

  //  artbeat  ssage from task to coord nat on serv ce.  artbeat  s sent from
  // a task to refresh  s t  stamp on leader to avo d   becom ng stale.
  // RPC responds  m d ately after refresh ng t  t  stamp on leader.
  rpc  artbeat( artbeatRequest) returns ( artbeatResponse);

  // Wa  for all tasks  n t  cluster to be up and runn ng. T  RPC request
  // only gets responded w n all workers are reg stered, or so  error occurs.
  rpc Wa ForAllTasks(Wa ForAllTasksRequest) returns (Wa ForAllTasksResponse);

  // Report error to t  task. RPC sets t  rece v ng  nstance of coord nat on
  // serv ce agent to error state permanently.
  // TODO(b/195990880): Cons der spl t ng t   nto a d fferent RPC serv ce.
  rpc ReportErrorToAgent(ReportErrorToAgentRequest)
      returns (ReportErrorToAgentResponse);

  // Report task error to coord nat on serv ce. RPC sets t  serv ce-s de task
  // state to error, and propagate t  error to ot r tasks  n t  cluster.
  rpc ReportErrorToServ ce(ReportErrorToServ ceRequest)
      returns (ReportErrorToServ ceResponse);

  //  nsert conf gurat on key-value that w ll be access ble to all cluster
  // workers. T  key can be formatted as Un x f le path w h h erarchy. T 
  // coord nat on serv ce key-value store should only be used for cluster
  // conf gurat on data.
  rpc  nsertKeyValue( nsertKeyValueRequest) returns ( nsertKeyValueResponse);

  // Get conf gurat on key-value. T  request blocks unt l t  key-value data
  // beco s ava lable ( .e., set by a worker  n t  cluster).
  rpc GetKeyValue(GetKeyValueRequest) returns (GetKeyValueResponse);

  // Delete conf gurat on key-value.  f  s_d rectory  s set  n request,
  // recurs vely clean up all key-values under t  path spec f ed by `key`.
  rpc DeleteKeyValue(DeleteKeyValueRequest) returns (DeleteKeyValueResponse);

  // Blocks unt l all (or a subset of) tasks are at t  barr er or t  barr er
  // fa ls.
  //
  // `barr er_ d` should be un que across barr ers. Once t  barr er has passed
  // or fa led, subsequent calls w ll not block, and  m d ately respond w h
  // t  prev ous response.
  //
  // T  f rst Wa AtBarr er() call rece ved by t  serv ce for a part cular
  // barr er  d  s spec al  n that   determ nes t  barr er deadl ne based on
  // t  out durat on.
  // Ho ver,  f subsequent calls by d fferent agents spec fy a d fferent set of
  // `tasks` for t  sa  `barr er_ d`, t  barr er w ll fa l  nstantly.
  //
  //  f no tasks are spec f ed (default), t  barr er w ll block for all t 
  // connected tasks.
  //
  // Poss ble serv ce errors:
  //   - Deadl neExceeded: T  d out wa  ng for spec f ed tasks at t  barr er.
  //      Deadl ne  s determ ned by t  server t  stamp w n   rece ves t 
  //      f rst Wa AtBarr er() + t  out durat on.
  //   - Cancelled: One of t  tasks called CancelBarr er().
  //   - Aborted: Serv ce  s shutt ng down.
  //   -  nternal: Any part c pat ng task  s  n ERROR state.
  //   -  nval dArgu nt: (1) Confl ct ng tasks spec f ed by d fferent agents
  //       for t  sa  barr er, (2) one of t  part c pat ng tasks  s not  n
  //       t  cluster, or (3) task mak ng t  request  s not  ncluded  n t 
  //       l st of part c pat ng tasks.
  rpc Barr er(Barr erRequest) returns (Barr erResponse);

  // Aborts t  barr er  f    s ongo ng.
  // Current and future Wa AtBarr er() calls w h t  sa   d w ll return a
  // CANCELLED error status.
  // Poss ble serv ce errors:
  //   - Fa ledPrecond  on: Barr er has already been passed.
  //   - NotFound: No barr er w h t  spec f ed  d  s found.
  rpc CancelBarr er(CancelBarr erRequest) returns (CancelBarr erResponse);
}
