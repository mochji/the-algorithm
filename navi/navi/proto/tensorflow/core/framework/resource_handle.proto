syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/tensor_shape.proto";
 mport "tensorflow/core/fra work/types.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "Res ceHandle";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/res ce_handle_go_proto";

// Protocol buffer represent ng a handle to a tensorflow res ce. Handles are
// not val d across execut ons, but can be ser al zed back and forth from w h n
// a s ngle run.
 ssage Res ceHandleProto {
  // Un que na  for t  dev ce conta n ng t  res ce.
  str ng dev ce = 1;

  // Conta ner  n wh ch t  res ce  s placed.
  str ng conta ner = 2;

  // Un que na  of t  res ce.
  str ng na  = 3;

  // Hash code for t  type of t  res ce.  s only val d  n t  sa  dev ce
  // and  n t  sa  execut on.
  u nt64 hash_code = 4;

  // For debug-only, t  na  of t  type po nted to by t  handle,  f
  // ava lable.
  str ng maybe_type_na  = 5;

  // Protocol buffer represent ng a pa r of (data type, tensor shape).
   ssage DtypeAndShape {
    DataType dtype = 1;
    TensorShapeProto shape = 2;
  }

  // Data types and shapes for t  underly ng res ce.
  repeated DtypeAndShape dtypes_and_shapes = 6;

  reserved 7;
}
