syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/attr_value.proto";
 mport "tensorflow/core/fra work/full_type.proto";
 mport "tensorflow/core/fra work/res ce_handle.proto";
 mport "tensorflow/core/fra work/types.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "OpDefProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/op_def_go_proto";

// Def nes an operat on. A NodeDef  n a GraphDef spec f es an Op by
// us ng t  "op" f eld wh ch should match t  na  of a OpDef.
// L NT. fChange
 ssage OpDef {
  // Op na s start ng w h an underscore are reserved for  nternal use.
  // Na s should be Ca lCase and match t  regexp "[A-Z][a-zA-Z0-9>_]*".
  str ng na  = 1;

  // For descr b ng  nputs and outputs.
   ssage ArgDef {
    // Na  for t   nput/output.  Should match t  regexp "[a-z][a-z0-9_]*".
    str ng na  = 1;

    // Human readable descr pt on.
    str ng descr pt on = 2;

    // Descr bes t  type of one or more tensors that are accepted/produced
    // by t   nput/output arg.  T  only legal comb nat ons are:
    // * For a s ngle tensor: e  r t  "type" f eld  s set or t 
    //   "type_attr" f eld  s set to t  na  of an attr w h type "type".
    // * For a sequence of tensors w h t  sa  type: t  "number_attr"
    //   f eld w ll be set to t  na  of an attr w h type " nt", and
    //   e  r t  "type" or "type_attr" f eld w ll be set as for
    //   s ngle tensors.
    // * For a sequence of tensors, t  "type_l st_attr" f eld w ll be set
    //   to t  na  of an attr w h type "l st(type)".
    DataType type = 3;
    str ng type_attr = 4;    //  f spec f ed, attr must have type "type"
    str ng number_attr = 5;  //  f spec f ed, attr must have type " nt"
    //  f spec f ed, attr must have type "l st(type)", and none of
    // type, type_attr, and number_attr may be spec f ed.
    str ng type_l st_attr = 6;

    // T  handle data for res ce  nputs.
    repeated Res ceHandleProto.DtypeAndShape handle_data = 7;

    // For  nputs:  f true, t   nputs are requ red to be refs.
    //   By default,  nputs can be e  r refs or non-refs.
    // For outputs:  f true, outputs are refs, ot rw se t y are not.
    bool  s_ref = 16;

    // Exper  ntal. Full type declarat on for t  argu nt.
    // T  full type spec f cat on comb nes type, type_attr, type_l st_attr,
    // etc.  nto a un f ed representat on.
    // T  declarat on may conta n non-concrete types (for example,
    // Tensor<TypeVar<'T'>>  s a val d type declarat on.
    //
    // Note: t   s a trans ent f eld. T  long-term a m  s to represent t 
    // ent re OpDef as a s ngle type: a callable.  n that context, t  f eld  s
    // just t  type of a s ngle argu nt.
    FullTypeDef exper  ntal_full_type = 17;
  }

  // Descr pt on of t   nput(s).
  repeated ArgDef  nput_arg = 2;

  // Descr pt on of t  output(s).
  repeated ArgDef output_arg = 3;

  // Na d control outputs for t  operat on. Useful only for compos e
  // operat ons ( .e. funct ons) wh ch want to na  d fferent control outputs.
  repeated str ng control_output = 20;

  // Descr pt on of t  graph-construct on-t   conf gurat on of t 
  // Op.  That  s to say, t  descr bes t  attr f elds that w ll
  // be spec f ed  n t  NodeDef.
   ssage AttrDef {
    // A descr pt ve na  for t  argu nt.  May be used, e.g. by t 
    // Python cl ent, as a keyword argu nt na , and so should match
    // t  regexp "[a-z][a-z0-9_]+".
    str ng na  = 1;

    // One of t  type na s from attr_value.proto ("str ng", "l st(str ng)",
    // " nt", etc.).
    str ng type = 2;

    // A reasonable default for t  attr bute  f t  user does not supply
    // a value.   f not spec f ed, t  user must supply a value.
    AttrValue default_value = 3;

    // Human-readable descr pt on.
    str ng descr pt on = 4;

    // TODO(josh11b): bool  s_opt onal?

    // --- Constra nts ---
    // T se constra nts are only  n effect  f spec f ed.  Default  s no
    // constra nts.

    // For type == " nt", t   s a m n mum value.  For "l st(___)"
    // types, t   s t  m n mum length.
    bool has_m n mum = 5;
     nt64 m n mum = 6;

    // T  set of allo d values.  Has type that  s t  "l st" vers on
    // of t  "type" f eld above (uses t  "l st" f eld of AttrValue).
    //  f type == "type" or "l st(type)" above, t n t  "type" f eld
    // of "allo d_values.l st" has t  set of allo d DataTypes.
    //  f type == "str ng" or "l st(str ng)", t n t  "s" f eld of
    // "allo d_values.l st" has t  set of allo d str ngs.
    AttrValue allo d_values = 7;
  }
  repeated AttrDef attr = 4;

  // Opt onal deprecat on based on GraphDef vers ons.
  OpDeprecat on deprecat on = 8;

  // One-l ne human-readable descr pt on of what t  Op does.
  str ng summary = 5;

  // Add  onal, longer human-readable descr pt on of what t  Op does.
  str ng descr pt on = 6;

  // -------------------------------------------------------------------------
  // Wh ch opt m zat ons t  operat on can part c pate  n.

  // True  f t  operat on  s commutat ve ("op(a,b) == op(b,a)" for all  nputs)
  bool  s_commutat ve = 18;

  //  f  s_aggregate  s true, t n t  operat on accepts N >= 2
  //  nputs and produces 1 output all of t  sa  type.  Should be
  // assoc at ve and commutat ve, and produce output w h t  sa 
  // shape as t   nput.  T  opt m zer may replace an aggregate op
  // tak ng  nput from mult ple dev ces w h a tree of aggregate ops
  // that aggregate locally w h n each dev ce (and poss bly w h n
  // groups of nearby dev ces) before commun cat ng.
  // TODO(josh11b):  mple nt that opt m zat on.
  bool  s_aggregate = 16;  // for th ngs l ke add

  // Ot r opt m zat ons go  re, l ke
  //   can_al as_ nput, rewr e_w n_output_unused, part  on ng_strategy, etc.

  // -------------------------------------------------------------------------
  // Opt m zat on constra nts.

  // Ops are marked as stateful  f t  r behav or depends on so  state beyond
  // t  r  nput tensors (e.g. var able read ng op) or  f t y have
  // a s de-effect (e.g. pr nt ng or assert ng ops). Equ valently, stateless ops
  // must always produce t  sa  output for t  sa   nput and have
  // no s de-effects.
  //
  // By default Ops may be moved bet en dev ces.  Stateful ops should
  // e  r not be moved, or should only be moved  f that state can also
  // be moved (e.g. v a so  sort of save / restore).
  // Stateful ops are guaranteed to never be opt m zed away by Common
  // Subexpress on El m nat on (CSE).
  bool  s_stateful = 17;  // for th ngs l ke var ables, queue

  // -------------------------------------------------------------------------
  // Non-standard opt ons.

  // By default, all  nputs to an Op must be  n  al zed Tensors.  Ops
  // that may  n  al ze tensors for t  f rst t   should set t 
  // f eld to true, to allow t  Op to take an un n  al zed Tensor as
  //  nput.
  bool allows_un n  al zed_ nput = 19;  // for Ass gn, etc.

  //  nd cates w t r t  op  mple ntat on uses d str buted commun cat on.
  //  f True, t  op  s allo d to return errors for network d sconnect on and
  // tr gger TF network fa lure handl ng log cs.
  bool  s_d str buted_commun cat on = 21;
}
// L NT.T nChange(
//     https://www.tensorflow.org/code/tensorflow/core/fra work/op_def_ut l.cc)

//  nformat on about vers on-dependent deprecat on of an op
 ssage OpDeprecat on {
  // F rst GraphDef vers on at wh ch t  op  s d sallo d.
   nt32 vers on = 1;

  // Explanat on of why   was deprecated and what to use  nstead.
  str ng explanat on = 2;
}

// A collect on of OpDefs
 ssage OpL st {
  repeated OpDef op = 1;
}
