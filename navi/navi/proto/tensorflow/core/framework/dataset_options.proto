syntax = "proto3";

package tensorflow.data;

 mport "tensorflow/core/fra work/model.proto";

opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/dataset_opt ons_go_proto";

// Represents t  type of auto-shard ng   enable.
enum AutoShardPol cy {
  // AUTO: Attempts F LE-based shard ng, fall ng back to DATA-based shard ng.
  AUTO = 0;
  // F LE: Shards by  nput f les ( .e. each worker w ll get a set of f les to
  // process). W n t  opt on  s selected, make sure that t re  s at least as
  // many f les as workers.  f t re are fe r  nput f les than workers, a
  // runt   error w ll be ra sed.
  F LE = 1;
  // DATA: Shards by ele nts produced by t  dataset. Each worker w ll process
  // t  whole dataset and d scard t  port on that  s not for  self. Note that
  // for t  mode to correctly part  ons t  dataset ele nts, t  dataset
  // needs to produce ele nts  n a determ n st c order.
  DATA = 2;
  // H NT: Looks for t  presence of `shard(SHARD_H NT, ...)` wh ch  s treated
  // as a placeholder to replace w h `shard(num_workers, worker_ ndex)`.
  H NT = 3;
  // OFF: No shard ng w ll be perfor d.
  OFF = -1;
}

// next: 5
 ssage AutotuneOpt ons {
  // W t r to automat cally tune performance knobs.
  oneof opt onal_enabled {
    bool enabled = 1;
  }
  // W n autotun ng  s enabled (through autotune), determ nes t  CPU budget to
  // use. Values greater than t  number of sc dulable CPU cores are allo d
  // but may result  n CPU content on.
  oneof opt onal_cpu_budget {
     nt32 cpu_budget = 2;
  }
  // W n autotun ng  s enabled (through autotune), determ nes t  RAM budget to
  // use. Values greater than t  ava lable RAM  n bytes may result  n OOM.  f
  // 0, defaults to half of t  ava lable RAM  n bytes.
  oneof opt onal_ram_budget {
     nt64 ram_budget = 3;
  }

  // W n autotun ng  s enabled (through autotune), determ nes t  algor hm to
  // use.  f not expl c ly set by user, autotun ng w ll follow H LL_CL MB
  // algor hm but has more flex b l y to tune para ters more aggress vely,
  //  n wh ch case t  behav or  s  mple ntat on spec f c and may change over
  // t  .
  oneof opt onal_autotune_algor hm {
    model.AutotuneAlgor hm autotune_algor hm = 4;
  }
}

// next: 2
 ssage Card nal yOpt ons {
  enum ComputeLevel {
    CARD NAL TY_COMPUTE_UNSPEC F ED = 0;
    // Card nal y w ll only be computed  f   can be determ ned  n a c ap
    // manner ( e. w hout read ng from f le s ces).  f t  card nal y would
    // be nontr v al to compute, Card nal y() w ll return UNKNOWN_CARD NAL TY.
    CARD NAL TY_COMPUTE_LOW = 1;
    // Moderate effort w ll be made to determ ne card nal y, such as read ng
    //  ndex data from s ce f les.  f s gn f cant work  s needed to compute
    // card nal y (e.g. read ng ent re s ce f le contents or execut ng user
    // def ned funct ons), Card nal y() w ll return UNKNOWN_CARD NAL TY.
    CARD NAL TY_COMPUTE_MODERATE = 2;
  }
  ComputeLevel compute_level = 1;
}

// next: 3
 ssage D str buteOpt ons {
  AutoShardPol cy auto_shard_pol cy = 1;
  // T  number of dev ces attac d to t   nput p pel ne.
  oneof opt onal_num_dev ces {
     nt32 num_dev ces = 2;
  }
}

// next: 18
 ssage Opt m zat onOpt ons {
  // W t r to apply default graph opt m zat ons.  f False, only graph
  // opt m zat ons that have been expl c ly enabled w ll be appl ed.
  oneof opt onal_apply_default_opt m zat ons {
    bool apply_default_opt m zat ons = 1;
  }
  reserved 2;
  reserved 3;
  reserved 4;
  reserved 5;
  // W t r to fuse f lter transformat ons.
  oneof opt onal_f lter_fus on {
    bool f lter_fus on = 6;
  }
  // NOTE: f eld  d 7 deleted  n June 2021.
  reserved 7;
  // NOTE: f eld  d 8 deleted  n June 2021.
  reserved 8;
  // W t r to fuse map and batch transformat ons.
  oneof opt onal_map_and_batch_fus on {
    bool map_and_batch_fus on = 9;
  }
  // W t r to fuse map and f lter transformat ons.
  oneof opt onal_map_and_f lter_fus on {
    bool map_and_f lter_fus on = 10;
  }
  // W t r to fuse map transformat ons.
  oneof opt onal_map_fus on {
    bool map_fus on = 11;
  }
  // W t r to parallel ze stateless map transformat ons.
  oneof opt onal_map_parallel zat on {
    bool map_parallel zat on = 12;
  }

  // NOTE: f eld  d 13 deleted  n June 2021.
  reserved 13;

  // W t r to el m nate no-op transformat ons.
  oneof opt onal_noop_el m nat on {
    bool noop_el m nat on = 14;
  }
  // W t r to parallel ze copy ng of batch ele nts. T  opt m zat on  s
  // h ghly exper  ntal and can cause performance degradat on (e.g. w n t 
  // parallel zat on over ad exceeds t  benef s of perform ng t  data cop es
  //  n parallel).   should only enable t  opt m zat on  f a) y   nput
  // p pel ne  s bottlenecked on batch ng and b)   have val dated that t 
  // opt m zat on  mproves performance.
  oneof opt onal_parallel_batch {
    bool parallel_batch = 15;
  }
  // F eld  d 16 was removed  n 06/2021.
  reserved 16;
  // W t r to fuse shuffle and repeat transformat ons.
  oneof opt onal_shuffle_and_repeat_fus on {
    bool shuffle_and_repeat_fus on = 17;
  }
}

// next: 3
 ssage Thread ngOpt ons {
  //  f set,   overr des t  max mum degree of  ntra-op parallel sm.
  oneof opt onal_max_ ntra_op_parallel sm {
     nt32 max_ ntra_op_parallel sm = 1;
  }
  //  f set, t  dataset w ll use a pr vate threadpool of t  g ven s ze.
  oneof opt onal_pr vate_threadpool_s ze {
     nt32 pr vate_threadpool_s ze = 2;
  }
}

// Represents how to handle external state dur ng ser al zat on.
enum ExternalStatePol cy {
  POL CY_WARN = 0;
  POL CY_ GNORE = 1;
  POL CY_FA L = 2;
}

//  ssage stored w h Dataset objects to control how datasets are processed and
// opt m zed.
//
// next: 8
 ssage Opt ons {
  // W t r t  outputs need to be produced  n determ n st c order.
  oneof opt onal_determ n st c {
    bool determ n st c = 1;
  }
  // T  d str but on strategy opt ons assoc ated w h t  dataset.
  AutotuneOpt ons autotune_opt ons = 7;
  // T  d str but on strategy opt ons assoc ated w h t  dataset.
  D str buteOpt ons d str bute_opt ons = 2;
  // T  opt m zat on opt ons assoc ated w h t  dataset.
  Opt m zat onOpt ons opt m zat on_opt ons = 3;
  // W t r to  ntroduce 'slack'  n t  last `prefetch` of t   nput p pel ne,
  //  f   ex sts. T  may reduce CPU content on w h accelerator host-s de
  // act v y at t  start of a step. T  slack frequency  s determ ned by t 
  // number of dev ces attac d to t   nput p pel ne.
  oneof opt onal_slack {
    bool slack = 4;
  }
  // T  thread ng opt ons assoc ated w h t  dataset.
  Thread ngOpt ons thread ng_opt ons = 5;
  // T  opt on can be used to overr de t  default pol cy for how to handle
  // external state w n ser al z ng a dataset or c ckpo nt ng  s  erator.
  // T re are three sett ngs ava lable -  GNORE: External state  s  gnored
  // w hout a warn ng; WARN: External state  s  gnored and a warn ng  s logged;
  // FA L: External state results  n an error.
  oneof opt onal_external_state_pol cy {
    ExternalStatePol cy external_state_pol cy = 6;
  }
}
