syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/tensor.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "SummaryProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/summary_go_proto";

//  tadata assoc ated w h a ser es of Summary data
 ssage SummaryDescr pt on {
  // H nt on how plug ns should process t  data  n t  ser es.
  // Supported values  nclude "scalar", " togram", " mage", "aud o"
  str ng type_h nt = 1;
}

// Ser al zat on format for  togram module  n
// core/l b/ togram/ togram.h
 ssage  togramProto {
  double m n = 1;
  double max = 2;
  double num = 3;
  double sum = 4;
  double sum_squares = 5;

  // Parallel arrays encod ng t  bucket boundar es and t  bucket values.
  // bucket( )  s t  count for t  bucket  .  T  range for
  // a bucket  s:
  //     == 0:  -DBL_MAX .. bucket_l m (0)
  //     != 0:  bucket_l m ( -1) .. bucket_l m ( )
  repeated double bucket_l m  = 6 [packed = true];
  repeated double bucket = 7 [packed = true];
}

// A Summary tadata encapsulates  nformat on on wh ch plug ns are able to make
// use of a certa n summary value.
 ssage Summary tadata {
   ssage Plug nData {
    // T  na  of t  plug n t  data perta ns to.
    str ng plug n_na  = 1;

    // T  content to store for t  plug n. T  best pract ce  s for t  to be
    // a b nary ser al zed protocol buffer.
    bytes content = 2;
  }

  // Data that assoc ates a summary w h a certa n plug n.
  Plug nData plug n_data = 1;

  // D splay na  for v ew ng  n TensorBoard.
  str ng d splay_na  = 2;

  // Longform readable descr pt on of t  summary sequence. Markdown supported.
  str ng summary_descr pt on = 3;

  // Class of data stored  n t  t   ser es. Requ red for compat b l y w h
  // TensorBoard's gener c data fac l  es (`DataProv der`, et al.). T  value
  //  mposes constra nts on t  dtype and shape of t  correspond ng tensor
  // values. See `DataClass` docs for deta ls.
  DataClass data_class = 4;
}

enum DataClass {
  // Unknown data class, used ( mpl c ly) for legacy data. W ll not be
  // processed by data  ngest on p pel nes.
  DATA_CLASS_UNKNOWN = 0;
  // Scalar t   ser es. Each `Value` for t  correspond ng tag must have
  // `tensor` set to a rank-0 tensor of type `DT_FLOAT` (float32).
  DATA_CLASS_SCALAR = 1;
  // Tensor t   ser es. Each `Value` for t  correspond ng tag must have
  // `tensor` set. T  tensor value  s arb rary, but should be small to
  // accommodate d rect storage  n database backends: an upper bound of a few
  // k lobytes  s a reasonable rule of thumb.
  DATA_CLASS_TENSOR = 2;
  // Blob sequence t   ser es. Each `Value` for t  correspond ng tag must
  // have `tensor` set to a rank-1 tensor of bytestr ng dtype.
  DATA_CLASS_BLOB_SEQUENCE = 3;
}

// A Summary  s a set of na d values to be d splayed by t 
// v sual zer.
//
// Summar es are produced regularly dur ng tra n ng, as controlled by
// t  "summary_ nterval_secs" attr bute of t  tra n ng operat on.
// Summar es are also produced at t  end of an evaluat on.
 ssage Summary {
   ssage  mage {
    // D  ns ons of t   mage.
     nt32   ght = 1;
     nt32 w dth = 2;
    // Val d colorspace values are
    //   1 - grayscale
    //   2 - grayscale + alpha
    //   3 - RGB
    //   4 - RGBA
    //   5 - D G TAL_YUV
    //   6 - BGRA
     nt32 colorspace = 3;
    //  mage data  n encoded format.  All  mage formats supported by
    //  mage_codec::CoderUt l can be stored  re.
    bytes encoded_ mage_str ng = 4;
  }

   ssage Aud o {
    // Sample rate of t  aud o  n Hz.
    float sample_rate = 1;
    // Number of channels of aud o.
     nt64 num_channels = 2;
    // Length of t  aud o  n fra s (samples per channel).
     nt64 length_fra s = 3;
    // Encoded aud o data and  s assoc ated RFC 2045 content type (e.g.
    // "aud o/wav").
    bytes encoded_aud o_str ng = 4;
    str ng content_type = 5;
  }

   ssage Value {
    // T  f eld  s deprecated and w ll not be set.
    str ng node_na  = 7;

    // Tag na  for t  data. Used by TensorBoard plug ns to organ ze data. Tags
    // are often organ zed by scope (wh ch conta ns slas s to convey
    // h erarchy). For example: foo/bar/0
    str ng tag = 1;

    // Conta ns  tadata on t  summary value such as wh ch plug ns may use  .
    // Take note that many summary values may lack a  tadata f eld. T   s
    // because t  F leWr er only keeps a  tadata object on t  f rst summary
    // value w h a certa n tag for each tag. TensorBoard t n re mbers wh ch
    // tags are assoc ated w h wh ch plug ns. T  saves space.
    Summary tadata  tadata = 9;

    // Value assoc ated w h t  tag.
    oneof value {
      float s mple_value = 2;
      bytes obsolete_old_style_ togram = 3;
       mage  mage = 4;
       togramProto  to = 5;
      Aud o aud o = 6;
      TensorProto tensor = 8;
    }
  }

  // Set of values for t  summary.
  repeated Value value = 1;
}
