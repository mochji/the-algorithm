syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/attr_value.proto";
 mport "tensorflow/core/fra work/node_def.proto";
 mport "tensorflow/core/fra work/op_def.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "Funct onProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/funct on_go_proto";

// A l brary  s a set of na d funct ons.
 ssage Funct onDefL brary {
  repeated Funct onDef funct on = 1;
  repeated Grad entDef grad ent = 2;
  repeated Reg steredGrad ent reg stered_grad ents = 3;
}

// A funct on can be  nstant ated w n t  runt   can b nd every attr
// w h a value. W n a GraphDef has a call to a funct on,   must
// have b nd ng for every attr def ned  n t  s gnature.
//
// TODO(zh fengc):
//   * dev ce spec, etc.
 ssage Funct onDef {
  // T  def n  on of t  funct on's na , argu nts, return values,
  // attrs etc.
  OpDef s gnature = 1;

  // Attr butes spec f c to t  funct on def n  on.
  map<str ng, AttrValue> attr = 5;

  // Attr butes for funct on argu nts. T se attr butes are t  sa  set of
  // val d attr butes as to _Arg nodes.
   ssage ArgAttrs {
    map<str ng, AttrValue> attr = 1;
  }
  map<u nt32, ArgAttrs> arg_attr = 7;

  // Un que  Ds for each res ce argu nt, used to track al as ng res ces.  f
  // Argu nt A and Argu nt B al as each ot r, t n
  // res ce_arg_un que_ ds[A. ndex] == res ce_arg_un que_ ds[B. ndex].
  //
  //  f t  f eld  s empty, none of t  argu nts could al as; ot rw se, every
  // res ce argu nt should have an entry  n t  f eld.
  //
  // W n  nstant ated, t  un que  Ds w ll be attac d to t  _Arg nodes'
  // "_res ce_arg_un que_ d" attr bute.
  map<u nt32, u nt32> res ce_arg_un que_ d = 8;

  // NOTE: f eld  d 2 deleted on Jan 11, 2017, GraphDef vers on 21.
  reserved 2;

  //  n both of t  follow ng f elds, t re  s t  need to spec fy an
  // output that  s used as e  r t   nput to anot r node ( n
  // `node_def`) or as a return value of t  funct on ( n `ret`).
  // Unl ke t  NodeDefs  n GraphDef,   need to be able to spec fy a
  // l st  n so  cases ( nstead of just s ngle outputs).  Also,  
  // need to be able to deal w h l sts of unknown length (so t 
  // output  ndex may not be known at funct on def n  on t  ).  So
  //   use t  follow ng format  nstead:
  // * "fun_ n" w re "fun_ n"  s t  na  of a funct on  nput arg  n
  //   t  `s gnature` f eld above.  T  represents that  nput, w t r
  //      s a s ngle tensor or a l st.
  // * "fun_ n:0" g ves t  f rst ele nt of a funct on  nput arg (a
  //   non-l st  nput  s cons dered a l st of length 1 for t se
  //   purposes).
  // * "node:out" w re "node"  s t  na  of a node  n `node_def` and
  //   "out"  s t  na  one of  s op's output argu nts (t  na 
  //   co s from t  OpDef of t  node's op). T  represents that
  //   node's output, w t r    s a s ngle tensor or a l st.
  //   Note:   enforce that an op's output argu nts are never
  //   rena d  n t  backwards-compat b l y test.
  // * "node:out:0" g ves t  f rst ele nt of a node output arg (a
  //   non-l st output  s cons dered a l st of length 1 for t se
  //   purposes).
  //
  // NOT CURRENTLY SUPPORTED (but may be  n t  future):
  // * "node:out:-1" g ves last ele nt  n a node output l st
  // * "node:out:1:" g ves a l st w h all but t  f rst ele nt  n a
  //   node output l st
  // * "node:out::-1" g ves a l st w h all but t  last ele nt  n a
  //   node output l st

  // T  body of t  funct on.  Unl ke t  NodeDefs  n a GraphDef, attrs
  // may have values of type `placeholder` and t  ` nput` f eld uses
  // t  "output" format above.

  // By convent on, "op"  n node_def  s resolved by consult ng w h a
  // user-def ned l brary f rst.  f not resolved, "func"  s assu d to
  // be a bu lt n op.
  repeated NodeDef node_def = 3;

  // A mapp ng from t  output arg na s from `s gnature` to t 
  // outputs from `node_def` that should be returned by t  funct on.
  map<str ng, str ng> ret = 4;

  // A mapp ng from control output na s from `s gnature` to node na s  n
  // `node_def` wh ch should be control outputs of t  funct on.
  map<str ng, str ng> control_ret = 6;
}

// Grad entDef def nes t  grad ent funct on of a funct on def ned  n
// a funct on l brary.
//
// A grad ent funct on g (spec f ed by grad ent_func) for a funct on f
// (spec f ed by funct on_na ) must follow t  follow ng:
//
// T  funct on 'f' must be a nu r cal funct on wh ch takes N  nputs
// and produces M outputs.  s grad ent funct on 'g', wh ch  s a
// funct on tak ng N + M  nputs and produces N outputs.
//
//  .e.  f   have
//    (y1, y2, ..., y_M) = f(x1, x2, ..., x_N),
// t n, g  s
//    (dL/dx1, dL/dx2, ..., dL/dx_N) = g(x1, x2, ..., x_N,
//                                      dL/dy1, dL/dy2, ..., dL/dy_M),
// w re L  s a scalar-value funct on of (x1, x2, ..., xN) (e.g., t 
// loss funct on). dL/dx_   s t  part al der vat ve of L w h respect
// to x_ .
 ssage Grad entDef {
  str ng funct on_na  = 1;  // T  funct on na .
  str ng grad ent_func = 2;  // T  grad ent funct on's na .
}

// Reg steredGrad ent stores a grad ent funct on that  s reg stered  n t 
// grad ents l brary and used  n t  ops of a funct on  n t  funct on l brary.
// Unl ke Grad entDef, t se grad ents are  dent f ed by op type, and not
// d rectly l nked to any funct on.
 ssage Reg steredGrad ent {
  str ng grad ent_func = 1;       // T  grad ent funct on's na .
  str ng reg stered_op_type = 2;  // T  grad ent funct on's reg stered op type.
}
