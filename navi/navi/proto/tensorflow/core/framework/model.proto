syntax = "proto3";

package tensorflow.data.model;

opt on cc_enable_arenas = true;
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/model_go_proto";

// Class of a node  n t  performance model.
enum NodeClass {
  UNKNOWN = 0;
   NTERLEAVE_MANY = 1;
  ASYNC_ NTERLEAVE_MANY = 2;
  KNOWN_RAT O = 3;
  ASYNC_KNOWN_RAT O = 4;
  UNKNOWN_RAT O = 5;
}

// Algor hm used for model autotun ng opt m zat on.
enum AutotuneAlgor hm {
  DEFAULT = 0;
  H LL_CL MB = 1;
  GRAD ENT_DESCENT = 2;
  MAX_PARALLEL SM = 3;
}

// Protocol buffer represent ng t  data used by t  autotun ng model ng
// fra work.
 ssage ModelProto {
  // General representat on of a node  n t  model.
   ssage Node {
    // Un que node  D.
     nt64  d = 1;

    // Human-readable na  of t  node.
    str ng na  = 2;

    // An  nd cat on w t r autotun ng  s enabled for t  node.
    bool autotune = 3;

    // T  number of bytes stored  n t  node's buffer.
     nt64 buffered_bytes = 4;

    // T  number of ele nts stored  n t  node's buffer.
     nt64 buffered_ele nts = 5;

    // T  number of bytes consu d by t  node.
     nt64 bytes_consu d = 6;

    // T  number of bytes produced by t  node.
     nt64 bytes_produced = 7;

    // T  number of ele nts produced by t  node.
     nt64 num_ele nts = 8;

    // T  aggregate process ng t   spent  n t  node.
     nt64 process ng_t   = 9;

    // An  nd cat on w t r t  node records  tr cs about produced and
    // consu d ele nts.
    bool record_ tr cs = 10;

    // Represents a node para ter.
     ssage Para ter {
      // Human-readable na  of t  para ter.
      str ng na  = 1;

      //  dent f es t  model value of t  para ter. T  can be d fferent from
      // t  actual value (e.g. dur ng opt m zat on search).
      double value = 2;

      // T  actual value of t  para ter.
      double state_value = 3;

      // M n mum value of t  para ter.
      double m n = 4;

      // Max mum value of t  para ter.
      double max = 5;

      //  dent f es w t r t  para ter should part c pate  n autotun ng.
      bool tunable = 6;
    }

    // Para ters of t  node.
    repeated Para ter para ters = 11;

    // Stat st c of  nputs process ng t    tory.
    double  nput_process ng_t  _sum = 12;
     nt64  nput_process ng_t  _count = 13;

    //  Ds of  nputs of t  node.
    repeated  nt64  nputs = 14;

    // Class of t  node.
    NodeClass node_class = 15;

    // Rat o of  nput to output ele nts. T   s only used by KNOWN_RAT O and
    // ASYNC_KNOWN_RAT O nodes.
    double rat o = 16;

    // Rat o  dent f es how many parallel sm calls are  ntroduced by one
    // buffered ele nt. T   s only used by ASYNC_KNOWN_RAT O nodes.
    double  mory_rat o = 17;
  }

  // Map of node  Ds to nodes of t  model.
  map< nt64, Node> nodes = 1;

  //  D of t  output node of t  model.
   nt64 output = 2;

  // Counter for node  Ds of t  model.
   nt64  d_counter = 3;

  reserved 4;

  // Conta ns para ters of t  model autotun ng opt m zat on.
   ssage Opt m zat onParams {
    // Algor hm used for autotun ng opt m zat on.
    AutotuneAlgor hm algor hm = 1;

    // Number of ava lable log cal threads.
     nt64 cpu_budget = 2;

    // Amount of ava lable  mory  n bytes.
     nt64 ram_budget = 3;

    // T   bet en two consecut ve `GetNext` calls to t   erator represented
    // by t  output node.
    double model_ nput_t   = 4;
  }

  Opt m zat onParams opt m zat on_params = 5;
}
