syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/fra work/res ce_handle.proto";
 mport "tensorflow/core/fra work/tensor_shape.proto";
 mport "tensorflow/core/fra work/types.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "TensorProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/tensor_go_proto";

// Protocol buffer represent ng a tensor.
 ssage TensorProto {
  DataType dtype = 1;

  // Shape of t  tensor.  TODO(touts): sort out t  0-rank  ssues.
  TensorShapeProto tensor_shape = 2;

  // Only one of t  representat ons below  s set, one of "tensor_contents" and
  // t  "xxx_val" attr butes.    are not us ng oneof because as oneofs cannot
  // conta n repeated f elds   would requ re anot r extra set of  ssages.

  // Vers on number.
  //
  //  n vers on 0,  f t  "repeated xxx" representat ons conta n only one
  // ele nt, that ele nt  s repeated to f ll t  shape.  T  makes   easy
  // to represent a constant Tensor w h a s ngle value.
   nt32 vers on_number = 3;

  // Ser al zed raw tensor content from e  r Tensor::AsProtoTensorContent or
  //  mcpy  n tensorflow::grpc::EncodeTensorToByteBuffer. T  representat on
  // can be used for all tensor types. T  purpose of t  representat on  s to
  // reduce ser al zat on over ad dur ng RPC call by avo d ng ser al zat on of
  // many repeated small  ems.
  bytes tensor_content = 4;

  // Type spec f c representat ons that make   easy to create tensor protos  n
  // all languages.  Only t  representat on correspond ng to "dtype" can
  // be set.  T  values hold t  flattened representat on of t  tensor  n
  // row major order.

  // DT_HALF, DT_BFLOAT16. Note that s nce protobuf has no  nt16 type,  'll
  // have so  po ntless zero padd ng for each value  re.
  repeated  nt32 half_val = 13 [packed = true];

  // DT_FLOAT.
  repeated float float_val = 5 [packed = true];

  // DT_DOUBLE.
  repeated double double_val = 6 [packed = true];

  // DT_ NT32, DT_ NT16, DT_U NT16, DT_ NT8, DT_U NT8.
  repeated  nt32  nt_val = 7 [packed = true];

  // DT_STR NG
  repeated bytes str ng_val = 8;

  // DT_COMPLEX64. scomplex_val(2* ) and scomplex_val(2* +1) are real
  // and  mag nary parts of  -th s ngle prec s on complex.
  repeated float scomplex_val = 9 [packed = true];

  // DT_ NT64
  repeated  nt64  nt64_val = 10 [packed = true];

  // DT_BOOL
  repeated bool bool_val = 11 [packed = true];

  // DT_COMPLEX128. dcomplex_val(2* ) and dcomplex_val(2* +1) are real
  // and  mag nary parts of  -th double prec s on complex.
  repeated double dcomplex_val = 12 [packed = true];

  // DT_RESOURCE
  repeated Res ceHandleProto res ce_handle_val = 14;

  // DT_VAR ANT
  repeated Var antTensorDataProto var ant_val = 15;

  // DT_U NT32
  repeated u nt32 u nt32_val = 16 [packed = true];

  // DT_U NT64
  repeated u nt64 u nt64_val = 17 [packed = true];
}

// Protocol buffer represent ng t  ser al zat on format of DT_VAR ANT tensors.
 ssage Var antTensorDataProto {
  // Na  of t  type of objects be ng ser al zed.
  str ng type_na  = 1;
  // Port ons of t  object that are not Tensors.
  bytes  tadata = 2;
  // Tensors conta ned w h n objects be ng ser al zed.
  repeated TensorProto tensors = 3;
}
