syntax = "proto3";

package tensorflow;

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "FullTypeProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.fra work";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/fra work/full_type_go_proto";

// Exper  ntal. Represents t  complete type  nformat on of a TensorFlow value.
enum FullType d {
  // T  default represents an un n  al zed values.
  TFT_UNSET = 0;

  // Type symbols. Used to construct more complex type express ons l ke
  // algebra c data types.

  // Type var ables may serve as placeholder for any ot r type  D  n type
  // templates.
  //
  // Examples:
  //   TFT_DATASET[TFT_VAR["T"]]  s a Dataset return ng a type  nd cated by "T".
  //   TFT_TENSOR[TFT_VAR["T"]]  s a Tensor of n ele nt type  nd cated by "T".
  //   TFT_TENSOR[TFT_VAR["T"]], TFT_TENSOR[TFT_VAR["T"]] are two tensors of
  //      dent cal ele nt types.
  //   TFT_TENSOR[TFT_VAR["P"]], TFT_TENSOR[TFT_VAR["Q"]] are two tensors of
  //      ndependent ele nt types.
  //
  TFT_VAR = 1;

  // W ldcard type. Descr bes a para ter of unknown type.  n TensorFlow, that
  // can  an e  r a "Top" type (accepts any type), or a dynam cally typed
  // object whose type  s unknown  n context.
  //  mportant: "unknown" does not necessar ly  an undeterm nable!
  TFT_ANY = 2;

  // T  algebra c product type. T   s an algebra c type that may be used just
  // for log cal group ng. Not to confused w h TFT_TUPLE wh ch descr bes a
  // concrete object of several ele nts.
  //
  // Example:
  //   TFT_DATASET[TFT_PRODUCT[TFT_TENSOR[TFT_ NT32], TFT_TENSOR[TFT_FLOAT64]]]
  //      s a Dataset produc ng two tensors, an  nteger one and a float one.
  //
  TFT_PRODUCT = 3;

  // Represents a na d f eld, w h t  na  stored  n t  attr bute.
  //
  // Para tr zat on:
  //   TFT_NAMED[<type>]{<na >}
  //   * <type>  s t  type of t  f eld
  //   * <na >  s t  f eld na , as str ng (thpugh can t oret cally be an  nt
  //     as  ll)
  //
  // Example:
  //   TFT_RECORD[
  //     TFT_NAMED[TFT_TENSOR[TFT_ NT32]]{'foo'},
  //     TFT_NAMED[TFT_TENSOR[TFT_FLOAT32]]{'bar'},
  //   ]
  //      s a structure w h two f elds, an  nt tensor "foo" and a float tensor
  //     "bar".
  TFT_NAMED = 4;

  // Template def n  on. Expands t  var ables by repeat ng a template as
  // argu nts of conta ner.
  //
  // Para tr zat on:
  //   TFT_FOR_EACH[<conta ner_type>, <template>, <expans ons>]
  //   * <conta ner_type>  s t  type of t  conta ner that t  template w ll be
  //     expanded  nto
  //   * <template>  s any type def n  on that potent ally conta ns type
  //     var ables
  //   * <expans ons>  s a TFT_VAR and may  nclude more types  n t  future
  //
  // Example:
  //   TFT_FOR_EACH[
  //         TFT_PRODUCT,
  //         TFT_TENSOR[TFT_VAR["t"]],
  //         TFT_VAR["t"]
  //     ]
  //     w ll subst ute a T = TFT_ NT32 to TFT_PRODUCT[TFT_TENSOR[TFT_ NT32]]
  //     and a T = (TFT_ NT32, TFT_ NT64) to
  //     TFT_PRODUCT[TFT_TENSOR[TFT_ NT32], TFT_TENSOR[TFT_ NT64]].
  TFT_FOR_EACH = 20;

  // Callable types descr be funct ons and ops.
  //
  // Para tr zat on:
  //   TFT_CALLABLE[<arg type>, <return type>]
  //   * <arg type>  s t  type of t  argu nts; TFT_PRODUCT represents
  //   mult ple
  //     argu nts.
  //   * <return type>  s t  return type; TFT_PRODUCT represents mult ple
  //     return values (that  ans that callables return ng mult ple th ngs
  //     don't necessar ly return a s ngle tuple).
  //
  // Example:
  //   TFT_CALLABLE[
  //     TFT_ANY,
  //     TFT_PRODUCT[TFT_TENSOR[TFT_ NT32], TFT_TENSOR[TFT_FLOAT64]],
  //   ]
  //      s a callable w h unspec f ed (for now)  nput argu nts, and
  //     two return values of type tensor.
  //
  TFT_CALLABLE = 100;

  // Concrete type  Ds, represent ng "proper" data types that can descr be
  // runt   TensorFlow objects.

  // T  usual Tensor. T   s a para tr c type.
  //
  // Para tr zat on:
  //   TFT_TENSOR[<ele nt type>, <shape type>]
  //   * <ele nt type>  s currently l m ed to one of t  ele nt types
  //     def ned below.
  //   * <shape type>  s not yet def ned, and may only be TFT_UNKNOWN for now.
  //
  // A TFT_SHAPE type w ll be def ned  n t  future.
  //
  // Example:
  //   TFT_TENSOR[TFT_ NT32, TFT_UNKNOWN]
  //      s a Tensor of  nt32 ele nt type and unknown shape.
  //
  // TODO(mdan): Def ne TFT_SHAPE and add more examples.
  TFT_TENSOR = 1000;

  // Array (or tensorflow::TensorL st  n t  var ant type reg stry).
  // Note: t   s not to be confused w h t  deprecated `TensorArray*` ops
  // wh ch are not supported by FullType.
  // T  type represents a random-access l st whose ele nts can be
  // descr bed by a s ngle type. Although  mmutable, Array  s expected to
  // support eff c ent mutat on semant cs ( .e. ele nt update)  n t 
  // user-fac ng AP .
  // T  ele nt type may be gener c or even TFT_ANY for a  terogenous l st.
  //
  // Para tr zat on:
  //   TFT_ARRAY[<ele nt type>]
  //   * <ele nt type> may be any concrete type.
  //
  // Examples:
  //   TFT_ARRAY[TFT_TENSOR[TFT_ NT32]]  s a TensorArray hold ng  nt32 Tensors
  //     of any shape.
  //   TFT_ARRAY[TFT_TENSOR[TFT_UNKNOWN]]  s a TensorArray hold ng Tensors of
  //     m xed ele nt types.
  //   TFT_ARRAY[TFT_UNKNOWN]  s a TensorArray hold ng any ele nt type.
  //   TFT_ARRAY[]  s equ valent to TFT_ARRAY[TFT_UNKNOWN].
  //   TFT_ARRAY[TFT_ARRAY[]]  s an array or arrays (of unknown types).
  TFT_ARRAY = 1001;

  // Opt onal (or tensorflow::Opt onalVar ant  n t  var ant type reg stry).
  // T  type represents a value that may e  r hold an ele nt of a s ngle
  // spec f ed type, or noth ng at all.
  //
  // Para tr zat on:
  //   TFT_OPT ONAL[<ele nt type>]
  //   * <ele nt type> may be any concrete type.
  //
  // Examples:
  //   TFT_OPT ONAL[TFT_TENSOR[TFT_ NT32]]  s an Opt onal hold ng an  nt32
  //     Tensor of any shape.
  TFT_OPT ONAL = 1002;

  // L eral types descr be comp le-t   constant values.
  // L eral types may also part c pate  n dependent types.
  //
  // Para tr zat on:
  //   TFT_L TERAL[<value type>]{<value>}
  //   * <value type> may be any concrete type compat ble that can hold <value>
  //   * <value>  s t  type's attr bute, and holds t  actual l eral value
  //
  // Examples:
  //   TFT_L TERAL[TFT_ NT32]{1}  s t  comp le-t   constant 1.
  TFT_L TERAL = 1003;

  // Type attr butes. T se always appear  n t  para tr zat on of a type,
  // never alone. For example, t re  s no such th ng as a "bool" TensorFlow
  // object (for now).

  // T  bool ele nt type.
  // TODO(mdan): Quant zed types, legacy representat ons (e.g. ref)
  TFT_BOOL = 200;
  //  nteger ele nt types.
  TFT_U NT8 = 201;
  TFT_U NT16 = 202;
  TFT_U NT32 = 203;
  TFT_U NT64 = 204;
  TFT_ NT8 = 205;
  TFT_ NT16 = 206;
  TFT_ NT32 = 207;
  TFT_ NT64 = 208;
  // Float ng-po nt ele nt types.
  TFT_HALF = 209;
  TFT_FLOAT = 210;
  TFT_DOUBLE = 211;
  TFT_BFLOAT16 = 215;
  // Complex ele nt types.
  // TODO(mdan): Represent as TFT_COMPLEX[TFT_DOUBLE]  nstead?
  TFT_COMPLEX64 = 212;
  TFT_COMPLEX128 = 213;
  // T  str ng ele nt type.
  TFT_STR NG = 214;

  // Ot r types that   don't know yet w t r t y w ll beco  part of t 
  // core type system or be cons sdered th rd-party (and consequently moved to
  // user-def ned type  chan sms). Presently, t y are effect vely  n t  core
  // type system, because key comp lat on passes l ke Placer account for t  r
  // ex stence.

  // Datasets created by tf.data ops and AP s. Datasets have generator/ erable
  // semant cs, that  s, one can construct an  erator from t m. L ke
  // Array, t y are cons dered to return ele nts that can be descr bed
  // by a s ngle type. Unl ke Array, t y do not support random access or
  // mutat on, and can potent ally produce an  nf n e number of ele nts.
  // A datasets can produce log cal structures (e.g. mult ple ele nts). T 
  //  s expressed us ng TFT_PRODUCT.
  //
  //
  // Para tr zat on: TFT_ARRAY[<ele nt type>].
  //   * <ele nt type> may be a concrete type or a type symbol.   represents
  //     t  data type of t  ele nts produced by t  dataset.
  //
  // Examples:
  //   TFT_DATSET[TFT_TENSOR[TFT_ NT32]]  s a Dataset produc ng s ngle  nt32
  //     Tensors of unknown shape.
  //   TFT_DATSET[TFT_PRODUCT[TFT_TENSOR[TFT_ NT32], TFT_TENSOR[TFT_FLOAT32]]  s
  //     a Dataset produc ng pa rs of Tensors, one  nteger and one float.
  // Note: T  h gh  D number  s to prepare for t  eventual y that Datasets
  // w ll be supported by user types  n t  future.
  TFT_DATASET = 10102;

  // A ragged tensor created by tf.ragged ops and AP s.
  //
  // Para tr zat on: TFT_RAGGED[<ele nt_type>].
  TFT_RAGGED = 10103;

  // A mutex lock tensor, produced by tf.raw_ops.MutexLock.
  // Unl ke str ct execut on models, w re ownersh p of a lock  s denoted by
  // "runn ng after t  lock has been acqu red",  n non-str ct mode, lock
  // ownersh p  s  n t  true sense: "t  op argu nt represent ng t  lock  s
  // ava lable".
  // Mutex locks are t  dynam c counterpart of control dependenc es.
  // TODO(mdan): Properly docu nt t  th ng.
  //
  // Para tr zat on: TFT_MUTEX_LOCK[].
  TFT_MUTEX_LOCK = 10202;

  // T  equ valent of a Tensor w h DT_VAR ANT dtype, kept  re to s mpl fy
  // translat on. T  type should not normally appear after type  nference.
  // Note that LEGACY_VAR ANT != ANY: TENSOR[ NT32]  s a subtype of ANY, but  s
  // not a subtype of LEGACY_VAR ANT.
  TFT_LEGACY_VAR ANT = 10203;
}

// H ghly exper  ntal and very l kely to change.
// T  encod ng uses tags  nstead of ded cated  ssages for regular y.  n
// part cular t  encod ng  mposes no restr ct ons on what t  para ters of any
// type should be, wh ch  n part cular needs to be true for type symbols.
 ssage FullTypeDef {
  // T  pr nc pal type represented by t  object. T  may be a concrete type
  // (Tensor, Dataset) a type var able (used for dependent types) a type
  // symbol (Any, Un on). See FullType d for deta ls.
  FullType d type_ d = 1;

  repeated FullTypeDef args = 2;

  // L eral values of t  type object,  f t  t  type adm s one.
  // For example, a type var able adm s a str ng attr bute -  s na .
  // Shape-related types may adm   nt attr butes - t  r stat c shape values.
  // F elds for more data types to be added as needed.
  oneof attr {
    str ng s = 3;
     nt64   = 4;
    // TODO(mdan): l st/tensor, map? Need to reconc le w h TFT_RECORD, etc.
  }
}
