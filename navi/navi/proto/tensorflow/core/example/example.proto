// Protocol  ssages for descr b ng  nput data Examples for mach ne learn ng
// model tra n ng or  nference.
syntax = "proto3";

package tensorflow;

 mport "tensorflow/core/example/feature.proto";

opt on cc_enable_arenas = true;
opt on java_outer_classna  = "ExampleProtos";
opt on java_mult ple_f les = true;
opt on java_package = "org.tensorflow.example";
opt on go_package = "g hub.com/tensorflow/tensorflow/tensorflow/go/core/example";

// L NT. fChange
// An Example  s a mostly-normal zed data format for stor ng data for
// tra n ng and  nference.    conta ns a key-value store (features); w re
// each key (str ng) maps to a Feature  ssage (wh ch  s oneof packed BytesL st,
// FloatL st, or  nt64L st).  T  flex ble and compact format allows t 
// storage of large amounts of typed data, but requ res that t  data shape
// and use be determ ned by t  conf gurat on f les and parsers that are used to
// read and wr e t  format.  That  s, t  Example  s mostly *not* a
// self-descr b ng format.   n TensorFlow, Examples are read  n row-major
// format, so any conf gurat on that descr bes data w h rank-2 or above
// should keep t   n m nd.  For example, to store an M x N matr x of Bytes,
// t  BytesL st must conta n M*N bytes, w h M rows of N cont guous values
// each.  That  s, t  BytesL st value must store t  matr x as:
//     .... row 0 .... .... row 1 .... // ...........  // ... row M-1 ....
//
// An Example for a mov e recom ndat on appl cat on:
//   features {
//     feature {
//       key: "age"
//       value { float_l st {
//         value: 29.0
//       }}
//     }
//     feature {
//       key: "mov e"
//       value { bytes_l st {
//         value: "T  Shawshank Redempt on"
//         value: "F ght Club"
//       }}
//     }
//     feature {
//       key: "mov e_rat ngs"
//       value { float_l st {
//         value: 9.0
//         value: 9.7
//       }}
//     }
//     feature {
//       key: "suggest on"
//       value { bytes_l st {
//         value: " ncept on"
//       }}
//     }
//     # Note that t  feature ex sts to be used as a label  n tra n ng.
//     # E.g.,  f tra n ng a log st c regress on model to pred ct purchase
//     # probab l y  n   learn ng tool   would set t  label feature to
//     # "suggest on_purchased".
//     feature {
//       key: "suggest on_purchased"
//       value { float_l st {
//         value: 1.0
//       }}
//     }
//     # S m lar to "suggest on_purchased" above t  feature ex sts to be used
//     # as a label  n tra n ng.
//     # E.g.,  f tra n ng a l near regress on model to pred ct purchase
//     # pr ce  n   learn ng tool   would set t  label feature to
//     # "purchase_pr ce".
//     feature {
//       key: "purchase_pr ce"
//       value { float_l st {
//         value: 9.99
//       }}
//     }
//  }
//
// A conformant Example data set obeys t  follow ng convent ons:
//   -  f a Feature K ex sts  n one example w h data type T,   must be of
//       type T  n all ot r examples w n present.   may be om ted.
//   - T  number of  nstances of Feature K l st data may vary across examples,
//       depend ng on t  requ re nts of t  model.
//   -  f a Feature K doesn't ex st  n an example, a K-spec f c default w ll be
//       used,  f conf gured.
//   -  f a Feature K ex sts  n an example but conta ns no  ems, t   ntent
//        s cons dered to be an empty tensor and no default w ll be used.

 ssage Example {
  Features features = 1;
}

// A SequenceExample  s an Example represent ng one or more sequences, and
// so  context.  T  context conta ns features wh ch apply to t  ent re
// example. T  feature_l sts conta n a key, value map w re each key  s
// assoc ated w h a repeated set of Features (a FeatureL st).
// A FeatureL st thus represents t  values of a feature  dent f ed by  s key
// over t   / fra s.
//
// Below  s a SequenceExample for a mov e recom ndat on appl cat on record ng a
// sequence of rat ngs by a user. T  t  - ndependent features ("locale",
// "age", "favor es") descr b ng t  user are part of t  context. T  sequence
// of mov es t  user rated are part of t  feature_l sts. For each mov e  n t 
// sequence   have  nformat on on  s na  and actors and t  user's rat ng.
// T   nformat on  s recorded  n three separate feature_l st(s).
//  n t  example below t re are only two mov es. All three feature_l st(s),
// na ly "mov e_rat ngs", "mov e_na s", and "actors" have a feature value for
// both mov es. Note, that "actors"  s  self a bytes_l st w h mult ple
// str ngs per mov e.
//
// context: {
//   feature: {
//     key  : "locale"
//     value: {
//       bytes_l st: {
//         value: [ "pt_BR" ]
//       }
//     }
//   }
//   feature: {
//     key  : "age"
//     value: {
//       float_l st: {
//         value: [ 19.0 ]
//       }
//     }
//   }
//   feature: {
//     key  : "favor es"
//     value: {
//       bytes_l st: {
//         value: [ "Majesty Rose", "Savannah Outen", "One D rect on" ]
//       }
//     }
//   }
// }
// feature_l sts: {
//   feature_l st: {
//     key  : "mov e_rat ngs"
//     value: {
//       feature: {
//         float_l st: {
//           value: [ 4.5 ]
//         }
//       }
//       feature: {
//         float_l st: {
//           value: [ 5.0 ]
//         }
//       }
//     }
//   }
//   feature_l st: {
//     key  : "mov e_na s"
//     value: {
//       feature: {
//         bytes_l st: {
//           value: [ "T  Shawshank Redempt on" ]
//         }
//       }
//       feature: {
//         bytes_l st: {
//           value: [ "F ght Club" ]
//         }
//       }
//     }
//   }
//   feature_l st: {
//     key  : "actors"
//     value: {
//       feature: {
//         bytes_l st: {
//           value: [ "T m Robb ns", "Morgan Freeman" ]
//         }
//       }
//       feature: {
//         bytes_l st: {
//           value: [ "Brad P t", "Edward Norton", " lena Bonham Carter" ]
//         }
//       }
//     }
//   }
// }
//
// A conformant SequenceExample data set obeys t  follow ng convent ons:
//
// Context:
//   - All conformant context features K must obey t  sa  convent ons as
//     a conformant Example's features (see above).
// Feature l sts:
//   - A FeatureL st L may be m ss ng  n an example;    s up to t 
//     parser conf gurat on to determ ne  f t   s allo d or cons dered
//     an empty l st (zero length).
//   -  f a FeatureL st L ex sts,   may be empty (zero length).
//   -  f a FeatureL st L  s non-empty, all features w h n t  FeatureL st
//     must have t  sa  data type T. Even across SequenceExamples, t  type T
//     of t  FeatureL st  dent f ed by t  sa  key must be t  sa . An entry
//     w hout any values may serve as an empty feature.
//   -  f a FeatureL st L  s non-empty,    s up to t  parser conf gurat on
//     to determ ne  f all features w h n t  FeatureL st must
//     have t  sa  s ze.  T  sa  holds for t  FeatureL st across mult ple
//     examples.
//   - For sequence model ng, e.g.:
//        http://colah.g hub. o/posts/2015-08-Understand ng-LSTMs/
//        https://g hub.com/tensorflow/nmt
//     t  feature l sts represent a sequence of fra s.
//      n t  scenar o, all FeatureL sts  n a SequenceExample have t  sa 
//     number of Feature  ssages, so that t   h ele nt  n each FeatureL st
//      s part of t   h fra  (or t   step).
// Examples of conformant and non-conformant examples' FeatureL sts:
//
// Conformant FeatureL sts:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
//
// Non-conformant FeatureL sts (m smatc d types):
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: {  nt64_l st: { value: [ 5 ] } } }
//    } }
//
// Cond  onally conformant FeatureL sts, t  parser conf gurat on determ nes
//  f t  feature s zes must match:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0, 6.0 ] } } }
//    } }
//
// Conformant pa r of SequenceExample
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
// and:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } }
//               feature: { float_l st: { value: [ 2.0 ] } } }
//    } }
//
// Conformant pa r of SequenceExample
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
// and:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { }
//    } }
//
// Cond  onally conformant pa r of SequenceExample, t  parser conf gurat on
// determ nes  f t  second feature_l sts  s cons stent (zero-length) or
//  nval d (m ss ng "mov e_rat ngs"):
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
// and:
//    feature_l sts: { }
//
// Non-conformant pa r of SequenceExample (m smatc d types)
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
// and:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: {  nt64_l st: { value: [ 4 ] } }
//               feature: {  nt64_l st: { value: [ 5 ] } }
//               feature: {  nt64_l st: { value: [ 2 ] } } }
//    } }
//
// Cond  onally conformant pa r of SequenceExample; t  parser conf gurat on
// determ nes  f t  feature s zes must match:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.5 ] } }
//               feature: { float_l st: { value: [ 5.0 ] } } }
//    } }
// and:
//    feature_l sts: { feature_l st: {
//      key: "mov e_rat ngs"
//      value: { feature: { float_l st: { value: [ 4.0 ] } }
//               feature: { float_l st: { value: [ 5.0, 3.0 ] } }
//    } }

 ssage SequenceExample {
  Features context = 1;
  FeatureL sts feature_l sts = 2;
}
// L NT.T nChange(
//     https://www.tensorflow.org/code/tensorflow/python/tra n ng/tra n ng.py)
