/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class floatArray {
  pr vate trans ent long sw gCPtr;
  protected trans ent boolean sw gC mOwn;

  protected floatArray(long cPtr, boolean c moryOwn) {
    sw gC mOwn = c moryOwn;
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr(floatArray obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_floatArray(sw gCPtr);
      }
      sw gCPtr = 0;
    }
  }

  publ c floatArray( nt nele nts) {
    t (sw gfa ssJN .new_floatArray(nele nts), true);
  }

  publ c float get em( nt  ndex) {
    return sw gfa ssJN .floatArray_get em(sw gCPtr, t ,  ndex);
  }

  publ c vo d set em( nt  ndex, float value) {
    sw gfa ssJN .floatArray_set em(sw gCPtr, t ,  ndex, value);
  }

  publ c SW GTYPE_p_float cast() {
    long cPtr = sw gfa ssJN .floatArray_cast(sw gCPtr, t );
    return (cPtr == 0) ? null : new SW GTYPE_p_float(cPtr, false);
  }

  publ c stat c floatArray frompo nter(SW GTYPE_p_float t) {
    long cPtr = sw gfa ssJN .floatArray_frompo nter(SW GTYPE_p_float.getCPtr(t));
    return (cPtr == 0) ? null : new floatArray(cPtr, false);
  }

}
