/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndex VF extends  ndex {
  pr vate trans ent long sw gCPtr;

  protected  ndex VF(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . ndex VF_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndex VF obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndex VF(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d set nvl sts( nvertedL sts value) {
    sw gfa ssJN . ndex VF_ nvl sts_set(sw gCPtr, t ,  nvertedL sts.getCPtr(value), value);
  }

  publ c  nvertedL sts get nvl sts() {
    long cPtr = sw gfa ssJN . ndex VF_ nvl sts_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new  nvertedL sts(cPtr, false);
  }

  publ c vo d setOwn_ nvl sts(boolean value) {
    sw gfa ssJN . ndex VF_own_ nvl sts_set(sw gCPtr, t , value);
  }

  publ c boolean getOwn_ nvl sts() {
    return sw gfa ssJN . ndex VF_own_ nvl sts_get(sw gCPtr, t );
  }

  publ c vo d setCode_s ze(long value) {
    sw gfa ssJN . ndex VF_code_s ze_set(sw gCPtr, t , value);
  }

  publ c long getCode_s ze() {
    return sw gfa ssJN . ndex VF_code_s ze_get(sw gCPtr, t );
  }

  publ c vo d setNprobe(long value) {
    sw gfa ssJN . ndex VF_nprobe_set(sw gCPtr, t , value);
  }

  publ c long getNprobe() {
    return sw gfa ssJN . ndex VF_nprobe_get(sw gCPtr, t );
  }

  publ c vo d setMax_codes(long value) {
    sw gfa ssJN . ndex VF_max_codes_set(sw gCPtr, t , value);
  }

  publ c long getMax_codes() {
    return sw gfa ssJN . ndex VF_max_codes_get(sw gCPtr, t );
  }

  publ c vo d setParallel_mode( nt value) {
    sw gfa ssJN . ndex VF_parallel_mode_set(sw gCPtr, t , value);
  }

  publ c  nt getParallel_mode() {
    return sw gfa ssJN . ndex VF_parallel_mode_get(sw gCPtr, t );
  }

  publ c  nt getPARALLEL_MODE_NO_HEAP_ N T() {
    return sw gfa ssJN . ndex VF_PARALLEL_MODE_NO_HEAP_ N T_get(sw gCPtr, t );
  }

  publ c vo d setD rect_map(SW GTYPE_p_D rectMap value) {
    sw gfa ssJN . ndex VF_d rect_map_set(sw gCPtr, t , SW GTYPE_p_D rectMap.getCPtr(value));
  }

  publ c SW GTYPE_p_D rectMap getD rect_map() {
    return new SW GTYPE_p_D rectMap(sw gfa ssJN . ndex VF_d rect_map_get(sw gCPtr, t ), true);
  }

  publ c vo d reset() {
    sw gfa ssJN . ndex VF_reset(sw gCPtr, t );
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndex VF_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d add(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndex VF_add(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d add_w h_ ds(long n, SW GTYPE_p_float x, LongVector x ds) {
    sw gfa ssJN . ndex VF_add_w h_ ds(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(x ds.data()), x ds);
  }

  publ c vo d add_core(long n, SW GTYPE_p_float x, LongVector x ds, LongVector precomputed_ dx) {
    sw gfa ssJN . ndex VF_add_core(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(x ds.data()), x ds, SW GTYPE_p_long_long.getCPtr(precomputed_ dx.data()), precomputed_ dx);
  }

  publ c vo d encode_vectors(long n, SW GTYPE_p_float x, LongVector l st_nos, SW GTYPE_p_uns gned_char codes, boolean  nclude_l stno) {
    sw gfa ssJN . ndex VF_encode_vectors__SW G_0(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(l st_nos.data()), l st_nos, SW GTYPE_p_uns gned_char.getCPtr(codes),  nclude_l stno);
  }

  publ c vo d encode_vectors(long n, SW GTYPE_p_float x, LongVector l st_nos, SW GTYPE_p_uns gned_char codes) {
    sw gfa ssJN . ndex VF_encode_vectors__SW G_1(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(l st_nos.data()), l st_nos, SW GTYPE_p_uns gned_char.getCPtr(codes));
  }

  publ c vo d add_sa_codes(long n, SW GTYPE_p_uns gned_char codes, LongVector x ds) {
    sw gfa ssJN . ndex VF_add_sa_codes(sw gCPtr, t , n, SW GTYPE_p_uns gned_char.getCPtr(codes), SW GTYPE_p_long_long.getCPtr(x ds.data()), x ds);
  }

  publ c vo d tra n_res dual(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndex VF_tra n_res dual(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d search_preass gned(long n, SW GTYPE_p_float x, long k, LongVector ass gn, SW GTYPE_p_float centro d_d s, SW GTYPE_p_float d stances, LongVector labels, boolean store_pa rs,  VFSearchPara ters params,  ndex VFStats stats) {
    sw gfa ssJN . ndex VF_search_preass gned__SW G_0(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_long_long.getCPtr(ass gn.data()), ass gn, SW GTYPE_p_float.getCPtr(centro d_d s), SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels, store_pa rs,  VFSearchPara ters.getCPtr(params), params,  ndex VFStats.getCPtr(stats), stats);
  }

  publ c vo d search_preass gned(long n, SW GTYPE_p_float x, long k, LongVector ass gn, SW GTYPE_p_float centro d_d s, SW GTYPE_p_float d stances, LongVector labels, boolean store_pa rs,  VFSearchPara ters params) {
    sw gfa ssJN . ndex VF_search_preass gned__SW G_1(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_long_long.getCPtr(ass gn.data()), ass gn, SW GTYPE_p_float.getCPtr(centro d_d s), SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels, store_pa rs,  VFSearchPara ters.getCPtr(params), params);
  }

  publ c vo d search_preass gned(long n, SW GTYPE_p_float x, long k, LongVector ass gn, SW GTYPE_p_float centro d_d s, SW GTYPE_p_float d stances, LongVector labels, boolean store_pa rs) {
    sw gfa ssJN . ndex VF_search_preass gned__SW G_2(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_long_long.getCPtr(ass gn.data()), ass gn, SW GTYPE_p_float.getCPtr(centro d_d s), SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels, store_pa rs);
  }

  publ c vo d search(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndex VF_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c vo d range_search(long n, SW GTYPE_p_float x, float rad us, RangeSearchResult result) {
    sw gfa ssJN . ndex VF_range_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), rad us, RangeSearchResult.getCPtr(result), result);
  }

  publ c vo d range_search_preass gned(long nx, SW GTYPE_p_float x, float rad us, LongVector keys, SW GTYPE_p_float coarse_d s, RangeSearchResult result, boolean store_pa rs,  VFSearchPara ters params,  ndex VFStats stats) {
    sw gfa ssJN . ndex VF_range_search_preass gned__SW G_0(sw gCPtr, t , nx, SW GTYPE_p_float.getCPtr(x), rad us, SW GTYPE_p_long_long.getCPtr(keys.data()), keys, SW GTYPE_p_float.getCPtr(coarse_d s), RangeSearchResult.getCPtr(result), result, store_pa rs,  VFSearchPara ters.getCPtr(params), params,  ndex VFStats.getCPtr(stats), stats);
  }

  publ c vo d range_search_preass gned(long nx, SW GTYPE_p_float x, float rad us, LongVector keys, SW GTYPE_p_float coarse_d s, RangeSearchResult result, boolean store_pa rs,  VFSearchPara ters params) {
    sw gfa ssJN . ndex VF_range_search_preass gned__SW G_1(sw gCPtr, t , nx, SW GTYPE_p_float.getCPtr(x), rad us, SW GTYPE_p_long_long.getCPtr(keys.data()), keys, SW GTYPE_p_float.getCPtr(coarse_d s), RangeSearchResult.getCPtr(result), result, store_pa rs,  VFSearchPara ters.getCPtr(params), params);
  }

  publ c vo d range_search_preass gned(long nx, SW GTYPE_p_float x, float rad us, LongVector keys, SW GTYPE_p_float coarse_d s, RangeSearchResult result, boolean store_pa rs) {
    sw gfa ssJN . ndex VF_range_search_preass gned__SW G_2(sw gCPtr, t , nx, SW GTYPE_p_float.getCPtr(x), rad us, SW GTYPE_p_long_long.getCPtr(keys.data()), keys, SW GTYPE_p_float.getCPtr(coarse_d s), RangeSearchResult.getCPtr(result), result, store_pa rs);
  }

  publ c vo d range_search_preass gned(long nx, SW GTYPE_p_float x, float rad us, LongVector keys, SW GTYPE_p_float coarse_d s, RangeSearchResult result) {
    sw gfa ssJN . ndex VF_range_search_preass gned__SW G_3(sw gCPtr, t , nx, SW GTYPE_p_float.getCPtr(x), rad us, SW GTYPE_p_long_long.getCPtr(keys.data()), keys, SW GTYPE_p_float.getCPtr(coarse_d s), RangeSearchResult.getCPtr(result), result);
  }

  publ c SW GTYPE_p_fa ss__ nvertedL stScanner get_ nvertedL stScanner(boolean store_pa rs) {
    long cPtr = sw gfa ssJN . ndex VF_get_ nvertedL stScanner__SW G_0(sw gCPtr, t , store_pa rs);
    return (cPtr == 0) ? null : new SW GTYPE_p_fa ss__ nvertedL stScanner(cPtr, false);
  }

  publ c SW GTYPE_p_fa ss__ nvertedL stScanner get_ nvertedL stScanner() {
    long cPtr = sw gfa ssJN . ndex VF_get_ nvertedL stScanner__SW G_1(sw gCPtr, t );
    return (cPtr == 0) ? null : new SW GTYPE_p_fa ss__ nvertedL stScanner(cPtr, false);
  }

  publ c vo d reconstruct(long key, SW GTYPE_p_float recons) {
    sw gfa ssJN . ndex VF_reconstruct(sw gCPtr, t , key, SW GTYPE_p_float.getCPtr(recons));
  }

  publ c vo d update_vectors( nt nv, LongVector  dx, SW GTYPE_p_float v) {
    sw gfa ssJN . ndex VF_update_vectors(sw gCPtr, t , nv, SW GTYPE_p_long_long.getCPtr( dx.data()),  dx, SW GTYPE_p_float.getCPtr(v));
  }

  publ c vo d reconstruct_n(long  0, long n , SW GTYPE_p_float recons) {
    sw gfa ssJN . ndex VF_reconstruct_n(sw gCPtr, t ,  0, n , SW GTYPE_p_float.getCPtr(recons));
  }

  publ c vo d search_and_reconstruct(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels, SW GTYPE_p_float recons) {
    sw gfa ssJN . ndex VF_search_and_reconstruct(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels, SW GTYPE_p_float.getCPtr(recons));
  }

  publ c vo d reconstruct_from_offset(long l st_no, long offset, SW GTYPE_p_float recons) {
    sw gfa ssJN . ndex VF_reconstruct_from_offset(sw gCPtr, t , l st_no, offset, SW GTYPE_p_float.getCPtr(recons));
  }

  publ c long remove_ ds( DSelector sel) {
    return sw gfa ssJN . ndex VF_remove_ ds(sw gCPtr, t ,  DSelector.getCPtr(sel), sel);
  }

  publ c vo d c ck_compat ble_for_ rge( ndex VF ot r) {
    sw gfa ssJN . ndex VF_c ck_compat ble_for_ rge(sw gCPtr, t ,  ndex VF.getCPtr(ot r), ot r);
  }

  publ c vo d  rge_from( ndex VF ot r, long add_ d) {
    sw gfa ssJN . ndex VF_ rge_from(sw gCPtr, t ,  ndex VF.getCPtr(ot r), ot r, add_ d);
  }

  publ c vo d copy_subset_to( ndex VF ot r,  nt subset_type, long a1, long a2) {
    sw gfa ssJN . ndex VF_copy_subset_to(sw gCPtr, t ,  ndex VF.getCPtr(ot r), ot r, subset_type, a1, a2);
  }

  publ c long get_l st_s ze(long l st_no) {
    return sw gfa ssJN . ndex VF_get_l st_s ze(sw gCPtr, t , l st_no);
  }

  publ c vo d make_d rect_map(boolean new_ma nta n_d rect_map) {
    sw gfa ssJN . ndex VF_make_d rect_map__SW G_0(sw gCPtr, t , new_ma nta n_d rect_map);
  }

  publ c vo d make_d rect_map() {
    sw gfa ssJN . ndex VF_make_d rect_map__SW G_1(sw gCPtr, t );
  }

  publ c vo d set_d rect_map_type(SW GTYPE_p_D rectMap__Type type) {
    sw gfa ssJN . ndex VF_set_d rect_map_type(sw gCPtr, t , SW GTYPE_p_D rectMap__Type.getCPtr(type));
  }

  publ c vo d replace_ nvl sts( nvertedL sts  l, boolean own) {
    sw gfa ssJN . ndex VF_replace_ nvl sts__SW G_0(sw gCPtr, t ,  nvertedL sts.getCPtr( l),  l, own);
  }

  publ c vo d replace_ nvl sts( nvertedL sts  l) {
    sw gfa ssJN . ndex VF_replace_ nvl sts__SW G_1(sw gCPtr, t ,  nvertedL sts.getCPtr( l),  l);
  }

  publ c long sa_code_s ze() {
    return sw gfa ssJN . ndex VF_sa_code_s ze(sw gCPtr, t );
  }

  publ c vo d sa_encode(long n, SW GTYPE_p_float x, SW GTYPE_p_uns gned_char bytes) {
    sw gfa ssJN . ndex VF_sa_encode(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_uns gned_char.getCPtr(bytes));
  }

}
