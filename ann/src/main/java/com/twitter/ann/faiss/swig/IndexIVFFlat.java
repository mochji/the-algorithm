/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndex VFFlat extends  ndex VF {
  pr vate trans ent long sw gCPtr;

  protected  ndex VFFlat(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . ndex VFFlat_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndex VFFlat obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndex VFFlat(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c  ndex VFFlat( ndex quant zer, long d, long nl st_,  tr cType arg3) {
    t (sw gfa ssJN .new_ ndex VFFlat__SW G_0( ndex.getCPtr(quant zer), quant zer, d, nl st_, arg3.sw gValue()), true);
  }

  publ c  ndex VFFlat( ndex quant zer, long d, long nl st_) {
    t (sw gfa ssJN .new_ ndex VFFlat__SW G_1( ndex.getCPtr(quant zer), quant zer, d, nl st_), true);
  }

  publ c vo d add_core(long n, SW GTYPE_p_float x, LongVector x ds, LongVector precomputed_ dx) {
    sw gfa ssJN . ndex VFFlat_add_core(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(x ds.data()), x ds, SW GTYPE_p_long_long.getCPtr(precomputed_ dx.data()), precomputed_ dx);
  }

  publ c vo d encode_vectors(long n, SW GTYPE_p_float x, LongVector l st_nos, SW GTYPE_p_uns gned_char codes, boolean  nclude_l stnos) {
    sw gfa ssJN . ndex VFFlat_encode_vectors__SW G_0(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(l st_nos.data()), l st_nos, SW GTYPE_p_uns gned_char.getCPtr(codes),  nclude_l stnos);
  }

  publ c vo d encode_vectors(long n, SW GTYPE_p_float x, LongVector l st_nos, SW GTYPE_p_uns gned_char codes) {
    sw gfa ssJN . ndex VFFlat_encode_vectors__SW G_1(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(l st_nos.data()), l st_nos, SW GTYPE_p_uns gned_char.getCPtr(codes));
  }

  publ c SW GTYPE_p_fa ss__ nvertedL stScanner get_ nvertedL stScanner(boolean store_pa rs) {
    long cPtr = sw gfa ssJN . ndex VFFlat_get_ nvertedL stScanner(sw gCPtr, t , store_pa rs);
    return (cPtr == 0) ? null : new SW GTYPE_p_fa ss__ nvertedL stScanner(cPtr, false);
  }

  publ c vo d reconstruct_from_offset(long l st_no, long offset, SW GTYPE_p_float recons) {
    sw gfa ssJN . ndex VFFlat_reconstruct_from_offset(sw gCPtr, t , l st_no, offset, SW GTYPE_p_float.getCPtr(recons));
  }

  publ c vo d sa_decode(long n, SW GTYPE_p_uns gned_char bytes, SW GTYPE_p_float x) {
    sw gfa ssJN . ndex VFFlat_sa_decode(sw gCPtr, t , n, SW GTYPE_p_uns gned_char.getCPtr(bytes), SW GTYPE_p_float.getCPtr(x));
  }

  publ c  ndex VFFlat() {
    t (sw gfa ssJN .new_ ndex VFFlat__SW G_2(), true);
  }

}
