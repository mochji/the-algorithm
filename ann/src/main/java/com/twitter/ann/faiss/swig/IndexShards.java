/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndexShards {
  pr vate trans ent long sw gCPtr;
  protected trans ent boolean sw gC mOwn;

  protected  ndexShards(long cPtr, boolean c moryOwn) {
    sw gC mOwn = c moryOwn;
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndexShards obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndexShards(sw gCPtr);
      }
      sw gCPtr = 0;
    }
  }

  publ c  ndexShards(boolean threaded, boolean success ve_ ds) {
    t (sw gfa ssJN .new_ ndexShards__SW G_0(threaded, success ve_ ds), true);
  }

  publ c  ndexShards(boolean threaded) {
    t (sw gfa ssJN .new_ ndexShards__SW G_1(threaded), true);
  }

  publ c  ndexShards() {
    t (sw gfa ssJN .new_ ndexShards__SW G_2(), true);
  }

  publ c  ndexShards( nt d, boolean threaded, boolean success ve_ ds) {
    t (sw gfa ssJN .new_ ndexShards__SW G_3(d, threaded, success ve_ ds), true);
  }

  publ c  ndexShards( nt d, boolean threaded) {
    t (sw gfa ssJN .new_ ndexShards__SW G_4(d, threaded), true);
  }

  publ c  ndexShards( nt d) {
    t (sw gfa ssJN .new_ ndexShards__SW G_5(d), true);
  }

  publ c vo d add_shard( ndex  ndex) {
    sw gfa ssJN . ndexShards_add_shard(sw gCPtr, t ,  ndex.getCPtr( ndex),  ndex);
  }

  publ c vo d remove_shard( ndex  ndex) {
    sw gfa ssJN . ndexShards_remove_shard(sw gCPtr, t ,  ndex.getCPtr( ndex),  ndex);
  }

  publ c vo d add(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexShards_add(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d add_w h_ ds(long n, SW GTYPE_p_float x, LongVector x ds) {
    sw gfa ssJN . ndexShards_add_w h_ ds(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_long_long.getCPtr(x ds.data()), x ds);
  }

  publ c vo d search(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndexShards_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexShards_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d setSuccess ve_ ds(boolean value) {
    sw gfa ssJN . ndexShards_success ve_ ds_set(sw gCPtr, t , value);
  }

  publ c boolean getSuccess ve_ ds() {
    return sw gfa ssJN . ndexShards_success ve_ ds_get(sw gCPtr, t );
  }

  publ c vo d syncW hSub ndexes() {
    sw gfa ssJN . ndexShards_syncW hSub ndexes(sw gCPtr, t );
  }

}
