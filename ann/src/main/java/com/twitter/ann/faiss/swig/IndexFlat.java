/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndexFlat extends  ndexFlatCodes {
  pr vate trans ent long sw gCPtr;

  protected  ndexFlat(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . ndexFlat_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndexFlat obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndexFlat(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c  ndexFlat(long d,  tr cType  tr c) {
    t (sw gfa ssJN .new_ ndexFlat__SW G_0(d,  tr c.sw gValue()), true);
  }

  publ c  ndexFlat(long d) {
    t (sw gfa ssJN .new_ ndexFlat__SW G_1(d), true);
  }

  publ c vo d search(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndexFlat_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c vo d range_search(long n, SW GTYPE_p_float x, float rad us, RangeSearchResult result) {
    sw gfa ssJN . ndexFlat_range_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), rad us, RangeSearchResult.getCPtr(result), result);
  }

  publ c vo d reconstruct(long key, SW GTYPE_p_float recons) {
    sw gfa ssJN . ndexFlat_reconstruct(sw gCPtr, t , key, SW GTYPE_p_float.getCPtr(recons));
  }

  publ c vo d compute_d stance_subset(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndexFlat_compute_d stance_subset(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c SW GTYPE_p_float get_xb() {
    long cPtr = sw gfa ssJN . ndexFlat_get_xb__SW G_0(sw gCPtr, t );
    return (cPtr == 0) ? null : new SW GTYPE_p_float(cPtr, false);
  }

  publ c  ndexFlat() {
    t (sw gfa ssJN .new_ ndexFlat__SW G_2(), true);
  }

  publ c D stanceComputer get_d stance_computer() {
    long cPtr = sw gfa ssJN . ndexFlat_get_d stance_computer(sw gCPtr, t );
    return (cPtr == 0) ? null : new D stanceComputer(cPtr, false);
  }

  publ c vo d sa_encode(long n, SW GTYPE_p_float x, SW GTYPE_p_uns gned_char bytes) {
    sw gfa ssJN . ndexFlat_sa_encode(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_uns gned_char.getCPtr(bytes));
  }

  publ c vo d sa_decode(long n, SW GTYPE_p_uns gned_char bytes, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexFlat_sa_decode(sw gCPtr, t , n, SW GTYPE_p_uns gned_char.getCPtr(bytes), SW GTYPE_p_float.getCPtr(x));
  }

}
