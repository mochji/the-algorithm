/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class HNSW {
  pr vate trans ent long sw gCPtr;
  protected trans ent boolean sw gC mOwn;

  protected HNSW(long cPtr, boolean c moryOwn) {
    sw gC mOwn = c moryOwn;
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr(HNSW obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_HNSW(sw gCPtr);
      }
      sw gCPtr = 0;
    }
  }

  stat c publ c class M n max ap {
    pr vate trans ent long sw gCPtr;
    protected trans ent boolean sw gC mOwn;
  
    protected M n max ap(long cPtr, boolean c moryOwn) {
      sw gC mOwn = c moryOwn;
      sw gCPtr = cPtr;
    }
  
    protected stat c long getCPtr(M n max ap obj) {
      return (obj == null) ? 0 : obj.sw gCPtr;
    }
  
    @SuppressWarn ngs("deprecat on")
    protected vo d f nal ze() {
      delete();
    }
  
    publ c synchron zed vo d delete() {
       f (sw gCPtr != 0) {
         f (sw gC mOwn) {
          sw gC mOwn = false;
          sw gfa ssJN .delete_HNSW_M n max ap(sw gCPtr);
        }
        sw gCPtr = 0;
      }
    }
  
    publ c vo d setN( nt value) {
      sw gfa ssJN .HNSW_M n max ap_n_set(sw gCPtr, t , value);
    }
  
    publ c  nt getN() {
      return sw gfa ssJN .HNSW_M n max ap_n_get(sw gCPtr, t );
    }
  
    publ c vo d setK( nt value) {
      sw gfa ssJN .HNSW_M n max ap_k_set(sw gCPtr, t , value);
    }
  
    publ c  nt getK() {
      return sw gfa ssJN .HNSW_M n max ap_k_get(sw gCPtr, t );
    }
  
    publ c vo d setNval d( nt value) {
      sw gfa ssJN .HNSW_M n max ap_nval d_set(sw gCPtr, t , value);
    }
  
    publ c  nt getNval d() {
      return sw gfa ssJN .HNSW_M n max ap_nval d_get(sw gCPtr, t );
    }
  
    publ c vo d set ds( ntVector value) {
      sw gfa ssJN .HNSW_M n max ap_ ds_set(sw gCPtr, t ,  ntVector.getCPtr(value), value);
    }
  
    publ c  ntVector get ds() {
      long cPtr = sw gfa ssJN .HNSW_M n max ap_ ds_get(sw gCPtr, t );
      return (cPtr == 0) ? null : new  ntVector(cPtr, false);
    }
  
    publ c vo d setD s(FloatVector value) {
      sw gfa ssJN .HNSW_M n max ap_d s_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
    }
  
    publ c FloatVector getD s() {
      long cPtr = sw gfa ssJN .HNSW_M n max ap_d s_get(sw gCPtr, t );
      return (cPtr == 0) ? null : new FloatVector(cPtr, false);
    }
  
    publ c M n max ap( nt n) {
      t (sw gfa ssJN .new_HNSW_M n max ap(n), true);
    }
  
    publ c vo d push( nt  , float v) {
      sw gfa ssJN .HNSW_M n max ap_push(sw gCPtr, t ,  , v);
    }
  
    publ c float max() {
      return sw gfa ssJN .HNSW_M n max ap_max(sw gCPtr, t );
    }
  
    publ c  nt s ze() {
      return sw gfa ssJN .HNSW_M n max ap_s ze(sw gCPtr, t );
    }
  
    publ c vo d clear() {
      sw gfa ssJN .HNSW_M n max ap_clear(sw gCPtr, t );
    }
  
    publ c  nt pop_m n(SW GTYPE_p_float vm n_out) {
      return sw gfa ssJN .HNSW_M n max ap_pop_m n__SW G_0(sw gCPtr, t , SW GTYPE_p_float.getCPtr(vm n_out));
    }
  
    publ c  nt pop_m n() {
      return sw gfa ssJN .HNSW_M n max ap_pop_m n__SW G_1(sw gCPtr, t );
    }
  
    publ c  nt count_below(float thresh) {
      return sw gfa ssJN .HNSW_M n max ap_count_below(sw gCPtr, t , thresh);
    }
  
  }

  stat c publ c class NodeD stCloser {
    pr vate trans ent long sw gCPtr;
    protected trans ent boolean sw gC mOwn;
  
    protected NodeD stCloser(long cPtr, boolean c moryOwn) {
      sw gC mOwn = c moryOwn;
      sw gCPtr = cPtr;
    }
  
    protected stat c long getCPtr(NodeD stCloser obj) {
      return (obj == null) ? 0 : obj.sw gCPtr;
    }
  
    @SuppressWarn ngs("deprecat on")
    protected vo d f nal ze() {
      delete();
    }
  
    publ c synchron zed vo d delete() {
       f (sw gCPtr != 0) {
         f (sw gC mOwn) {
          sw gC mOwn = false;
          sw gfa ssJN .delete_HNSW_NodeD stCloser(sw gCPtr);
        }
        sw gCPtr = 0;
      }
    }
  
    publ c vo d setD(float value) {
      sw gfa ssJN .HNSW_NodeD stCloser_d_set(sw gCPtr, t , value);
    }
  
    publ c float getD() {
      return sw gfa ssJN .HNSW_NodeD stCloser_d_get(sw gCPtr, t );
    }
  
    publ c vo d set d( nt value) {
      sw gfa ssJN .HNSW_NodeD stCloser_ d_set(sw gCPtr, t , value);
    }
  
    publ c  nt get d() {
      return sw gfa ssJN .HNSW_NodeD stCloser_ d_get(sw gCPtr, t );
    }
  
    publ c NodeD stCloser(float d,  nt  d) {
      t (sw gfa ssJN .new_HNSW_NodeD stCloser(d,  d), true);
    }
  
  }

  stat c publ c class NodeD stFart r {
    pr vate trans ent long sw gCPtr;
    protected trans ent boolean sw gC mOwn;
  
    protected NodeD stFart r(long cPtr, boolean c moryOwn) {
      sw gC mOwn = c moryOwn;
      sw gCPtr = cPtr;
    }
  
    protected stat c long getCPtr(NodeD stFart r obj) {
      return (obj == null) ? 0 : obj.sw gCPtr;
    }
  
    @SuppressWarn ngs("deprecat on")
    protected vo d f nal ze() {
      delete();
    }
  
    publ c synchron zed vo d delete() {
       f (sw gCPtr != 0) {
         f (sw gC mOwn) {
          sw gC mOwn = false;
          sw gfa ssJN .delete_HNSW_NodeD stFart r(sw gCPtr);
        }
        sw gCPtr = 0;
      }
    }
  
    publ c vo d setD(float value) {
      sw gfa ssJN .HNSW_NodeD stFart r_d_set(sw gCPtr, t , value);
    }
  
    publ c float getD() {
      return sw gfa ssJN .HNSW_NodeD stFart r_d_get(sw gCPtr, t );
    }
  
    publ c vo d set d( nt value) {
      sw gfa ssJN .HNSW_NodeD stFart r_ d_set(sw gCPtr, t , value);
    }
  
    publ c  nt get d() {
      return sw gfa ssJN .HNSW_NodeD stFart r_ d_get(sw gCPtr, t );
    }
  
    publ c NodeD stFart r(float d,  nt  d) {
      t (sw gfa ssJN .new_HNSW_NodeD stFart r(d,  d), true);
    }
  
  }

  publ c vo d setAss gn_probas(DoubleVector value) {
    sw gfa ssJN .HNSW_ass gn_probas_set(sw gCPtr, t , DoubleVector.getCPtr(value), value);
  }

  publ c DoubleVector getAss gn_probas() {
    long cPtr = sw gfa ssJN .HNSW_ass gn_probas_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new DoubleVector(cPtr, false);
  }

  publ c vo d setCum_nne ghbor_per_level( ntVector value) {
    sw gfa ssJN .HNSW_cum_nne ghbor_per_level_set(sw gCPtr, t ,  ntVector.getCPtr(value), value);
  }

  publ c  ntVector getCum_nne ghbor_per_level() {
    long cPtr = sw gfa ssJN .HNSW_cum_nne ghbor_per_level_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new  ntVector(cPtr, false);
  }

  publ c vo d setLevels( ntVector value) {
    sw gfa ssJN .HNSW_levels_set(sw gCPtr, t ,  ntVector.getCPtr(value), value);
  }

  publ c  ntVector getLevels() {
    long cPtr = sw gfa ssJN .HNSW_levels_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new  ntVector(cPtr, false);
  }

  publ c vo d setOffsets(U nt64Vector value) {
    sw gfa ssJN .HNSW_offsets_set(sw gCPtr, t , U nt64Vector.getCPtr(value), value);
  }

  publ c U nt64Vector getOffsets() {
    long cPtr = sw gfa ssJN .HNSW_offsets_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new U nt64Vector(cPtr, false);
  }

  publ c vo d setNe ghbors( ntVector value) {
    sw gfa ssJN .HNSW_ne ghbors_set(sw gCPtr, t ,  ntVector.getCPtr(value), value);
  }

  publ c  ntVector getNe ghbors() {
    long cPtr = sw gfa ssJN .HNSW_ne ghbors_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new  ntVector(cPtr, false);
  }

  publ c vo d setEntry_po nt( nt value) {
    sw gfa ssJN .HNSW_entry_po nt_set(sw gCPtr, t , value);
  }

  publ c  nt getEntry_po nt() {
    return sw gfa ssJN .HNSW_entry_po nt_get(sw gCPtr, t );
  }

  publ c vo d setRng(SW GTYPE_p_fa ss__RandomGenerator value) {
    sw gfa ssJN .HNSW_rng_set(sw gCPtr, t , SW GTYPE_p_fa ss__RandomGenerator.getCPtr(value));
  }

  publ c SW GTYPE_p_fa ss__RandomGenerator getRng() {
    long cPtr = sw gfa ssJN .HNSW_rng_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new SW GTYPE_p_fa ss__RandomGenerator(cPtr, false);
  }

  publ c vo d setMax_level( nt value) {
    sw gfa ssJN .HNSW_max_level_set(sw gCPtr, t , value);
  }

  publ c  nt getMax_level() {
    return sw gfa ssJN .HNSW_max_level_get(sw gCPtr, t );
  }

  publ c vo d setEfConstruct on( nt value) {
    sw gfa ssJN .HNSW_efConstruct on_set(sw gCPtr, t , value);
  }

  publ c  nt getEfConstruct on() {
    return sw gfa ssJN .HNSW_efConstruct on_get(sw gCPtr, t );
  }

  publ c vo d setEfSearch( nt value) {
    sw gfa ssJN .HNSW_efSearch_set(sw gCPtr, t , value);
  }

  publ c  nt getEfSearch() {
    return sw gfa ssJN .HNSW_efSearch_get(sw gCPtr, t );
  }

  publ c vo d setC ck_relat ve_d stance(boolean value) {
    sw gfa ssJN .HNSW_c ck_relat ve_d stance_set(sw gCPtr, t , value);
  }

  publ c boolean getC ck_relat ve_d stance() {
    return sw gfa ssJN .HNSW_c ck_relat ve_d stance_get(sw gCPtr, t );
  }

  publ c vo d setUpper_beam( nt value) {
    sw gfa ssJN .HNSW_upper_beam_set(sw gCPtr, t , value);
  }

  publ c  nt getUpper_beam() {
    return sw gfa ssJN .HNSW_upper_beam_get(sw gCPtr, t );
  }

  publ c vo d setSearch_bounded_queue(boolean value) {
    sw gfa ssJN .HNSW_search_bounded_queue_set(sw gCPtr, t , value);
  }

  publ c boolean getSearch_bounded_queue() {
    return sw gfa ssJN .HNSW_search_bounded_queue_get(sw gCPtr, t );
  }

  publ c vo d set_default_probas( nt M, float levelMult) {
    sw gfa ssJN .HNSW_set_default_probas(sw gCPtr, t , M, levelMult);
  }

  publ c vo d set_nb_ne ghbors( nt level_no,  nt n) {
    sw gfa ssJN .HNSW_set_nb_ne ghbors(sw gCPtr, t , level_no, n);
  }

  publ c  nt nb_ne ghbors( nt layer_no) {
    return sw gfa ssJN .HNSW_nb_ne ghbors(sw gCPtr, t , layer_no);
  }

  publ c  nt cum_nb_ne ghbors( nt layer_no) {
    return sw gfa ssJN .HNSW_cum_nb_ne ghbors(sw gCPtr, t , layer_no);
  }

  publ c vo d ne ghbor_range(long no,  nt layer_no, SW GTYPE_p_uns gned_long beg n, SW GTYPE_p_uns gned_long end) {
    sw gfa ssJN .HNSW_ne ghbor_range(sw gCPtr, t , no, layer_no, SW GTYPE_p_uns gned_long.getCPtr(beg n), SW GTYPE_p_uns gned_long.getCPtr(end));
  }

  publ c HNSW( nt M) {
    t (sw gfa ssJN .new_HNSW__SW G_0(M), true);
  }

  publ c HNSW() {
    t (sw gfa ssJN .new_HNSW__SW G_1(), true);
  }

  publ c  nt random_level() {
    return sw gfa ssJN .HNSW_random_level(sw gCPtr, t );
  }

  publ c vo d f ll_w h_random_l nks(long n) {
    sw gfa ssJN .HNSW_f ll_w h_random_l nks(sw gCPtr, t , n);
  }

  publ c vo d add_l nks_start ng_from(D stanceComputer ptd s,  nt pt_ d,  nt nearest, float d_nearest,  nt level, SW GTYPE_p_omp_lock_t locks, V s edTable vt) {
    sw gfa ssJN .HNSW_add_l nks_start ng_from(sw gCPtr, t , D stanceComputer.getCPtr(ptd s), ptd s, pt_ d, nearest, d_nearest, level, SW GTYPE_p_omp_lock_t.getCPtr(locks), V s edTable.getCPtr(vt), vt);
  }

  publ c vo d add_w h_locks(D stanceComputer ptd s,  nt pt_level,  nt pt_ d, SW GTYPE_p_std__vectorT_omp_lock_t_t locks, V s edTable vt) {
    sw gfa ssJN .HNSW_add_w h_locks(sw gCPtr, t , D stanceComputer.getCPtr(ptd s), ptd s, pt_level, pt_ d, SW GTYPE_p_std__vectorT_omp_lock_t_t.getCPtr(locks), V s edTable.getCPtr(vt), vt);
  }

  publ c  nt search_from_cand dates(D stanceComputer qd s,  nt k, LongVector  , SW GTYPE_p_float D, HNSW.M n max ap cand dates, V s edTable vt, HNSWStats stats,  nt level,  nt nres_ n) {
    return sw gfa ssJN .HNSW_search_from_cand dates__SW G_0(sw gCPtr, t , D stanceComputer.getCPtr(qd s), qd s, k, SW GTYPE_p_long_long.getCPtr( .data()),  , SW GTYPE_p_float.getCPtr(D), HNSW.M n max ap.getCPtr(cand dates), cand dates, V s edTable.getCPtr(vt), vt, HNSWStats.getCPtr(stats), stats, level, nres_ n);
  }

  publ c  nt search_from_cand dates(D stanceComputer qd s,  nt k, LongVector  , SW GTYPE_p_float D, HNSW.M n max ap cand dates, V s edTable vt, HNSWStats stats,  nt level) {
    return sw gfa ssJN .HNSW_search_from_cand dates__SW G_1(sw gCPtr, t , D stanceComputer.getCPtr(qd s), qd s, k, SW GTYPE_p_long_long.getCPtr( .data()),  , SW GTYPE_p_float.getCPtr(D), HNSW.M n max ap.getCPtr(cand dates), cand dates, V s edTable.getCPtr(vt), vt, HNSWStats.getCPtr(stats), stats, level);
  }

  publ c SW GTYPE_p_std__pr or y_queueT_std__pa rT_float_ nt_t_t search_from_cand date_unbounded(SW GTYPE_p_std__pa rT_float_ nt_t node, D stanceComputer qd s,  nt ef, V s edTable vt, HNSWStats stats) {
    return new SW GTYPE_p_std__pr or y_queueT_std__pa rT_float_ nt_t_t(sw gfa ssJN .HNSW_search_from_cand date_unbounded(sw gCPtr, t , SW GTYPE_p_std__pa rT_float_ nt_t.getCPtr(node), D stanceComputer.getCPtr(qd s), qd s, ef, V s edTable.getCPtr(vt), vt, HNSWStats.getCPtr(stats), stats), true);
  }

  publ c HNSWStats search(D stanceComputer qd s,  nt k, LongVector  , SW GTYPE_p_float D, V s edTable vt) {
    return new HNSWStats(sw gfa ssJN .HNSW_search(sw gCPtr, t , D stanceComputer.getCPtr(qd s), qd s, k, SW GTYPE_p_long_long.getCPtr( .data()),  , SW GTYPE_p_float.getCPtr(D), V s edTable.getCPtr(vt), vt), true);
  }

  publ c vo d reset() {
    sw gfa ssJN .HNSW_reset(sw gCPtr, t );
  }

  publ c vo d clear_ne ghbor_tables( nt level) {
    sw gfa ssJN .HNSW_clear_ne ghbor_tables(sw gCPtr, t , level);
  }

  publ c vo d pr nt_ne ghbor_stats( nt level) {
    sw gfa ssJN .HNSW_pr nt_ne ghbor_stats(sw gCPtr, t , level);
  }

  publ c  nt prepare_level_tab(long n, boolean preset_levels) {
    return sw gfa ssJN .HNSW_prepare_level_tab__SW G_0(sw gCPtr, t , n, preset_levels);
  }

  publ c  nt prepare_level_tab(long n) {
    return sw gfa ssJN .HNSW_prepare_level_tab__SW G_1(sw gCPtr, t , n);
  }

  publ c stat c vo d shr nk_ne ghbor_l st(D stanceComputer qd s, SW GTYPE_p_std__pr or y_queueT_fa ss__HNSW__NodeD stFart r_t  nput, SW GTYPE_p_std__vectorT_fa ss__HNSW__NodeD stFart r_t output,  nt max_s ze) {
    sw gfa ssJN .HNSW_shr nk_ne ghbor_l st(D stanceComputer.getCPtr(qd s), qd s, SW GTYPE_p_std__pr or y_queueT_fa ss__HNSW__NodeD stFart r_t.getCPtr( nput), SW GTYPE_p_std__vectorT_fa ss__HNSW__NodeD stFart r_t.getCPtr(output), max_s ze);
  }

}
