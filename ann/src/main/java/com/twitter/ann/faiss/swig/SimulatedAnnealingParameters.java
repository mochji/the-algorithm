/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class S mulatedAnneal ngPara ters {
  pr vate trans ent long sw gCPtr;
  protected trans ent boolean sw gC mOwn;

  protected S mulatedAnneal ngPara ters(long cPtr, boolean c moryOwn) {
    sw gC mOwn = c moryOwn;
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr(S mulatedAnneal ngPara ters obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_S mulatedAnneal ngPara ters(sw gCPtr);
      }
      sw gCPtr = 0;
    }
  }

  publ c vo d set n _temperature(double value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_ n _temperature_set(sw gCPtr, t , value);
  }

  publ c double get n _temperature() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_ n _temperature_get(sw gCPtr, t );
  }

  publ c vo d setTemperature_decay(double value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_temperature_decay_set(sw gCPtr, t , value);
  }

  publ c double getTemperature_decay() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_temperature_decay_get(sw gCPtr, t );
  }

  publ c vo d setN_ er( nt value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_n_ er_set(sw gCPtr, t , value);
  }

  publ c  nt getN_ er() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_n_ er_get(sw gCPtr, t );
  }

  publ c vo d setN_redo( nt value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_n_redo_set(sw gCPtr, t , value);
  }

  publ c  nt getN_redo() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_n_redo_get(sw gCPtr, t );
  }

  publ c vo d setSeed( nt value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_seed_set(sw gCPtr, t , value);
  }

  publ c  nt getSeed() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_seed_get(sw gCPtr, t );
  }

  publ c vo d setVerbose( nt value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_verbose_set(sw gCPtr, t , value);
  }

  publ c  nt getVerbose() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_verbose_get(sw gCPtr, t );
  }

  publ c vo d setOnly_b _fl ps(boolean value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_only_b _fl ps_set(sw gCPtr, t , value);
  }

  publ c boolean getOnly_b _fl ps() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_only_b _fl ps_get(sw gCPtr, t );
  }

  publ c vo d set n _random(boolean value) {
    sw gfa ssJN .S mulatedAnneal ngPara ters_ n _random_set(sw gCPtr, t , value);
  }

  publ c boolean get n _random() {
    return sw gfa ssJN .S mulatedAnneal ngPara ters_ n _random_get(sw gCPtr, t );
  }

  publ c S mulatedAnneal ngPara ters() {
    t (sw gfa ssJN .new_S mulatedAnneal ngPara ters(), true);
  }

}
