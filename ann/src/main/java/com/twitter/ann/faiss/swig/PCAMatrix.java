/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class PCAMatr x extends L nearTransform {
  pr vate trans ent long sw gCPtr;

  protected PCAMatr x(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN .PCAMatr x_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr(PCAMatr x obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_PCAMatr x(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d setE gen_po r(float value) {
    sw gfa ssJN .PCAMatr x_e gen_po r_set(sw gCPtr, t , value);
  }

  publ c float getE gen_po r() {
    return sw gfa ssJN .PCAMatr x_e gen_po r_get(sw gCPtr, t );
  }

  publ c vo d setEps lon(float value) {
    sw gfa ssJN .PCAMatr x_eps lon_set(sw gCPtr, t , value);
  }

  publ c float getEps lon() {
    return sw gfa ssJN .PCAMatr x_eps lon_get(sw gCPtr, t );
  }

  publ c vo d setRandom_rotat on(boolean value) {
    sw gfa ssJN .PCAMatr x_random_rotat on_set(sw gCPtr, t , value);
  }

  publ c boolean getRandom_rotat on() {
    return sw gfa ssJN .PCAMatr x_random_rotat on_get(sw gCPtr, t );
  }

  publ c vo d setMax_po nts_per_d(long value) {
    sw gfa ssJN .PCAMatr x_max_po nts_per_d_set(sw gCPtr, t , value);
  }

  publ c long getMax_po nts_per_d() {
    return sw gfa ssJN .PCAMatr x_max_po nts_per_d_get(sw gCPtr, t );
  }

  publ c vo d setBalanced_b ns( nt value) {
    sw gfa ssJN .PCAMatr x_balanced_b ns_set(sw gCPtr, t , value);
  }

  publ c  nt getBalanced_b ns() {
    return sw gfa ssJN .PCAMatr x_balanced_b ns_get(sw gCPtr, t );
  }

  publ c vo d set an(FloatVector value) {
    sw gfa ssJN .PCAMatr x_ an_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector get an() {
    long cPtr = sw gfa ssJN .PCAMatr x_ an_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c vo d setE genvalues(FloatVector value) {
    sw gfa ssJN .PCAMatr x_e genvalues_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector getE genvalues() {
    long cPtr = sw gfa ssJN .PCAMatr x_e genvalues_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c vo d setPCAMat(FloatVector value) {
    sw gfa ssJN .PCAMatr x_PCAMat_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector getPCAMat() {
    long cPtr = sw gfa ssJN .PCAMatr x_PCAMat_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c PCAMatr x( nt d_ n,  nt d_out, float e gen_po r, boolean random_rotat on) {
    t (sw gfa ssJN .new_PCAMatr x__SW G_0(d_ n, d_out, e gen_po r, random_rotat on), true);
  }

  publ c PCAMatr x( nt d_ n,  nt d_out, float e gen_po r) {
    t (sw gfa ssJN .new_PCAMatr x__SW G_1(d_ n, d_out, e gen_po r), true);
  }

  publ c PCAMatr x( nt d_ n,  nt d_out) {
    t (sw gfa ssJN .new_PCAMatr x__SW G_2(d_ n, d_out), true);
  }

  publ c PCAMatr x( nt d_ n) {
    t (sw gfa ssJN .new_PCAMatr x__SW G_3(d_ n), true);
  }

  publ c PCAMatr x() {
    t (sw gfa ssJN .new_PCAMatr x__SW G_4(), true);
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN .PCAMatr x_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d copy_from(PCAMatr x ot r) {
    sw gfa ssJN .PCAMatr x_copy_from(sw gCPtr, t , PCAMatr x.getCPtr(ot r), ot r);
  }

  publ c vo d prepare_Ab() {
    sw gfa ssJN .PCAMatr x_prepare_Ab(sw gCPtr, t );
  }

}
