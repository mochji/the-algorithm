/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class L nearTransform extends VectorTransform {
  pr vate trans ent long sw gCPtr;

  protected L nearTransform(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN .L nearTransform_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr(L nearTransform obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_L nearTransform(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d setHave_b as(boolean value) {
    sw gfa ssJN .L nearTransform_have_b as_set(sw gCPtr, t , value);
  }

  publ c boolean getHave_b as() {
    return sw gfa ssJN .L nearTransform_have_b as_get(sw gCPtr, t );
  }

  publ c vo d set s_orthonormal(boolean value) {
    sw gfa ssJN .L nearTransform_ s_orthonormal_set(sw gCPtr, t , value);
  }

  publ c boolean get s_orthonormal() {
    return sw gfa ssJN .L nearTransform_ s_orthonormal_get(sw gCPtr, t );
  }

  publ c vo d setA(FloatVector value) {
    sw gfa ssJN .L nearTransform_A_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector getA() {
    long cPtr = sw gfa ssJN .L nearTransform_A_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c vo d setB(FloatVector value) {
    sw gfa ssJN .L nearTransform_b_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector getB() {
    long cPtr = sw gfa ssJN .L nearTransform_b_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c L nearTransform( nt d_ n,  nt d_out, boolean have_b as) {
    t (sw gfa ssJN .new_L nearTransform__SW G_0(d_ n, d_out, have_b as), true);
  }

  publ c L nearTransform( nt d_ n,  nt d_out) {
    t (sw gfa ssJN .new_L nearTransform__SW G_1(d_ n, d_out), true);
  }

  publ c L nearTransform( nt d_ n) {
    t (sw gfa ssJN .new_L nearTransform__SW G_2(d_ n), true);
  }

  publ c L nearTransform() {
    t (sw gfa ssJN .new_L nearTransform__SW G_3(), true);
  }

  publ c vo d apply_noalloc(long n, SW GTYPE_p_float x, SW GTYPE_p_float xt) {
    sw gfa ssJN .L nearTransform_apply_noalloc(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_float.getCPtr(xt));
  }

  publ c vo d transform_transpose(long n, SW GTYPE_p_float y, SW GTYPE_p_float x) {
    sw gfa ssJN .L nearTransform_transform_transpose(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(y), SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d reverse_transform(long n, SW GTYPE_p_float xt, SW GTYPE_p_float x) {
    sw gfa ssJN .L nearTransform_reverse_transform(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(xt), SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d set_ s_orthonormal() {
    sw gfa ssJN .L nearTransform_set_ s_orthonormal(sw gCPtr, t );
  }

  publ c vo d setVerbose(boolean value) {
    sw gfa ssJN .L nearTransform_verbose_set(sw gCPtr, t , value);
  }

  publ c boolean getVerbose() {
    return sw gfa ssJN .L nearTransform_verbose_get(sw gCPtr, t );
  }

  publ c vo d pr nt_ f_verbose(Str ng na , DoubleVector mat,  nt n,  nt d) {
    sw gfa ssJN .L nearTransform_pr nt_ f_verbose(sw gCPtr, t , na , DoubleVector.getCPtr(mat), mat, n, d);
  }

}
