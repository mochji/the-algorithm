/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndexSpl Vectors extends  ndex {
  pr vate trans ent long sw gCPtr;

  protected  ndexSpl Vectors(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . ndexSpl Vectors_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndexSpl Vectors obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndexSpl Vectors(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d setOwn_f elds(boolean value) {
    sw gfa ssJN . ndexSpl Vectors_own_f elds_set(sw gCPtr, t , value);
  }

  publ c boolean getOwn_f elds() {
    return sw gfa ssJN . ndexSpl Vectors_own_f elds_get(sw gCPtr, t );
  }

  publ c vo d setThreaded(boolean value) {
    sw gfa ssJN . ndexSpl Vectors_threaded_set(sw gCPtr, t , value);
  }

  publ c boolean getThreaded() {
    return sw gfa ssJN . ndexSpl Vectors_threaded_get(sw gCPtr, t );
  }

  publ c vo d setSub_ ndexes(SW GTYPE_p_std__vectorT_fa ss__ ndex_p_t value) {
    sw gfa ssJN . ndexSpl Vectors_sub_ ndexes_set(sw gCPtr, t , SW GTYPE_p_std__vectorT_fa ss__ ndex_p_t.getCPtr(value));
  }

  publ c SW GTYPE_p_std__vectorT_fa ss__ ndex_p_t getSub_ ndexes() {
    long cPtr = sw gfa ssJN . ndexSpl Vectors_sub_ ndexes_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new SW GTYPE_p_std__vectorT_fa ss__ ndex_p_t(cPtr, false);
  }

  publ c vo d setSum_d(long value) {
    sw gfa ssJN . ndexSpl Vectors_sum_d_set(sw gCPtr, t , value);
  }

  publ c long getSum_d() {
    return sw gfa ssJN . ndexSpl Vectors_sum_d_get(sw gCPtr, t );
}

  publ c vo d add_sub_ ndex( ndex arg0) {
    sw gfa ssJN . ndexSpl Vectors_add_sub_ ndex(sw gCPtr, t ,  ndex.getCPtr(arg0), arg0);
  }

  publ c vo d sync_w h_sub_ ndexes() {
    sw gfa ssJN . ndexSpl Vectors_sync_w h_sub_ ndexes(sw gCPtr, t );
  }

  publ c vo d add(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexSpl Vectors_add(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d search(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndexSpl Vectors_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexSpl Vectors_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d reset() {
    sw gfa ssJN . ndexSpl Vectors_reset(sw gCPtr, t );
  }

}
