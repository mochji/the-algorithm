/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  ndexLSH extends  ndexFlatCodes {
  pr vate trans ent long sw gCPtr;

  protected  ndexLSH(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . ndexLSH_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( ndexLSH obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ ndexLSH(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d setNb s( nt value) {
    sw gfa ssJN . ndexLSH_nb s_set(sw gCPtr, t , value);
  }

  publ c  nt getNb s() {
    return sw gfa ssJN . ndexLSH_nb s_get(sw gCPtr, t );
  }

  publ c vo d setRotate_data(boolean value) {
    sw gfa ssJN . ndexLSH_rotate_data_set(sw gCPtr, t , value);
  }

  publ c boolean getRotate_data() {
    return sw gfa ssJN . ndexLSH_rotate_data_get(sw gCPtr, t );
  }

  publ c vo d setTra n_thresholds(boolean value) {
    sw gfa ssJN . ndexLSH_tra n_thresholds_set(sw gCPtr, t , value);
  }

  publ c boolean getTra n_thresholds() {
    return sw gfa ssJN . ndexLSH_tra n_thresholds_get(sw gCPtr, t );
  }

  publ c vo d setRrot(RandomRotat onMatr x value) {
    sw gfa ssJN . ndexLSH_rrot_set(sw gCPtr, t , RandomRotat onMatr x.getCPtr(value), value);
  }

  publ c RandomRotat onMatr x getRrot() {
    long cPtr = sw gfa ssJN . ndexLSH_rrot_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new RandomRotat onMatr x(cPtr, false);
  }

  publ c vo d setThresholds(FloatVector value) {
    sw gfa ssJN . ndexLSH_thresholds_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector getThresholds() {
    long cPtr = sw gfa ssJN . ndexLSH_thresholds_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c  ndexLSH(long d,  nt nb s, boolean rotate_data, boolean tra n_thresholds) {
    t (sw gfa ssJN .new_ ndexLSH__SW G_0(d, nb s, rotate_data, tra n_thresholds), true);
  }

  publ c  ndexLSH(long d,  nt nb s, boolean rotate_data) {
    t (sw gfa ssJN .new_ ndexLSH__SW G_1(d, nb s, rotate_data), true);
  }

  publ c  ndexLSH(long d,  nt nb s) {
    t (sw gfa ssJN .new_ ndexLSH__SW G_2(d, nb s), true);
  }

  publ c SW GTYPE_p_float apply_preprocess(long n, SW GTYPE_p_float x) {
    long cPtr = sw gfa ssJN . ndexLSH_apply_preprocess(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
    return (cPtr == 0) ? null : new SW GTYPE_p_float(cPtr, false);
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexLSH_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d search(long n, SW GTYPE_p_float x, long k, SW GTYPE_p_float d stances, LongVector labels) {
    sw gfa ssJN . ndexLSH_search(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), k, SW GTYPE_p_float.getCPtr(d stances), SW GTYPE_p_long_long.getCPtr(labels.data()), labels);
  }

  publ c vo d transfer_thresholds(L nearTransform vt) {
    sw gfa ssJN . ndexLSH_transfer_thresholds(sw gCPtr, t , L nearTransform.getCPtr(vt), vt);
  }

  publ c  ndexLSH() {
    t (sw gfa ssJN .new_ ndexLSH__SW G_3(), true);
  }

  publ c vo d sa_encode(long n, SW GTYPE_p_float x, SW GTYPE_p_uns gned_char bytes) {
    sw gfa ssJN . ndexLSH_sa_encode(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_uns gned_char.getCPtr(bytes));
  }

  publ c vo d sa_decode(long n, SW GTYPE_p_uns gned_char bytes, SW GTYPE_p_float x) {
    sw gfa ssJN . ndexLSH_sa_decode(sw gCPtr, t , n, SW GTYPE_p_uns gned_char.getCPtr(bytes), SW GTYPE_p_float.getCPtr(x));
  }

}
