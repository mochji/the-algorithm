/* ----------------------------------------------------------------------------
 * T  f le was automat cally generated by SW G (http://www.sw g.org).
 * Vers on 4.0.2
 *
 * Do not make changes to t  f le unless   know what   are do ng--mod fy
 * t  SW G  nterface f le  nstead.
 * ----------------------------------------------------------------------------- */

package com.tw ter.ann.fa ss;

publ c class  TQTransform extends VectorTransform {
  pr vate trans ent long sw gCPtr;

  protected  TQTransform(long cPtr, boolean c moryOwn) {
    super(sw gfa ssJN . TQTransform_SW GUpcast(cPtr), c moryOwn);
    sw gCPtr = cPtr;
  }

  protected stat c long getCPtr( TQTransform obj) {
    return (obj == null) ? 0 : obj.sw gCPtr;
  }

  @SuppressWarn ngs("deprecat on")
  protected vo d f nal ze() {
    delete();
  }

  publ c synchron zed vo d delete() {
     f (sw gCPtr != 0) {
       f (sw gC mOwn) {
        sw gC mOwn = false;
        sw gfa ssJN .delete_ TQTransform(sw gCPtr);
      }
      sw gCPtr = 0;
    }
    super.delete();
  }

  publ c vo d set an(FloatVector value) {
    sw gfa ssJN . TQTransform_ an_set(sw gCPtr, t , FloatVector.getCPtr(value), value);
  }

  publ c FloatVector get an() {
    long cPtr = sw gfa ssJN . TQTransform_ an_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new FloatVector(cPtr, false);
  }

  publ c vo d setDo_pca(boolean value) {
    sw gfa ssJN . TQTransform_do_pca_set(sw gCPtr, t , value);
  }

  publ c boolean getDo_pca() {
    return sw gfa ssJN . TQTransform_do_pca_get(sw gCPtr, t );
  }

  publ c vo d set q( TQMatr x value) {
    sw gfa ssJN . TQTransform_ q_set(sw gCPtr, t ,  TQMatr x.getCPtr(value), value);
  }

  publ c  TQMatr x get q() {
    long cPtr = sw gfa ssJN . TQTransform_ q_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new  TQMatr x(cPtr, false);
  }

  publ c vo d setMax_tra n_per_d m( nt value) {
    sw gfa ssJN . TQTransform_max_tra n_per_d m_set(sw gCPtr, t , value);
  }

  publ c  nt getMax_tra n_per_d m() {
    return sw gfa ssJN . TQTransform_max_tra n_per_d m_get(sw gCPtr, t );
  }

  publ c vo d setPca_t n_ q(L nearTransform value) {
    sw gfa ssJN . TQTransform_pca_t n_ q_set(sw gCPtr, t , L nearTransform.getCPtr(value), value);
  }

  publ c L nearTransform getPca_t n_ q() {
    long cPtr = sw gfa ssJN . TQTransform_pca_t n_ q_get(sw gCPtr, t );
    return (cPtr == 0) ? null : new L nearTransform(cPtr, false);
  }

  publ c  TQTransform( nt d_ n,  nt d_out, boolean do_pca) {
    t (sw gfa ssJN .new_ TQTransform__SW G_0(d_ n, d_out, do_pca), true);
  }

  publ c  TQTransform( nt d_ n,  nt d_out) {
    t (sw gfa ssJN .new_ TQTransform__SW G_1(d_ n, d_out), true);
  }

  publ c  TQTransform( nt d_ n) {
    t (sw gfa ssJN .new_ TQTransform__SW G_2(d_ n), true);
  }

  publ c  TQTransform() {
    t (sw gfa ssJN .new_ TQTransform__SW G_3(), true);
  }

  publ c vo d tra n(long n, SW GTYPE_p_float x) {
    sw gfa ssJN . TQTransform_tra n(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x));
  }

  publ c vo d apply_noalloc(long n, SW GTYPE_p_float x, SW GTYPE_p_float xt) {
    sw gfa ssJN . TQTransform_apply_noalloc(sw gCPtr, t , n, SW GTYPE_p_float.getCPtr(x), SW GTYPE_p_float.getCPtr(xt));
  }

}
